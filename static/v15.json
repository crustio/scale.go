{
  "metadata_version": 15,
  "metadata": {
    "modules": [
      {
        "name": "System",
        "prefix": "System",
        "storage": [
          {
            "name": "Account",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "frame_system:AccountInfo",
                "keys_id": 0,
                "value_id": 3
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
            "docs": [
              " The full account information for a particular account ID."
            ]
          },
          {
            "name": "ExtrinsicCount",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Total extrinsics count for the current block."
            ]
          },
          {
            "name": "BlockWeight",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "frame_support:dispatch:PerDispatchClass@8",
              "PlainTypeValue": 8
            },
            "fallback": "0x000000000000",
            "docs": [
              " The current weight for the block."
            ]
          },
          {
            "name": "AllExtrinsicsLen",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Total length (in bytes) for all extrinsics put together, for the current block."
            ]
          },
          {
            "name": "BlockHash",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "H256",
                "keys_id": 4,
                "value_id": 12
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Map of block numbers to block hashes."
            ]
          },
          {
            "name": "ExtrinsicData",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 13
              }
            },
            "fallback": "0x00",
            "docs": [
              " Extrinsics data for the current block (maps an extrinsic's index to its data)."
            ]
          },
          {
            "name": "Number",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The current block number being processed. Set by `execute_block`."
            ]
          },
          {
            "name": "ParentHash",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "H256",
              "PlainTypeValue": 12
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Hash of the previous block."
            ]
          },
          {
            "name": "Digest",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003csp_runtime:generic:digest:DigestItem\u003e",
              "PlainTypeValue": 14
            },
            "fallback": "0x00",
            "docs": [
              " Digest of the current block, also part of the block header."
            ]
          },
          {
            "name": "Events",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cframe_system:EventRecord\u003e",
              "PlainTypeValue": 18
            },
            "fallback": "0x00",
            "docs": [
              " Events deposited for the current block.",
              "",
              " NOTE: The item is unbound and should therefore never be read on chain.",
              " It could otherwise inflate the PoV size of a block.",
              "",
              " Events have a large in-memory size. Box the events to not go out-of-memory",
              " just in case someone still reads them from within the runtime."
            ]
          },
          {
            "name": "EventCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of events in the `Events\u003cT\u003e` list."
            ]
          },
          {
            "name": "EventTopics",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Vec\u003cTuple:U32U32\u003e",
                "keys_id": 12,
                "value_id": 419
              }
            },
            "fallback": "0x00",
            "docs": [
              " Mapping between a topic (represented by T::Hash) and a vector of indexes",
              " of events in the `\u003cEvents\u003cT\u003e\u003e` list.",
              "",
              " All topic vectors have deterministic storage locations depending on the topic. This",
              " allows light-clients to leverage the changes trie storage tracking mechanism and",
              " in case of changes fetch the list of events of interest.",
              "",
              " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
              " the `EventIndex` then in case if the topic has the same contents on the next block",
              " no notification will be triggered thus the event might be lost."
            ]
          },
          {
            "name": "LastRuntimeUpgrade",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "frame_system:LastRuntimeUpgradeInfo",
              "PlainTypeValue": 420
            },
            "fallback": "0x00",
            "docs": [
              " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
            ]
          },
          {
            "name": "UpgradedToU32RefCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 42
            },
            "fallback": "0x00",
            "docs": [
              " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
            ]
          },
          {
            "name": "UpgradedToTripleRefCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 42
            },
            "fallback": "0x00",
            "docs": [
              " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
              " (default) if not."
            ]
          },
          {
            "name": "ExecutionPhase",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "frame_system:Phase",
              "PlainTypeValue": 417
            },
            "fallback": "0x00",
            "docs": [
              " The execution phase of the block."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0000",
            "name": "remark",
            "docs": [
              "Make some on-chain remark.",
              "",
              "## Complexity",
              "- `O(1)`"
            ],
            "args": [
              {
                "name": "remark",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "0001",
            "name": "set_heap_pages",
            "docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ],
            "args": [
              {
                "name": "pages",
                "type": "U64",
                "type_name": "u64"
              }
            ]
          },
          {
            "lookup": "0002",
            "name": "set_code",
            "docs": [
              "Set the new runtime code.",
              "",
              "## Complexity",
              "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"
            ],
            "args": [
              {
                "name": "code",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "0003",
            "name": "set_code_without_checks",
            "docs": [
              "Set the new runtime code without doing any checks of the given `code`.",
              "",
              "## Complexity",
              "- `O(C)` where `C` length of `code`"
            ],
            "args": [
              {
                "name": "code",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "0004",
            "name": "set_storage",
            "docs": [
              "Set some items of storage."
            ],
            "args": [
              {
                "name": "items",
                "type": "Vec\u003cTuple:Vec\u003cU8\u003eVec\u003cU8\u003e\u003e",
                "type_name": "Vec\u003cKeyValue\u003e"
              }
            ]
          },
          {
            "lookup": "0005",
            "name": "kill_storage",
            "docs": [
              "Kill some items from storage."
            ],
            "args": [
              {
                "name": "keys",
                "type": "Vec\u003cVec\u003cU8\u003e\u003e",
                "type_name": "Vec\u003cKey\u003e"
              }
            ]
          },
          {
            "lookup": "0006",
            "name": "kill_prefix",
            "docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ],
            "args": [
              {
                "name": "prefix",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Key"
              },
              {
                "name": "subkeys",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0007",
            "name": "remark_with_event",
            "docs": [
              "Make some on-chain remark and emit event."
            ],
            "args": [
              {
                "name": "remark",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 134
        },
        "events": [
          {
            "lookup": "0000",
            "name": "ExtrinsicSuccess",
            "docs": [
              "An extrinsic completed successfully."
            ],
            "args": [
              "frame_support:dispatch:DispatchInfo"
            ],
            "args_type_name": [
              "DispatchInfo"
            ]
          },
          {
            "lookup": "0001",
            "name": "ExtrinsicFailed",
            "docs": [
              "An extrinsic failed."
            ],
            "args": [
              "sp_runtime:DispatchError",
              "frame_support:dispatch:DispatchInfo"
            ],
            "args_type_name": [
              "DispatchError",
              "DispatchInfo"
            ]
          },
          {
            "lookup": "0002",
            "name": "CodeUpdated",
            "docs": [
              "`:code` was updated."
            ],
            "args": null
          },
          {
            "lookup": "0003",
            "name": "NewAccount",
            "docs": [
              "A new account was created."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "0004",
            "name": "KilledAccount",
            "docs": [
              "An account was reaped."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "0005",
            "name": "Remarked",
            "docs": [
              "On on-chain remark happened."
            ],
            "args": [
              "[U8; 32]",
              "H256"
            ],
            "args_type_name": [
              "AccountId",
              "Hash"
            ]
          }
        ],
        "events_value": {
          "type": 21
        },
        "constants": [
          {
            "name": "BlockWeights",
            "type": "frame_system:limits:BlockWeights",
            "type_value": 422,
            "constants_value": "0203815d000b00204aa9d10113ffffffffffffffffc2e9171b00010b90cd43a72e011366666666666666a6010b0098f73e5d0113ffffffffffffffbf010000c2e9171b00010b90559611a3011366666666666666e6010b00204aa9d10113ffffffffffffffff01070088526a74130000000000000040c2e9171b00000000",
            "docs": [
              " Block \u0026 extrinsics weights: base values and limits."
            ]
          },
          {
            "name": "BlockLength",
            "type": "frame_support:dispatch:PerDispatchClass@426",
            "type_value": 425,
            "constants_value": "00003c000000500000005000",
            "docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "name": "BlockHashCount",
            "type": "U32",
            "type_value": 4,
            "constants_value": "60090000",
            "docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "name": "DbWeight",
            "type": "sp_weights:RuntimeDbWeight",
            "type_value": 427,
            "constants_value": "40787d010000000000e1f50500000000",
            "docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "name": "Version",
            "type": "sp_version:RuntimeVersion",
            "type_value": 428,
            "constants_value": "106e6f6465387375627374726174652d6e6f64650a0000000c0100000000000048df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ed99c5acb25eedf50300000017a6bc0d0062aeb30100000018ef58a3b67ba77001000000cbca25e39f14238702000000687ad44ad37f03c201000000bc9d89904f5b923f010000008453b50b222939770100000068b66ba122c93fa70200000037c8bb1350a9a2a804000000f3ff14d5ab52705903000000899a250cbe84f2500100000091d5df18b0d2cf5802000000ab3c0572291feb8b010000000200000001",
            "docs": [
              " Get the chain's current version."
            ]
          },
          {
            "name": "SS58Prefix",
            "type": "U16",
            "type_value": 96,
            "constants_value": "2a00",
            "docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "errors": [
          {
            "name": "InvalidSpecName",
            "doc": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "name": "SpecVersionNeedsToIncrease",
            "doc": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "name": "FailedToExtractRuntimeVersion",
            "doc": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "name": "NonDefaultComposite",
            "doc": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "name": "NonZeroRefCount",
            "doc": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "name": "CallFiltered",
            "doc": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "errors_value": {
          "type": 432
        },
        "index": 0
      },
      {
        "name": "Utility",
        "prefix": "",
        "storage": null,
        "calls": [
          {
            "lookup": "0100",
            "name": "batch",
            "docs": [
              "Send a batch of dispatch calls.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched.",
              "",
              "This will return `Ok` in all circumstances. To determine the success of the batch, an",
              "event is deposited. If a call failed and the batch was interrupted, then the",
              "`BatchInterrupted` event is deposited, along with the number of successful calls made",
              "and the error of the failed call. If all were successful, then the `BatchCompleted`",
              "event is deposited."
            ],
            "args": [
              {
                "name": "calls",
                "type": "Vec\u003cCall\u003e",
                "type_name": "Vec\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "0101",
            "name": "as_derivative",
            "docs": [
              "Send a call through an indexed pseudonym of the sender.",
              "",
              "Filter from origin are passed along. The call will be dispatched with an origin which",
              "use the same filter as the origin of this call.",
              "",
              "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
              "because you expect `proxy` to have been used prior in the call stack and you do not want",
              "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
              "in the Multisig pallet instead.",
              "",
              "NOTE: Prior to version *12, this was called `as_limited_sub`.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ],
            "args": [
              {
                "name": "index",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "0102",
            "name": "batch_all",
            "docs": [
              "Send a batch of dispatch calls and atomically execute them.",
              "The whole transaction will rollback and fail if any of the calls failed.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ],
            "args": [
              {
                "name": "calls",
                "type": "Vec\u003cCall\u003e",
                "type_name": "Vec\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "0103",
            "name": "dispatch_as",
            "docs": [
              "Dispatches a function call with a provided origin.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "as_origin",
                "type": "kitchensink_runtime:OriginCaller",
                "type_name": "Box\u003cPalletsOrigin\u003e"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "0104",
            "name": "force_batch",
            "docs": [
              "Send a batch of dispatch calls.",
              "Unlike `batch`, it allows errors and won't interrupt.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatch without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ],
            "args": [
              {
                "name": "calls",
                "type": "Vec\u003cCall\u003e",
                "type_name": "Vec\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "0105",
            "name": "with_weight",
            "docs": [
              "Dispatch a function call with a specified weight.",
              "",
              "This function does not check the weight of the call, and instead allows the",
              "Root origin to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Root_."
            ],
            "args": [
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              },
              {
                "name": "weight",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 138
        },
        "events": [
          {
            "lookup": "0100",
            "name": "BatchInterrupted",
            "docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ],
            "args": [
              "U32",
              "sp_runtime:DispatchError"
            ],
            "args_type_name": [
              "u32",
              "DispatchError"
            ]
          },
          {
            "lookup": "0101",
            "name": "BatchCompleted",
            "docs": [
              "Batch of dispatches completed fully with no error."
            ],
            "args": null
          },
          {
            "lookup": "0102",
            "name": "BatchCompletedWithErrors",
            "docs": [
              "Batch of dispatches completed but has errors."
            ],
            "args": null
          },
          {
            "lookup": "0103",
            "name": "ItemCompleted",
            "docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ],
            "args": null
          },
          {
            "lookup": "0104",
            "name": "ItemFailed",
            "docs": [
              "A single item within a Batch of dispatches has completed with error."
            ],
            "args": [
              "sp_runtime:DispatchError"
            ],
            "args_type_name": [
              "DispatchError"
            ]
          },
          {
            "lookup": "0105",
            "name": "DispatchedAs",
            "docs": [
              "A call was dispatched."
            ],
            "args": [
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "DispatchResult"
            ]
          }
        ],
        "events_value": {
          "type": 30
        },
        "constants": [
          {
            "name": "batched_calls_limit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "aa2a0000",
            "docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "errors": [
          {
            "name": "TooManyCalls",
            "doc": [
              "Too many calls batched."
            ]
          }
        ],
        "errors_value": {
          "type": 433
        },
        "index": 1
      },
      {
        "name": "Babe",
        "prefix": "Babe",
        "storage": [
          {
            "name": "EpochIndex",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 11
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Current epoch index."
            ]
          },
          {
            "name": "Authorities",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:[U8; 32]U64\u003e",
              "PlainTypeValue": 434
            },
            "fallback": "0x00",
            "docs": [
              " Current epoch authorities."
            ]
          },
          {
            "name": "GenesisSlot",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 152
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " The slot at which the first epoch actually started. This is 0",
              " until the first block of the chain."
            ]
          },
          {
            "name": "CurrentSlot",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 152
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Current slot number."
            ]
          },
          {
            "name": "Randomness",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 1
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " The epoch randomness for the *current* epoch.",
              "",
              " # Security",
              "",
              " This MUST NOT be used for gambling, as it can be influenced by a",
              " malicious validator in the short term. It MAY be used in many",
              " cryptographic protocols, however, so long as one remembers that this",
              " (like everything else on-chain) it is public. For example, it can be",
              " used where a number is needed that cannot have been chosen by an",
              " adversary, for purposes such as public-coin zero-knowledge proofs."
            ]
          },
          {
            "name": "PendingEpochConfigChange",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "sp_consensus_babe:digests:NextConfigDescriptor",
              "PlainTypeValue": 154
            },
            "fallback": "0x00",
            "docs": [
              " Pending epoch configuration change that will be applied when the next epoch is enacted."
            ]
          },
          {
            "name": "NextRandomness",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 1
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Next epoch randomness."
            ]
          },
          {
            "name": "NextAuthorities",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:[U8; 32]U64\u003e",
              "PlainTypeValue": 434
            },
            "fallback": "0x00",
            "docs": [
              " Next epoch authorities."
            ]
          },
          {
            "name": "SegmentIndex",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Randomness under construction.",
              "",
              " We make a trade-off between storage accesses and list length.",
              " We store the under-construction randomness in segments of up to",
              " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
              "",
              " Once a segment reaches this length, we begin the next one.",
              " We reset all segments and return to `0` at the beginning of every",
              " epoch."
            ]
          },
          {
            "name": "UnderConstruction",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003c[U8; 32]\u003e",
                "keys_id": 4,
                "value_id": 437
              }
            },
            "fallback": "0x00",
            "docs": [
              " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
            ]
          },
          {
            "name": "Initialized",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "option\u003csp_consensus_babe:digests:PreDigest\u003e",
              "PlainTypeValue": 439
            },
            "fallback": "0x00",
            "docs": [
              " Temporary value (cleared at block finalization) which is `Some`",
              " if per-block initialization has already been called for current block."
            ]
          },
          {
            "name": "AuthorVrfRandomness",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "option\u003c[U8; 32]\u003e",
              "PlainTypeValue": 91
            },
            "fallback": "0x00",
            "docs": [
              " This field should always be populated during block processing unless",
              " secondary plain slots are enabled (which don't contain a VRF output).",
              "",
              " It is set in `on_finalize`, before it will contain the value from the last block."
            ]
          },
          {
            "name": "EpochStart",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Tuple:U32U32",
              "PlainTypeValue": 90
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " The block numbers when the last and current epoch have started, respectively `N-1` and",
              " `N`.",
              " NOTE: We track this is in order to annotate the block number when a given pool of",
              " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
              " slots, which may be skipped, the block numbers may not line up with the slot numbers."
            ]
          },
          {
            "name": "Lateness",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " How late the current block is compared to its parent.",
              "",
              " This entry is populated as part of block execution and is cleaned up",
              " on block finalization. Querying this storage entry outside of block",
              " execution context should always yield zero."
            ]
          },
          {
            "name": "EpochConfig",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "sp_consensus_babe:BabeEpochConfiguration",
              "PlainTypeValue": 445
            },
            "fallback": "0x00",
            "docs": [
              " The configuration for the current epoch. Should never be `None` as it is initialized in",
              " genesis."
            ]
          },
          {
            "name": "NextEpochConfig",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "sp_consensus_babe:BabeEpochConfiguration",
              "PlainTypeValue": 445
            },
            "fallback": "0x00",
            "docs": [
              " The configuration for the next epoch, `None` if the config will not change",
              " (you can fallback to `EpochConfig` instead in that case)."
            ]
          },
          {
            "name": "SkippedEpochs",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U64U32\u003e",
              "PlainTypeValue": 446
            },
            "fallback": "0x00",
            "docs": [
              " A list of the last 100 skipped epochs and the corresponding session index",
              " when the epoch was skipped.",
              "",
              " This is only used for validating equivocation proofs. An equivocation proof",
              " must contains a key-ownership proof for a given session, therefore we need a",
              " way to tie together sessions and epoch indices, i.e. we need to validate that",
              " a validator was the owner of a given key on a given session, and what the",
              " active epoch index was during that session."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0200",
            "name": "report_equivocation",
            "docs": [
              "Report authority equivocation/misbehavior. This method will verify",
              "the equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence will",
              "be reported."
            ],
            "args": [
              {
                "name": "equivocation_proof",
                "type": "sp_consensus_slots:EquivocationProof",
                "type_name": "Box\u003cEquivocationProof\u003cHeader\u003e\u003e"
              },
              {
                "name": "key_owner_proof",
                "type": "sp_session:MembershipProof",
                "type_name": "KeyOwnerProof"
              }
            ]
          },
          {
            "lookup": "0201",
            "name": "report_equivocation_unsigned",
            "docs": [
              "Report authority equivocation/misbehavior. This method will verify",
              "the equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence will",
              "be reported.",
              "This extrinsic must be called unsigned and it is expected that only",
              "block authors will call it (validated in `ValidateUnsigned`), as such",
              "if the block author is defined it will be defined as the equivocation",
              "reporter."
            ],
            "args": [
              {
                "name": "equivocation_proof",
                "type": "sp_consensus_slots:EquivocationProof",
                "type_name": "Box\u003cEquivocationProof\u003cHeader\u003e\u003e"
              },
              {
                "name": "key_owner_proof",
                "type": "sp_session:MembershipProof",
                "type_name": "KeyOwnerProof"
              }
            ]
          },
          {
            "lookup": "0202",
            "name": "plan_config_change",
            "docs": [
              "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
              "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
              "Multiple calls to this method will replace any existing planned config change that had",
              "not been enacted yet."
            ],
            "args": [
              {
                "name": "config",
                "type": "sp_consensus_babe:digests:NextConfigDescriptor",
                "type_name": "NextConfigDescriptor"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 146
        },
        "constants": [
          {
            "name": "EpochDuration",
            "type": "U64",
            "type_value": 11,
            "constants_value": "c800000000000000",
            "docs": [
              " The amount of time, in slots, that each epoch should last.",
              " NOTE: Currently it is not possible to change the epoch duration after",
              " the chain has started. Attempting to do so will brick block production."
            ]
          },
          {
            "name": "ExpectedBlockTime",
            "type": "U64",
            "type_value": 11,
            "constants_value": "b80b000000000000",
            "docs": [
              " The expected average block time at which BABE should be creating",
              " blocks. Since BABE is probabilistic it is not trivial to figure out",
              " what the expected average block time should be based on the slot",
              " duration and the security parameter `c` (where `1 - c` represents",
              " the probability of a slot being empty)."
            ]
          },
          {
            "name": "MaxAuthorities",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " Max number of authorities allowed"
            ]
          }
        ],
        "errors": [
          {
            "name": "InvalidEquivocationProof",
            "doc": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "name": "InvalidKeyOwnershipProof",
            "doc": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "name": "DuplicateOffenceReport",
            "doc": [
              "A given equivocation report is valid but already previously reported."
            ]
          },
          {
            "name": "InvalidConfiguration",
            "doc": [
              "Submitted configuration is invalid."
            ]
          }
        ],
        "errors_value": {
          "type": 449
        },
        "index": 2
      },
      {
        "name": "Timestamp",
        "prefix": "Timestamp",
        "storage": [
          {
            "name": "Now",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 11
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Current time for the current block."
            ]
          },
          {
            "name": "DidUpdate",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 42
            },
            "fallback": "0x00",
            "docs": [
              " Did the timestamp get updated in this block?"
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0300",
            "name": "set",
            "docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "`MinimumPeriod`.",
              "",
              "The dispatch origin for this call must be `Inherent`.",
              "",
              "## Complexity",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
            ],
            "args": [
              {
                "name": "now",
                "type": "compact\u003cU64\u003e",
                "type_name": "Moment"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 157
        },
        "constants": [
          {
            "name": "MinimumPeriod",
            "type": "U64",
            "type_value": 11,
            "constants_value": "dc05000000000000",
            "docs": [
              " The minimum period between blocks. Beware that this is different to the *expected*",
              " period that the block production apparatus provides. Your chosen consensus system will",
              " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
              " double this period on default settings."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 3
      },
      {
        "name": "Authorship",
        "prefix": "Authorship",
        "storage": [
          {
            "name": "Author",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " Author of current block."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 4
      },
      {
        "name": "Indices",
        "prefix": "Indices",
        "storage": [
          {
            "name": "Accounts",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Tuple:[U8; 32]U128Bool",
                "keys_id": 4,
                "value_id": 450
              }
            },
            "fallback": "0x00",
            "docs": [
              " The lookup from index to account."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0500",
            "name": "claim",
            "docs": [
              "Assign an previously unassigned index.",
              "",
              "Payment: `Deposit` is reserved from the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `index`: the index to be claimed. This must not be in use.",
              "",
              "Emits `IndexAssigned` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "AccountIndex"
              }
            ]
          },
          {
            "lookup": "0501",
            "name": "transfer",
            "docs": [
              "Assign an index already owned by the sender to another account. The balance reservation",
              "is effectively transferred to the new account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `index`: the index to be re-assigned. This must be owned by the sender.",
              "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
              "",
              "Emits `IndexAssigned` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ],
            "args": [
              {
                "name": "new",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "AccountIndex"
              }
            ]
          },
          {
            "lookup": "0502",
            "name": "free",
            "docs": [
              "Free up an index owned by the sender.",
              "",
              "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
              "",
              "- `index`: the index to be freed. This must be owned by the sender.",
              "",
              "Emits `IndexFreed` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "AccountIndex"
              }
            ]
          },
          {
            "lookup": "0503",
            "name": "force_transfer",
            "docs": [
              "Force an index to an account. This doesn't require a deposit. If the index is already",
              "held, then any deposit is reimbursed to its current owner.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `index`: the index to be (re-)assigned.",
              "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
              "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
              "",
              "Emits `IndexAssigned` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ],
            "args": [
              {
                "name": "new",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "AccountIndex"
              },
              {
                "name": "freeze",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "0504",
            "name": "freeze",
            "docs": [
              "Freeze an index so it will always point to the sender account. This consumes the",
              "deposit.",
              "",
              "The dispatch origin for this call must be _Signed_ and the signing account must have a",
              "non-frozen account `index`.",
              "",
              "- `index`: the index to be frozen in place.",
              "",
              "Emits `IndexFrozen` if successful.",
              "",
              "## Complexity",
              "- `O(1)`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "AccountIndex"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 158
        },
        "events": [
          {
            "lookup": "0500",
            "name": "IndexAssigned",
            "docs": [
              "A account index was assigned."
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "AccountIndex"
            ]
          },
          {
            "lookup": "0501",
            "name": "IndexFreed",
            "docs": [
              "A account index has been freed up (unassigned)."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "AccountIndex"
            ]
          },
          {
            "lookup": "0502",
            "name": "IndexFrozen",
            "docs": [
              "A account index has been frozen to its current account ID."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountIndex",
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 33
        },
        "constants": [
          {
            "name": "Deposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The deposit needed for reserving an index."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotAssigned",
            "doc": [
              "The index was not already assigned."
            ]
          },
          {
            "name": "NotOwner",
            "doc": [
              "The index is assigned to another account."
            ]
          },
          {
            "name": "InUse",
            "doc": [
              "The index was not available."
            ]
          },
          {
            "name": "NotTransfer",
            "doc": [
              "The source and destination accounts are identical."
            ]
          },
          {
            "name": "Permanent",
            "doc": [
              "The index is permanent and may not be freed/changed."
            ]
          }
        ],
        "errors_value": {
          "type": 451
        },
        "index": 5
      },
      {
        "name": "Balances",
        "prefix": "Balances",
        "storage": [
          {
            "name": "TotalIssuance",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The total units issued in the system."
            ]
          },
          {
            "name": "InactiveIssuance",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The total units of outstanding deactivated balance in the system."
            ]
          },
          {
            "name": "Account",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_balances:types:AccountData",
                "keys_id": 0,
                "value_id": 5
              }
            },
            "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
            "docs": [
              " The Balances pallet example of storing the balance of an account.",
              "",
              " # Example",
              "",
              " ```nocompile",
              "  impl pallet_balances::Config for Runtime {",
              "    type AccountStore = StorageMapShim\u003cSelf::Account\u003cRuntime\u003e, frame_system::Provider\u003cRuntime\u003e, AccountId, Self::AccountData\u003cBalance\u003e\u003e",
              "  }",
              " ```",
              "",
              " You can also store the balance of an account in the `System` pallet.",
              "",
              " # Example",
              "",
              " ```nocompile",
              "  impl pallet_balances::Config for Runtime {",
              "   type AccountStore = System",
              "  }",
              " ```",
              "",
              " But this comes with tradeoffs, storing account balances in the system pallet stores",
              " `frame_system` data alongside the account data contrary to storing account balances in the",
              " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
              " NOTE: This is only used in the case that this pallet is used to store balances."
            ]
          },
          {
            "name": "Locks",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cpallet_balances:types:BalanceLock\u003e",
                "keys_id": 0,
                "value_id": 452
              }
            },
            "fallback": "0x00",
            "docs": [
              " Any liquidity locks on some account balances.",
              " NOTE: Should only be accessed when setting, changing and freeing a lock."
            ]
          },
          {
            "name": "Reserves",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cpallet_balances:types:ReserveData\u003e",
                "keys_id": 0,
                "value_id": 456
              }
            },
            "fallback": "0x00",
            "docs": [
              " Named reserves on some account balances."
            ]
          },
          {
            "name": "Holds",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cpallet_balances:types:IdAmount@460\u003e",
                "keys_id": 0,
                "value_id": 459
              }
            },
            "fallback": "0x00",
            "docs": [
              " Holds on account balances."
            ]
          },
          {
            "name": "Freezes",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cpallet_balances:types:IdAmount@464\u003e",
                "keys_id": 0,
                "value_id": 463
              }
            },
            "fallback": "0x00",
            "docs": [
              " Freeze locks on account balances."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0600",
            "name": "transfer_allow_death",
            "docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0601",
            "name": "set_balance_deprecated",
            "docs": [
              "Set the regular balance of a given account; it also takes a reserved balance but this",
              "must be the same as the account's current reserved balance.",
              "",
              "The dispatch origin for this call is `root`.",
              "",
              "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "new_free",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              },
              {
                "name": "old_reserved",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0602",
            "name": "force_transfer",
            "docs": [
              "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
              "may be specified."
            ],
            "args": [
              {
                "name": "source",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0603",
            "name": "transfer_keep_alive",
            "docs": [
              "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
              "kill the origin account.",
              "",
              "99% of the time you want [`transfer_allow_death`] instead.",
              "",
              "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0604",
            "name": "transfer_all",
            "docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true)."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "keep_alive",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "0605",
            "name": "force_unreserve",
            "docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "U128",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0606",
            "name": "upgrade_accounts",
            "docs": [
              "Upgrade a specified account.",
              "",
              "- `origin`: Must be `Signed`.",
              "- `who`: The account to be upgraded.",
              "",
              "This will waive the transaction fee if at least all but 10% of the accounts needed to",
              "be upgraded. (We let some not have to be upgraded just in order to allow for the",
              "possibililty of churn)."
            ],
            "args": [
              {
                "name": "who",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "0607",
            "name": "transfer",
            "docs": [
              "Alias for `transfer_allow_death`, provided only for name-wise compatibility.",
              "",
              "WARNING: DEPRECATED! Will be released in approximately 3 months."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0608",
            "name": "force_set_balance",
            "docs": [
              "Set the regular balance of a given account.",
              "",
              "The dispatch origin for this call is `root`."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "new_free",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 161
        },
        "events": [
          {
            "lookup": "0600",
            "name": "Endowed",
            "docs": [
              "An account was created with some free balance."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0601",
            "name": "DustLost",
            "docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0602",
            "name": "Transfer",
            "docs": [
              "Transfer succeeded."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0603",
            "name": "BalanceSet",
            "docs": [
              "A balance was set by root."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0604",
            "name": "Reserved",
            "docs": [
              "Some balance was reserved (moved from free to reserved)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0605",
            "name": "Unreserved",
            "docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0606",
            "name": "ReserveRepatriated",
            "docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128",
              "frame_support:traits:tokens:misc:BalanceStatus"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "Balance",
              "Status"
            ]
          },
          {
            "lookup": "0607",
            "name": "Deposit",
            "docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0608",
            "name": "Withdraw",
            "docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0609",
            "name": "Slashed",
            "docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "060a",
            "name": "Minted",
            "docs": [
              "Some amount was minted into an account."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "060b",
            "name": "Burned",
            "docs": [
              "Some amount was burned from an account."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "060c",
            "name": "Suspended",
            "docs": [
              "Some amount was suspended from an account (it can be restored later)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "060d",
            "name": "Restored",
            "docs": [
              "Some amount was restored into an account."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "060e",
            "name": "Upgraded",
            "docs": [
              "An account was upgraded."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "060f",
            "name": "Issued",
            "docs": [
              "Total issuance was increased by `amount`, creating a credit to be balanced."
            ],
            "args": [
              "U128"
            ],
            "args_type_name": [
              "Balance"
            ]
          },
          {
            "lookup": "0610",
            "name": "Rescinded",
            "docs": [
              "Total issuance was decreased by `amount`, creating a debt to be balanced."
            ],
            "args": [
              "U128"
            ],
            "args_type_name": [
              "Balance"
            ]
          },
          {
            "lookup": "0611",
            "name": "Locked",
            "docs": [
              "Some balance was locked."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0612",
            "name": "Unlocked",
            "docs": [
              "Some balance was unlocked."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0613",
            "name": "Frozen",
            "docs": [
              "Some balance was frozen."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0614",
            "name": "Thawed",
            "docs": [
              "Some balance was thawed."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          }
        ],
        "events_value": {
          "type": 34
        },
        "constants": [
          {
            "name": "ExistentialDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "name": "MaxLocks",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "name": "MaxReserves",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          },
          {
            "name": "MaxHolds",
            "type": "U32",
            "type_value": 4,
            "constants_value": "01000000",
            "docs": [
              " The maximum number of holds that can exist on an account at any time."
            ]
          },
          {
            "name": "MaxFreezes",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00000000",
            "docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "errors": [
          {
            "name": "VestingBalance",
            "doc": [
              "Vesting balance too high to send value."
            ]
          },
          {
            "name": "LiquidityRestrictions",
            "doc": [
              "Account liquidity restrictions prevent withdrawal."
            ]
          },
          {
            "name": "InsufficientBalance",
            "doc": [
              "Balance too low to send value."
            ]
          },
          {
            "name": "ExistentialDeposit",
            "doc": [
              "Value too low to create account due to existential deposit."
            ]
          },
          {
            "name": "Expendability",
            "doc": [
              "Transfer/payment would kill account."
            ]
          },
          {
            "name": "ExistingVestingSchedule",
            "doc": [
              "A vesting schedule already exists for this account."
            ]
          },
          {
            "name": "DeadAccount",
            "doc": [
              "Beneficiary account must pre-exist."
            ]
          },
          {
            "name": "TooManyReserves",
            "doc": [
              "Number of named reserves exceed `MaxReserves`."
            ]
          },
          {
            "name": "TooManyHolds",
            "doc": [
              "Number of holds exceed `MaxHolds`."
            ]
          },
          {
            "name": "TooManyFreezes",
            "doc": [
              "Number of freezes exceed `MaxFreezes`."
            ]
          }
        ],
        "errors_value": {
          "type": 466
        },
        "index": 6
      },
      {
        "name": "TransactionPayment",
        "prefix": "TransactionPayment",
        "storage": [
          {
            "name": "NextFeeMultiplier",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 70
            },
            "fallback": "0x000064a7b3b6e00d0000000000000000",
            "docs": null
          },
          {
            "name": "StorageVersion",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_transaction_payment:Releases",
              "PlainTypeValue": 467
            },
            "fallback": "0x00",
            "docs": null
          }
        ],
        "events": [
          {
            "lookup": "0700",
            "name": "TransactionFeePaid",
            "docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 36
        },
        "constants": [
          {
            "name": "OperationalFeeMultiplier",
            "type": "U8",
            "type_value": 2,
            "constants_value": "05",
            "docs": [
              " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 7
      },
      {
        "name": "AssetTxPayment",
        "prefix": "",
        "storage": null,
        "events": [
          {
            "lookup": "0800",
            "name": "AssetTxFeePaid",
            "docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who` in an asset `asset_id`."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U128",
              "option\u003cU32\u003e"
            ],
            "args_type_name": [
              "AccountId",
              "AssetBalanceOf",
              "AssetBalanceOf",
              "Option\u003cChargeAssetIdOf\u003e"
            ]
          }
        ],
        "events_value": {
          "type": 37
        },
        "errors": null,
        "errors_value": null,
        "index": 8
      },
      {
        "name": "ElectionProviderMultiPhase",
        "prefix": "ElectionProviderMultiPhase",
        "storage": [
          {
            "name": "Round",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x01000000",
            "docs": [
              " Internal counter for the number of rounds.",
              "",
              " This is useful for de-duplication of transactions submitted to the pool, and general",
              " diagnostics of the pallet.",
              "",
              " This is merely incremented once per every time that an upstream `elect` is called."
            ]
          },
          {
            "name": "CurrentPhase",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_election_provider_multi_phase:Phase",
              "PlainTypeValue": 44
            },
            "fallback": "0x00",
            "docs": [
              " Current phase."
            ]
          },
          {
            "name": "QueuedSolution",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_election_provider_multi_phase:ReadySolution",
              "PlainTypeValue": 468
            },
            "fallback": "0x00",
            "docs": [
              " Current best solution, signed or unsigned, queued to be returned upon `elect`.",
              "",
              " Always sorted by score."
            ]
          },
          {
            "name": "Snapshot",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_election_provider_multi_phase:RoundSnapshot",
              "PlainTypeValue": 470
            },
            "fallback": "0x00",
            "docs": [
              " Snapshot data of the round.",
              "",
              " This is created at the beginning of the signed phase and cleared upon calling `elect`."
            ]
          },
          {
            "name": "DesiredTargets",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Desired number of targets to elect for this round.",
              "",
              " Only exists when [`Snapshot`] is present."
            ]
          },
          {
            "name": "SnapshotMetadata",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_election_provider_multi_phase:SolutionOrSnapshotSize",
              "PlainTypeValue": 215
            },
            "fallback": "0x00",
            "docs": [
              " The metadata of the [`RoundSnapshot`]",
              "",
              " Only exists when [`Snapshot`] is present."
            ]
          },
          {
            "name": "SignedSubmissionNextIndex",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The next index to be assigned to an incoming signed submission.",
              "",
              " Every accepted submission is assigned a unique index; that index is bound to that particular",
              " submission for the duration of the election. On election finalization, the next index is",
              " reset to 0.",
              "",
              " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
              " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
              " because iteration is slow. Instead, we store the value here."
            ]
          },
          {
            "name": "SignedSubmissionIndices",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:sp_npos_elections:ElectionScoreU32U32\u003e",
              "PlainTypeValue": 474
            },
            "fallback": "0x00",
            "docs": [
              " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
              " value in `SignedSubmissions`.",
              "",
              " We never need to process more than a single signed submission at a time. Signed submissions",
              " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
              " them one at a time instead of reading and decoding all of them at once."
            ]
          },
          {
            "name": "SignedSubmissionsMap",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_election_provider_multi_phase:signed:SignedSubmission",
                "keys_id": 4,
                "value_id": 477
              }
            },
            "fallback": "0x00",
            "docs": [
              " Unchecked, signed solutions.",
              "",
              " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
              " allowing us to keep only a single one in memory at a time.",
              "",
              " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
              " affect; we shouldn't need a cryptographically secure hasher."
            ]
          },
          {
            "name": "MinimumUntrustedScore",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "sp_npos_elections:ElectionScore",
              "PlainTypeValue": 43
            },
            "fallback": "0x00",
            "docs": [
              " The minimum score that each 'untrusted' solution must attain in order to be considered",
              " feasible.",
              "",
              " Can be set via `set_minimum_untrusted_score`."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0900",
            "name": "submit_unsigned",
            "docs": [
              "Submit a solution for the unsigned phase.",
              "",
              "The dispatch origin fo this call must be __none__.",
              "",
              "This submission is checked on the fly. Moreover, this unsigned solution is only",
              "validated when submitted to the pool from the **local** node. Effectively, this means",
              "that only active validators can submit this transaction when authoring a block (similar",
              "to an inherent).",
              "",
              "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
              "panic if the solution submitted by the validator is invalid in any way, effectively",
              "putting their authoring reward at risk.",
              "",
              "No deposit or reward is associated with this submission."
            ],
            "args": [
              {
                "name": "raw_solution",
                "type": "pallet_election_provider_multi_phase:RawSolution",
                "type_name": "Box\u003cRawSolution\u003cSolutionOf\u003cMinerConfig\u003e\u003e\u003e"
              },
              {
                "name": "witness",
                "type": "pallet_election_provider_multi_phase:SolutionOrSnapshotSize",
                "type_name": "SolutionOrSnapshotSize"
              }
            ]
          },
          {
            "lookup": "0901",
            "name": "set_minimum_untrusted_score",
            "docs": [
              "Set a new value for `MinimumUntrustedScore`.",
              "",
              "Dispatch origin must be aligned with `T::ForceOrigin`.",
              "",
              "This check can be turned off by setting the value to `None`."
            ],
            "args": [
              {
                "name": "maybe_next_score",
                "type": "option\u003csp_npos_elections:ElectionScore\u003e",
                "type_name": "Option\u003cElectionScore\u003e"
              }
            ]
          },
          {
            "lookup": "0902",
            "name": "set_emergency_election_result",
            "docs": [
              "Set a solution in the queue, to be handed out to the client of this pallet in the next",
              "call to `ElectionProvider::elect`.",
              "",
              "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
              "",
              "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
              "feasibility check itself can in principle cause the election process to fail (due to",
              "memory/weight constrains)."
            ],
            "args": [
              {
                "name": "supports",
                "type": "Vec\u003cTuple:[U8; 32]sp_npos_elections:Support\u003e",
                "type_name": "Supports\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "0903",
            "name": "submit",
            "docs": [
              "Submit a solution for the signed phase.",
              "",
              "The dispatch origin fo this call must be __signed__.",
              "",
              "The solution is potentially queued, based on the claimed score and processed at the end",
              "of the signed phase.",
              "",
              "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
              "might be rewarded, slashed, or get all or a part of the deposit back."
            ],
            "args": [
              {
                "name": "raw_solution",
                "type": "pallet_election_provider_multi_phase:RawSolution",
                "type_name": "Box\u003cRawSolution\u003cSolutionOf\u003cMinerConfig\u003e\u003e\u003e"
              }
            ]
          },
          {
            "lookup": "0904",
            "name": "governance_fallback",
            "docs": [
              "Trigger the governance fallback.",
              "",
              "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to",
              "calling [`Call::set_emergency_election_result`]."
            ],
            "args": [
              {
                "name": "maybe_max_voters",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cu32\u003e"
              },
              {
                "name": "maybe_max_targets",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cu32\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 162
        },
        "events": [
          {
            "lookup": "0900",
            "name": "SolutionStored",
            "docs": [
              "A solution was stored with the given compute.",
              "",
              "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
              "the stored solution was submited in the signed phase by a miner with the `AccountId`.",
              "Otherwise, the solution was stored either during the unsigned phase or by",
              "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
              "room for this one."
            ],
            "args": [
              "pallet_election_provider_multi_phase:ElectionCompute",
              "option\u003c[U8; 32]\u003e",
              "Bool"
            ],
            "args_type_name": [
              "ElectionCompute",
              "Option\u003cAccountId\u003e",
              "bool"
            ]
          },
          {
            "lookup": "0901",
            "name": "ElectionFinalized",
            "docs": [
              "The election has been finalized, with the given computation and score."
            ],
            "args": [
              "pallet_election_provider_multi_phase:ElectionCompute",
              "sp_npos_elections:ElectionScore"
            ],
            "args_type_name": [
              "ElectionCompute",
              "ElectionScore"
            ]
          },
          {
            "lookup": "0902",
            "name": "ElectionFailed",
            "docs": [
              "An election failed.",
              "",
              "Not much can be said about which computes failed in the process."
            ],
            "args": null
          },
          {
            "lookup": "0903",
            "name": "Rewarded",
            "docs": [
              "An account has been rewarded for their signed submission being finalized."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0904",
            "name": "Slashed",
            "docs": [
              "An account has been slashed for submitting an invalid signed submission."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0905",
            "name": "PhaseTransitioned",
            "docs": [
              "There was a phase transition in a given round."
            ],
            "args": [
              "pallet_election_provider_multi_phase:Phase",
              "pallet_election_provider_multi_phase:Phase",
              "U32"
            ],
            "args_type_name": [
              "Phase\u003cBlockNumber\u003e",
              "Phase\u003cBlockNumber\u003e",
              "u32"
            ]
          }
        ],
        "events_value": {
          "type": 39
        },
        "constants": [
          {
            "name": "UnsignedPhase",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " Duration of the unsigned phase."
            ]
          },
          {
            "name": "SignedPhase",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " Duration of the signed phase."
            ]
          },
          {
            "name": "BetterSignedThreshold",
            "type": "U32",
            "type_value": 47,
            "constants_value": "00000000",
            "docs": [
              " The minimum amount of improvement to the solution score that defines a solution as",
              " \"better\" in the Signed phase."
            ]
          },
          {
            "name": "BetterUnsignedThreshold",
            "type": "U32",
            "type_value": 47,
            "constants_value": "a0860100",
            "docs": [
              " The minimum amount of improvement to the solution score that defines a solution as",
              " \"better\" in the Unsigned phase."
            ]
          },
          {
            "name": "OffchainRepeat",
            "type": "U32",
            "type_value": 4,
            "constants_value": "05000000",
            "docs": [
              " The repeat threshold of the offchain worker.",
              "",
              " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
              " to submit the worker's solution."
            ]
          },
          {
            "name": "MinerTxPriority",
            "type": "U64",
            "type_value": 11,
            "constants_value": "feffffffffffff7f",
            "docs": [
              " The priority of the unsigned transaction submitted in the unsigned-phase"
            ]
          },
          {
            "name": "SignedMaxSubmissions",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " Maximum number of signed submissions that can be queued.",
              "",
              " It is best to avoid adjusting this during an election, as it impacts downstream data",
              " structures. In particular, `SignedSubmissionIndices\u003cT\u003e` is bounded on this value. If you",
              " update this value during an election, you _must_ ensure that",
              " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
              " attempts to submit new solutions may cause a runtime panic."
            ]
          },
          {
            "name": "SignedMaxWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "0bd08ce38f2e011366666666666666a6",
            "docs": [
              " Maximum weight of a signed solution.",
              "",
              " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
              " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
              " this value."
            ]
          },
          {
            "name": "SignedMaxRefunds",
            "type": "U32",
            "type_value": 4,
            "constants_value": "03000000",
            "docs": [
              " The maximum amount of unchecked solutions to refund the call fee for."
            ]
          },
          {
            "name": "SignedRewardBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " Base reward for a signed solution"
            ]
          },
          {
            "name": "SignedDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " Base deposit for a signed solution."
            ]
          },
          {
            "name": "SignedDepositByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0010a5d4e80000000000000000000000",
            "docs": [
              " Per-byte deposit for a signed solution."
            ]
          },
          {
            "name": "SignedDepositWeight",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00000000000000000000000000000000",
            "docs": [
              " Per-weight deposit for a signed solution."
            ]
          },
          {
            "name": "MaxElectingVoters",
            "type": "U32",
            "type_value": 4,
            "constants_value": "409c0000",
            "docs": [
              " The maximum number of electing voters to put in the snapshot. At the moment, snapshots",
              " are only over a single block, but once multi-block elections are introduced they will",
              " take place over multiple blocks."
            ]
          },
          {
            "name": "MaxElectableTargets",
            "type": "U16",
            "type_value": 96,
            "constants_value": "1027",
            "docs": [
              " The maximum number of electable targets to put in the snapshot."
            ]
          },
          {
            "name": "MaxWinners",
            "type": "U32",
            "type_value": 4,
            "constants_value": "e8030000",
            "docs": [
              " The maximum number of winners that can be elected by this `ElectionProvider`",
              " implementation.",
              "",
              " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
            ]
          },
          {
            "name": "MinerMaxLength",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00003600",
            "docs": null
          },
          {
            "name": "MinerMaxWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "0bd08ce38f2e011366666666666666a6",
            "docs": null
          },
          {
            "name": "MinerMaxVotesPerVoter",
            "type": "U32",
            "type_value": 4,
            "constants_value": "10000000",
            "docs": null
          },
          {
            "name": "MinerMaxWinners",
            "type": "U32",
            "type_value": 4,
            "constants_value": "e8030000",
            "docs": null
          }
        ],
        "errors": [
          {
            "name": "PreDispatchEarlySubmission",
            "doc": [
              "Submission was too early."
            ]
          },
          {
            "name": "PreDispatchWrongWinnerCount",
            "doc": [
              "Wrong number of winners presented."
            ]
          },
          {
            "name": "PreDispatchWeakSubmission",
            "doc": [
              "Submission was too weak, score-wise."
            ]
          },
          {
            "name": "SignedQueueFull",
            "doc": [
              "The queue was full, and the solution was not better than any of the existing ones."
            ]
          },
          {
            "name": "SignedCannotPayDeposit",
            "doc": [
              "The origin failed to pay the deposit."
            ]
          },
          {
            "name": "SignedInvalidWitness",
            "doc": [
              "Witness data to dispatchable is invalid."
            ]
          },
          {
            "name": "SignedTooMuchWeight",
            "doc": [
              "The signed submission consumes too much weight"
            ]
          },
          {
            "name": "OcwCallWrongEra",
            "doc": [
              "OCW submitted solution for wrong round"
            ]
          },
          {
            "name": "MissingSnapshotMetadata",
            "doc": [
              "Snapshot metadata should exist but didn't."
            ]
          },
          {
            "name": "InvalidSubmissionIndex",
            "doc": [
              "`Self::insert_submission` returned an invalid index."
            ]
          },
          {
            "name": "CallNotAllowed",
            "doc": [
              "The call is not allowed at this point."
            ]
          },
          {
            "name": "FallbackFailed",
            "doc": [
              "The fallback failed"
            ]
          },
          {
            "name": "BoundNotMet",
            "doc": [
              "Some bound not met"
            ]
          },
          {
            "name": "TooManyWinners",
            "doc": [
              "Submitted solution has too many winners"
            ]
          }
        ],
        "errors_value": {
          "type": 478
        },
        "index": 9
      },
      {
        "name": "Staking",
        "prefix": "Staking",
        "storage": [
          {
            "name": "ValidatorCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The ideal number of active validators."
            ]
          },
          {
            "name": "MinimumValidatorCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Minimum number of staking participants before emergency conditions are imposed."
            ]
          },
          {
            "name": "Invulnerables",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 86
            },
            "fallback": "0x00",
            "docs": [
              " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
              " easy to initialize and the performance hit is minimal (we expect no more than four",
              " invulnerables) and restricted to testnets."
            ]
          },
          {
            "name": "Bonded",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "[U8; 32]",
                "keys_id": 0,
                "value_id": 0
              }
            },
            "fallback": "0x00",
            "docs": [
              " Map from all locked \"stash\" accounts to the controller account.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "MinNominatorBond",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The minimum active bond to become and maintain the role of a nominator."
            ]
          },
          {
            "name": "MinValidatorBond",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The minimum active bond to become and maintain the role of a validator."
            ]
          },
          {
            "name": "MinimumActiveStake",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The minimum active nominator stake of the last successful election."
            ]
          },
          {
            "name": "MinCommission",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 47
            },
            "fallback": "0x00000000",
            "docs": [
              " The minimum amount of commission that validators can set.",
              "",
              " If set to `0`, no limit exists."
            ]
          },
          {
            "name": "Ledger",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_staking:StakingLedger",
                "keys_id": 0,
                "value_id": 479
              }
            },
            "fallback": "0x00",
            "docs": [
              " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
            ]
          },
          {
            "name": "Payee",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_staking:RewardDestination",
                "keys_id": 0,
                "value_id": 221
              }
            },
            "fallback": "0x00",
            "docs": [
              " Where the reward payment should be made. Keyed by stash.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "Validators",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_staking:ValidatorPrefs",
                "keys_id": 0,
                "value_id": 48
              }
            },
            "fallback": "0x0000",
            "docs": [
              " The map from (wannabe) validator stash key to the preferences of that validator.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "CounterForValidators",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "MaxValidatorsCount",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " The maximum validator count before we stop allowing new validators to join.",
              "",
              " When this value is not set, no limits are enforced."
            ]
          },
          {
            "name": "Nominators",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_staking:Nominations",
                "keys_id": 0,
                "value_id": 484
              }
            },
            "fallback": "0x00",
            "docs": [
              " The map from nominator stash key to their nomination preferences, namely the validators that",
              " they wish to support.",
              "",
              " Note that the keys of this storage map might become non-decodable in case the",
              " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators",
              " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
              " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
              " nominators will effectively not-exist, until they re-submit their preferences such that it",
              " is within the bounds of the newly set `Config::MaxNominations`.",
              "",
              " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
              " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
              " number of keys that exist.",
              "",
              " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
              " [`Call::chill_other`] dispatchable by anyone.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "CounterForNominators",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "MaxNominatorsCount",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " The maximum nominator count before we stop allowing new validators to join.",
              "",
              " When this value is not set, no limits are enforced."
            ]
          },
          {
            "name": "CurrentEra",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " The current era index.",
              "",
              " This is the latest planned era, depending on how the Session pallet queues the validator",
              " set, it might be active or not."
            ]
          },
          {
            "name": "ActiveEra",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_staking:ActiveEraInfo",
              "PlainTypeValue": 485
            },
            "fallback": "0x00",
            "docs": [
              " The active era information, it holds index and start.",
              "",
              " The active era is the era being currently rewarded. Validator set of this era must be",
              " equal to [`SessionInterface::validators`]."
            ]
          },
          {
            "name": "ErasStartSessionIndex",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
              "",
              " Note: This tracks the starting session (i.e. session index when era start being active)",
              " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
            ]
          },
          {
            "name": "ErasStakers",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_staking:Exposure",
                "keys_id": 487,
                "value_id": 78
              }
            },
            "fallback": "0x000000",
            "docs": [
              " Exposure of validator at era.",
              "",
              " This is keyed first by the era index to allow bulk deletion and then the stash account.",
              "",
              " Is it removed after `HISTORY_DEPTH` eras.",
              " If stakers hasn't been set or has been removed then empty exposure is returned."
            ]
          },
          {
            "name": "ErasStakersClipped",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_staking:Exposure",
                "keys_id": 487,
                "value_id": 78
              }
            },
            "fallback": "0x000000",
            "docs": [
              " Clipped Exposure of validator at era.",
              "",
              " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
              " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
              " (Note: the field `total` and `own` of the exposure remains unchanged).",
              " This is used to limit the i/o cost for the nominator payout.",
              "",
              " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
              "",
              " Is it removed after `HISTORY_DEPTH` eras.",
              " If stakers hasn't been set or has been removed then empty exposure is returned."
            ]
          },
          {
            "name": "ErasValidatorPrefs",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_staking:ValidatorPrefs",
                "keys_id": 487,
                "value_id": 48
              }
            },
            "fallback": "0x0000",
            "docs": [
              " Similar to `ErasStakers`, this holds the preferences of validators.",
              "",
              " This is keyed first by the era index to allow bulk deletion and then the stash account.",
              "",
              " Is it removed after `HISTORY_DEPTH` eras."
            ]
          },
          {
            "name": "ErasValidatorReward",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U128",
                "keys_id": 4,
                "value_id": 6
              }
            },
            "fallback": "0x00",
            "docs": [
              " The total validator era payout for the last `HISTORY_DEPTH` eras.",
              "",
              " Eras that haven't finished yet or has been removed doesn't have reward."
            ]
          },
          {
            "name": "ErasRewardPoints",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_staking:EraRewardPoints",
                "keys_id": 4,
                "value_id": 488
              }
            },
            "fallback": "0x0000000000",
            "docs": [
              " Rewards for the last `HISTORY_DEPTH` eras.",
              " If reward hasn't been set or has been removed then 0 reward is returned."
            ]
          },
          {
            "name": "ErasTotalStake",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U128",
                "keys_id": 4,
                "value_id": 6
              }
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The total amount staked for the last `HISTORY_DEPTH` eras.",
              " If total hasn't been set or has been removed then 0 stake is returned."
            ]
          },
          {
            "name": "ForceEra",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_staking:Forcing",
              "PlainTypeValue": 50
            },
            "fallback": "0x00",
            "docs": [
              " Mode of era forcing."
            ]
          },
          {
            "name": "SlashRewardFraction",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 47
            },
            "fallback": "0x00000000",
            "docs": [
              " The percentage of the slash that is distributed to reporters.",
              "",
              " The rest of the slashed value is handled by the `Slash`."
            ]
          },
          {
            "name": "CanceledSlashPayout",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The amount of currency given to reporters of a slash event which was",
              " canceled by extraordinary circumstances (e.g. governance)."
            ]
          },
          {
            "name": "UnappliedSlashes",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cpallet_staking:UnappliedSlash\u003e",
                "keys_id": 4,
                "value_id": 492
              }
            },
            "fallback": "0x00",
            "docs": [
              " All unapplied slashes that are queued for later."
            ]
          },
          {
            "name": "BondedEras",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U32U32\u003e",
              "PlainTypeValue": 419
            },
            "fallback": "0x00",
            "docs": [
              " A mapping from still-bonded eras to the first session index of that era.",
              "",
              " Must contains information for eras for the range:",
              " `[active_era - bounding_duration; active_era]`"
            ]
          },
          {
            "name": "ValidatorSlashInEra",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "Tuple:U32U128",
                "keys_id": 487,
                "value_id": 494
              }
            },
            "fallback": "0x00",
            "docs": [
              " All slashing events on validators, mapped by era to the highest slash proportion",
              " and slash value of the era."
            ]
          },
          {
            "name": "NominatorSlashInEra",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "U128",
                "keys_id": 487,
                "value_id": 6
              }
            },
            "fallback": "0x00",
            "docs": [
              " All slashing events on nominators, mapped by era to the highest slash value of the era."
            ]
          },
          {
            "name": "SlashingSpans",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_staking:slashing:SlashingSpans",
                "keys_id": 0,
                "value_id": 495
              }
            },
            "fallback": "0x00",
            "docs": [
              " Slashing spans for stash accounts."
            ]
          },
          {
            "name": "SpanSlash",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U32"
                ],
                "value": "pallet_staking:slashing:SpanRecord",
                "keys_id": 491,
                "value_id": 496
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Records information about the maximum slash of a stash within a slashing span,",
              " as well as how much reward has been paid out."
            ]
          },
          {
            "name": "CurrentPlannedSession",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The last planned session scheduled by the session pallet.",
              "",
              " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
            ]
          },
          {
            "name": "OffendingValidators",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U32Bool\u003e",
              "PlainTypeValue": 497
            },
            "fallback": "0x00",
            "docs": [
              " Indices of validators that have offended in the active era and whether they are currently",
              " disabled.",
              "",
              " This value should be a superset of disabled validators since not all offences lead to the",
              " validator being disabled (if there was no slash). This is needed to track the percentage of",
              " validators that have offended in the current era, ensuring a new era is forced if",
              " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
              " whether a given validator has previously offended using binary search. It gets cleared when",
              " the era ends."
            ]
          },
          {
            "name": "ChillThreshold",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U8",
              "PlainTypeValue": 223
            },
            "fallback": "0x00",
            "docs": [
              " The threshold for when users can start calling `chill_other` for other validators /",
              " nominators. The threshold is compared to the actual number of validators / nominators",
              " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0a00",
            "name": "bond",
            "docs": [
              "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
              "be the account that controls it.",
              "",
              "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
              "",
              "The dispatch origin for this call must be _Signed_ by the stash account.",
              "",
              "Emits `Bonded`.",
              "## Complexity",
              "- Independent of the arguments. Moderate complexity.",
              "- O(1).",
              "- Three extra DB entries.",
              "",
              "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
              "unless the `origin` falls below _existential deposit_ and gets removed as dust."
            ],
            "args": [
              {
                "name": "controller",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "payee",
                "type": "pallet_staking:RewardDestination",
                "type_name": "RewardDestination\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "0a01",
            "name": "bond_extra",
            "docs": [
              "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
              "for staking.",
              "",
              "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
              "",
              "Use this if there are additional funds in your stash account that you wish to bond.",
              "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
              "any limitation on the amount that can be added.",
              "",
              "Emits `Bonded`.",
              "",
              "## Complexity",
              "- Independent of the arguments. Insignificant complexity.",
              "- O(1)."
            ],
            "args": [
              {
                "name": "max_additional",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "0a02",
            "name": "unbond",
            "docs": [
              "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
              "period ends. If this leaves an amount actively bonded less than",
              "T::Currency::minimum_balance(), then it is increased to the full amount.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
              "",
              "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
              "the funds out of management ready for transfer.",
              "",
              "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)",
              "can co-exists at the same time. If there are no unlocking chunks slots available",
              "[`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).",
              "",
              "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
              "they should call `chill` first in order to free up their bonded funds.",
              "",
              "Emits `Unbonded`.",
              "",
              "See also [`Call::withdraw_unbonded`]."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "0a03",
            "name": "withdraw_unbonded",
            "docs": [
              "Remove any unlocked chunks from the `unlocking` queue from our management.",
              "",
              "This essentially frees up that balance to be used by the stash account to do",
              "whatever it wants.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller.",
              "",
              "Emits `Withdrawn`.",
              "",
              "See also [`Call::unbond`].",
              "",
              "## Complexity",
              "O(S) where S is the number of slashing spans to remove",
              "NOTE: Weight annotation is the kill scenario, we refund otherwise."
            ],
            "args": [
              {
                "name": "num_slashing_spans",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0a04",
            "name": "validate",
            "docs": [
              "Declare the desire to validate for the origin controller.",
              "",
              "Effects will be felt at the beginning of the next era.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
            ],
            "args": [
              {
                "name": "prefs",
                "type": "pallet_staking:ValidatorPrefs",
                "type_name": "ValidatorPrefs"
              }
            ]
          },
          {
            "lookup": "0a05",
            "name": "nominate",
            "docs": [
              "Declare the desire to nominate `targets` for the origin controller.",
              "",
              "Effects will be felt at the beginning of the next era.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
              "",
              "## Complexity",
              "- The transaction's complexity is proportional to the size of `targets` (N)",
              "which is capped at CompactAssignments::LIMIT (T::MaxNominations).",
              "- Both the reads and writes follow a similar pattern."
            ],
            "args": [
              {
                "name": "targets",
                "type": "Vec\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Vec\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "0a06",
            "name": "chill",
            "docs": [
              "Declare no desire to either validate or nominate.",
              "",
              "Effects will be felt at the beginning of the next era.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
              "",
              "## Complexity",
              "- Independent of the arguments. Insignificant complexity.",
              "- Contains one read.",
              "- Writes are limited to the `origin` account key."
            ],
            "args": null
          },
          {
            "lookup": "0a07",
            "name": "set_payee",
            "docs": [
              "(Re-)set the payment target for a controller.",
              "",
              "Effects will be felt instantly (as soon as this function is completed successfully).",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
              "",
              "## Complexity",
              "- O(1)",
              "- Independent of the arguments. Insignificant complexity.",
              "- Contains a limited number of reads.",
              "- Writes are limited to the `origin` account key.",
              "---------"
            ],
            "args": [
              {
                "name": "payee",
                "type": "pallet_staking:RewardDestination",
                "type_name": "RewardDestination\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "0a08",
            "name": "set_controller",
            "docs": [
              "(Re-)set the controller of a stash.",
              "",
              "Effects will be felt instantly (as soon as this function is completed successfully).",
              "",
              "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
              "",
              "## Complexity",
              "O(1)",
              "- Independent of the arguments. Insignificant complexity.",
              "- Contains a limited number of reads.",
              "- Writes are limited to the `origin` account key."
            ],
            "args": [
              {
                "name": "controller",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "0a09",
            "name": "set_validator_count",
            "docs": [
              "Sets the ideal number of validators.",
              "",
              "The dispatch origin must be Root.",
              "",
              "## Complexity",
              "O(1)"
            ],
            "args": [
              {
                "name": "new",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0a0a",
            "name": "increase_validator_count",
            "docs": [
              "Increments the ideal number of validators upto maximum of",
              "`ElectionProviderBase::MaxWinners`.",
              "",
              "The dispatch origin must be Root.",
              "",
              "## Complexity",
              "Same as [`Self::set_validator_count`]."
            ],
            "args": [
              {
                "name": "additional",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0a0b",
            "name": "scale_validator_count",
            "docs": [
              "Scale up the ideal number of validators by a factor upto maximum of",
              "`ElectionProviderBase::MaxWinners`.",
              "",
              "The dispatch origin must be Root.",
              "",
              "## Complexity",
              "Same as [`Self::set_validator_count`]."
            ],
            "args": [
              {
                "name": "factor",
                "type": "U8",
                "type_name": "Percent"
              }
            ]
          },
          {
            "lookup": "0a0c",
            "name": "force_no_eras",
            "docs": [
              "Force there to be no new eras indefinitely.",
              "",
              "The dispatch origin must be Root.",
              "",
              "# Warning",
              "",
              "The election process starts multiple blocks before the end of the era.",
              "Thus the election process may be ongoing when this is called. In this case the",
              "election will continue until the next era is triggered.",
              "",
              "## Complexity",
              "- No arguments.",
              "- Weight: O(1)"
            ],
            "args": null
          },
          {
            "lookup": "0a0d",
            "name": "force_new_era",
            "docs": [
              "Force there to be a new era at the end of the next session. After this, it will be",
              "reset to normal (non-forced) behaviour.",
              "",
              "The dispatch origin must be Root.",
              "",
              "# Warning",
              "",
              "The election process starts multiple blocks before the end of the era.",
              "If this is called just before a new era is triggered, the election process may not",
              "have enough blocks to get a result.",
              "",
              "## Complexity",
              "- No arguments.",
              "- Weight: O(1)"
            ],
            "args": null
          },
          {
            "lookup": "0a0e",
            "name": "set_invulnerables",
            "docs": [
              "Set the validators who cannot be slashed (if any).",
              "",
              "The dispatch origin must be Root."
            ],
            "args": [
              {
                "name": "invulnerables",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "0a0f",
            "name": "force_unstake",
            "docs": [
              "Force a current staker to become completely unstaked, immediately.",
              "",
              "The dispatch origin must be Root."
            ],
            "args": [
              {
                "name": "stash",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "num_slashing_spans",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0a10",
            "name": "force_new_era_always",
            "docs": [
              "Force there to be a new era at the end of sessions indefinitely.",
              "",
              "The dispatch origin must be Root.",
              "",
              "# Warning",
              "",
              "The election process starts multiple blocks before the end of the era.",
              "If this is called just before a new era is triggered, the election process may not",
              "have enough blocks to get a result."
            ],
            "args": null
          },
          {
            "lookup": "0a11",
            "name": "cancel_deferred_slash",
            "docs": [
              "Cancel enactment of a deferred slash.",
              "",
              "Can be called by the `T::AdminOrigin`.",
              "",
              "Parameters: era and indices of the slashes for that era to kill."
            ],
            "args": [
              {
                "name": "era",
                "type": "U32",
                "type_name": "EraIndex"
              },
              {
                "name": "slash_indices",
                "type": "Vec\u003cU32\u003e",
                "type_name": "Vec\u003cu32\u003e"
              }
            ]
          },
          {
            "lookup": "0a12",
            "name": "payout_stakers",
            "docs": [
              "Pay out all the stakers behind a single validator for a single era.",
              "",
              "- `validator_stash` is the stash account of the validator. Their nominators, up to",
              "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
              "- `era` may be any era between `[current_era - history_depth; current_era]`.",
              "",
              "The origin of this call must be _Signed_. Any account can call this function, even if",
              "it is not one of the stakers.",
              "",
              "## Complexity",
              "- At most O(MaxNominatorRewardedPerValidator)."
            ],
            "args": [
              {
                "name": "validator_stash",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "era",
                "type": "U32",
                "type_name": "EraIndex"
              }
            ]
          },
          {
            "lookup": "0a13",
            "name": "rebond",
            "docs": [
              "Rebond a portion of the stash scheduled to be unlocked.",
              "",
              "The dispatch origin must be signed by the controller.",
              "",
              "## Complexity",
              "- Time complexity: O(L), where L is unlocking chunks",
              "- Bounded by `MaxUnlockingChunks`."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "0a14",
            "name": "reap_stash",
            "docs": [
              "Remove all data structures concerning a staker/stash once it is at a state where it can",
              "be considered `dust` in the staking system. The requirements are:",
              "",
              "1. the `total_balance` of the stash is below existential deposit.",
              "2. or, the `ledger.total` of the stash is below existential deposit.",
              "",
              "The former can happen in cases like a slash; the latter when a fully unbonded account",
              "is still receiving staking rewards in `RewardDestination::Staked`.",
              "",
              "It can be called by anyone, as long as `stash` meets the above requirements.",
              "",
              "Refunds the transaction fees upon successful execution."
            ],
            "args": [
              {
                "name": "stash",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "num_slashing_spans",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0a15",
            "name": "kick",
            "docs": [
              "Remove the given nominations from the calling validator.",
              "",
              "Effects will be felt at the beginning of the next era.",
              "",
              "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
              "",
              "- `who`: A list of nominator stash accounts who are nominating this validator which",
              "  should no longer be nominating this validator.",
              "",
              "Note: Making this call only makes sense if you first set the validator preferences to",
              "block any further nominations."
            ],
            "args": [
              {
                "name": "who",
                "type": "Vec\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Vec\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "0a16",
            "name": "set_staking_configs",
            "docs": [
              "Update the various staking configurations .",
              "",
              "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
              "* `min_validator_bond`: The minimum active bond needed to be a validator.",
              "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
              "  set to `None`, no limit is enforced.",
              "* `max_validator_count`: The max number of users who can be a validator at once. When",
              "  set to `None`, no limit is enforced.",
              "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
              "  should be filled in order for the `chill_other` transaction to work.",
              "* `min_commission`: The minimum amount of commission that each validators must maintain.",
              "  This is checked only upon calling `validate`. Existing validators are not affected.",
              "",
              "RuntimeOrigin must be Root to call this function.",
              "",
              "NOTE: Existing nominators and validators will not be affected by this update.",
              "to kick people under the new limits, `chill_other` should be called."
            ],
            "args": [
              {
                "name": "min_nominator_bond",
                "type": "pallet_staking:pallet:pallet:ConfigOp@224",
                "type_name": "ConfigOp\u003cBalanceOf\u003e"
              },
              {
                "name": "min_validator_bond",
                "type": "pallet_staking:pallet:pallet:ConfigOp@224",
                "type_name": "ConfigOp\u003cBalanceOf\u003e"
              },
              {
                "name": "max_nominator_count",
                "type": "pallet_staking:pallet:pallet:ConfigOp@225",
                "type_name": "ConfigOp\u003cu32\u003e"
              },
              {
                "name": "max_validator_count",
                "type": "pallet_staking:pallet:pallet:ConfigOp@225",
                "type_name": "ConfigOp\u003cu32\u003e"
              },
              {
                "name": "chill_threshold",
                "type": "pallet_staking:pallet:pallet:ConfigOp@226",
                "type_name": "ConfigOp\u003cPercent\u003e"
              },
              {
                "name": "min_commission",
                "type": "pallet_staking:pallet:pallet:ConfigOp@227",
                "type_name": "ConfigOp\u003cPerbill\u003e"
              }
            ]
          },
          {
            "lookup": "0a17",
            "name": "chill_other",
            "docs": [
              "Declare a `controller` to stop participating as either a validator or nominator.",
              "",
              "Effects will be felt at the beginning of the next era.",
              "",
              "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
              "",
              "If the caller is the same as the controller being targeted, then no further checks are",
              "enforced, and this function behaves just like `chill`.",
              "",
              "If the caller is different than the controller being targeted, the following conditions",
              "must be met:",
              "",
              "* `controller` must belong to a nominator who has become non-decodable,",
              "",
              "Or:",
              "",
              "* A `ChillThreshold` must be set and checked which defines how close to the max",
              "  nominators or validators we must reach before users can start chilling one-another.",
              "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
              "  how close we are to the threshold.",
              "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
              "  if this is a person that should be chilled because they have not met the threshold",
              "  bond required.",
              "",
              "This can be helpful if bond requirements are updated, and we need to remove old users",
              "who do not satisfy these requirements."
            ],
            "args": [
              {
                "name": "controller",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "0a18",
            "name": "force_apply_min_commission",
            "docs": [
              "Force a validator to have at least the minimum commission. This will not affect a",
              "validator who already has a commission greater than or equal to the minimum. Any account",
              "can call this."
            ],
            "args": [
              {
                "name": "validator_stash",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "0a19",
            "name": "set_min_commission",
            "docs": [
              "Sets the minimum amount of commission that each validators must maintain.",
              "",
              "This call has lower privilege requirements than `set_staking_config` and can be called",
              "by the `T::AdminOrigin`. Root can always call this."
            ],
            "args": [
              {
                "name": "new",
                "type": "U32",
                "type_name": "Perbill"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 220
        },
        "events": [
          {
            "lookup": "0a00",
            "name": "EraPaid",
            "docs": [
              "The era payout has been set; the first balance is the validator-payout; the second is",
              "the remainder from the maximum amount of reward."
            ],
            "args": [
              "U32",
              "U128",
              "U128"
            ],
            "args_type_name": [
              "EraIndex",
              "BalanceOf",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0a01",
            "name": "Rewarded",
            "docs": [
              "The nominator has been rewarded by this amount."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0a02",
            "name": "Slashed",
            "docs": [
              "A staker (validator or nominator) has been slashed by the given amount."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0a03",
            "name": "SlashReported",
            "docs": [
              "A slash for the given validator, for the given percentage of their stake, at the given",
              "era as been reported."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "Perbill",
              "EraIndex"
            ]
          },
          {
            "lookup": "0a04",
            "name": "OldSlashingReportDiscarded",
            "docs": [
              "An old slashing report from a prior era was discarded because it could",
              "not be processed."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "SessionIndex"
            ]
          },
          {
            "lookup": "0a05",
            "name": "StakersElected",
            "docs": [
              "A new set of stakers was elected."
            ],
            "args": null
          },
          {
            "lookup": "0a06",
            "name": "Bonded",
            "docs": [
              "An account has bonded this amount. \\[stash, amount\\]",
              "",
              "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
              "it will not be emitted for staking rewards when they are added to stake."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0a07",
            "name": "Unbonded",
            "docs": [
              "An account has unbonded this amount."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0a08",
            "name": "Withdrawn",
            "docs": [
              "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
              "from the unlocking queue."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0a09",
            "name": "Kicked",
            "docs": [
              "A nominator has been kicked from a validator."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "0a0a",
            "name": "StakingElectionFailed",
            "docs": [
              "The election failed. No new era is planned."
            ],
            "args": null
          },
          {
            "lookup": "0a0b",
            "name": "Chilled",
            "docs": [
              "An account has stopped participating as either a validator or nominator."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "0a0c",
            "name": "PayoutStarted",
            "docs": [
              "The stakers' rewards are getting paid."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "EraIndex",
              "AccountId"
            ]
          },
          {
            "lookup": "0a0d",
            "name": "ValidatorPrefsSet",
            "docs": [
              "A validator has set their preferences."
            ],
            "args": [
              "[U8; 32]",
              "pallet_staking:ValidatorPrefs"
            ],
            "args_type_name": [
              "AccountId",
              "ValidatorPrefs"
            ]
          },
          {
            "lookup": "0a0e",
            "name": "ForceEra",
            "docs": [
              "A new force era mode was set."
            ],
            "args": [
              "pallet_staking:Forcing"
            ],
            "args_type_name": [
              "Forcing"
            ]
          }
        ],
        "events_value": {
          "type": 46
        },
        "constants": [
          {
            "name": "MaxNominations",
            "type": "U32",
            "type_value": 4,
            "constants_value": "10000000",
            "docs": [
              " Maximum number of nominations per nominator."
            ]
          },
          {
            "name": "HistoryDepth",
            "type": "U32",
            "type_value": 4,
            "constants_value": "54000000",
            "docs": [
              " Number of eras to keep in history.",
              "",
              " Following information is kept for eras in `[current_era -",
              " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
              " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
              " `ErasTotalStake`, `ErasStartSessionIndex`,",
              " `StakingLedger.claimed_rewards`.",
              "",
              " Must be more than the number of eras delayed by session.",
              " I.e. active era must always be in history. I.e. `active_era \u003e",
              " current_era - history_depth` must be guaranteed.",
              "",
              " If migrating an existing pallet from storage value to config value,",
              " this should be set to same value or greater as in storage.",
              "",
              " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
              " item `StakingLedger.claimed_rewards`. Setting this value lower than",
              " the existing value can lead to inconsistencies in the",
              " `StakingLedger` and will need to be handled properly in a migration.",
              " The test `reducing_history_depth_abrupt` shows this effect."
            ]
          },
          {
            "name": "SessionsPerEra",
            "type": "U32",
            "type_value": 4,
            "constants_value": "06000000",
            "docs": [
              " Number of sessions per era."
            ]
          },
          {
            "name": "BondingDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "a0020000",
            "docs": [
              " Number of eras that staked funds must remain bonded for."
            ]
          },
          {
            "name": "SlashDeferDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "a8000000",
            "docs": [
              " Number of eras that slashes are deferred by, after computation.",
              "",
              " This should be less than the bonding duration. Set to 0 if slashes",
              " should be applied immediately, without opportunity for intervention."
            ]
          },
          {
            "name": "MaxNominatorRewardedPerValidator",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00010000",
            "docs": [
              " The maximum number of nominators rewarded for each validator.",
              "",
              " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
              " claim their reward. This used to limit the i/o cost for the nominator payout."
            ]
          },
          {
            "name": "MaxUnlockingChunks",
            "type": "U32",
            "type_value": 4,
            "constants_value": "20000000",
            "docs": [
              " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
              " have. Effectively determines how many unique eras a staker may be",
              " unbonding in.",
              "",
              " Note: `MaxUnlockingChunks` is used as the upper bound for the",
              " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
              " lower than the existing value can lead to inconsistencies in the",
              " `StakingLedger` and will need to be handled properly in a runtime",
              " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
              " this effect."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotController",
            "doc": [
              "Not a controller account."
            ]
          },
          {
            "name": "NotStash",
            "doc": [
              "Not a stash account."
            ]
          },
          {
            "name": "AlreadyBonded",
            "doc": [
              "Stash is already bonded."
            ]
          },
          {
            "name": "AlreadyPaired",
            "doc": [
              "Controller is already paired."
            ]
          },
          {
            "name": "EmptyTargets",
            "doc": [
              "Targets cannot be empty."
            ]
          },
          {
            "name": "DuplicateIndex",
            "doc": [
              "Duplicate index."
            ]
          },
          {
            "name": "InvalidSlashIndex",
            "doc": [
              "Slash record index out of bounds."
            ]
          },
          {
            "name": "InsufficientBond",
            "doc": [
              "Cannot have a validator or nominator role, with value less than the minimum defined by",
              "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
              "intention, `chill` first to remove one's role as validator/nominator."
            ]
          },
          {
            "name": "NoMoreChunks",
            "doc": [
              "Can not schedule more unlock chunks."
            ]
          },
          {
            "name": "NoUnlockChunk",
            "doc": [
              "Can not rebond without unlocking chunks."
            ]
          },
          {
            "name": "FundedTarget",
            "doc": [
              "Attempting to target a stash that still has funds."
            ]
          },
          {
            "name": "InvalidEraToReward",
            "doc": [
              "Invalid era to reward."
            ]
          },
          {
            "name": "InvalidNumberOfNominations",
            "doc": [
              "Invalid number of nominations."
            ]
          },
          {
            "name": "NotSortedAndUnique",
            "doc": [
              "Items are not sorted and unique."
            ]
          },
          {
            "name": "AlreadyClaimed",
            "doc": [
              "Rewards for this era have already been claimed for this validator."
            ]
          },
          {
            "name": "IncorrectHistoryDepth",
            "doc": [
              "Incorrect previous history depth input provided."
            ]
          },
          {
            "name": "IncorrectSlashingSpans",
            "doc": [
              "Incorrect number of slashing spans provided."
            ]
          },
          {
            "name": "BadState",
            "doc": [
              "Internal state has become somehow corrupted and the operation cannot continue."
            ]
          },
          {
            "name": "TooManyTargets",
            "doc": [
              "Too many nomination targets supplied."
            ]
          },
          {
            "name": "BadTarget",
            "doc": [
              "A nomination target was supplied that was blocked or otherwise not a validator."
            ]
          },
          {
            "name": "CannotChillOther",
            "doc": [
              "The user has enough bond and thus cannot be chilled forcefully by an external person."
            ]
          },
          {
            "name": "TooManyNominators",
            "doc": [
              "There are too many nominators in the system. Governance needs to adjust the staking",
              "settings to keep things safe for the runtime."
            ]
          },
          {
            "name": "TooManyValidators",
            "doc": [
              "There are too many validator candidates in the system. Governance needs to adjust the",
              "staking settings to keep things safe for the runtime."
            ]
          },
          {
            "name": "CommissionTooLow",
            "doc": [
              "Commission is too low. Must be at least `MinCommission`."
            ]
          },
          {
            "name": "BoundNotMet",
            "doc": [
              "Some bound is not met."
            ]
          }
        ],
        "errors_value": {
          "type": 499
        },
        "index": 10
      },
      {
        "name": "Session",
        "prefix": "Session",
        "storage": [
          {
            "name": "Validators",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 86
            },
            "fallback": "0x00",
            "docs": [
              " The current set of validators."
            ]
          },
          {
            "name": "CurrentIndex",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Current index of the session."
            ]
          },
          {
            "name": "QueuedChanged",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 42
            },
            "fallback": "0x00",
            "docs": [
              " True if the underlying economic identities or weighting behind the validators",
              " has changed in the queued validator set."
            ]
          },
          {
            "name": "QueuedKeys",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:[U8; 32]kitchensink_runtime:SessionKeys\u003e",
              "PlainTypeValue": 500
            },
            "fallback": "0x00",
            "docs": [
              " The queued keys for the next session. When the next session begins, these keys",
              " will be used to determine the validator's session keys."
            ]
          },
          {
            "name": "DisabledValidators",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU32\u003e",
              "PlainTypeValue": 108
            },
            "fallback": "0x00",
            "docs": [
              " Indices of disabled validators.",
              "",
              " The vec is always kept sorted so that we can find whether a given validator is",
              " disabled using binary search. It gets cleared when `on_session_ending` returns",
              " a new set of identities."
            ]
          },
          {
            "name": "NextKeys",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "kitchensink_runtime:SessionKeys",
                "keys_id": 0,
                "value_id": 229
              }
            },
            "fallback": "0x00",
            "docs": [
              " The next session keys for a validator."
            ]
          },
          {
            "name": "KeyOwner",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 4]",
                  "Vec\u003cU8\u003e"
                ],
                "value": "[U8; 32]",
                "keys_id": 502,
                "value_id": 0
              }
            },
            "fallback": "0x00",
            "docs": [
              " The owner of a key. The key is the `KeyTypeId` + the encoded key."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0b00",
            "name": "set_keys",
            "docs": [
              "Sets the session key(s) of the function caller to `keys`.",
              "Allows an account to set its session key prior to becoming a validator.",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be signed.",
              "",
              "## Complexity",
              "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
              "  fixed."
            ],
            "args": [
              {
                "name": "keys",
                "type": "kitchensink_runtime:SessionKeys",
                "type_name": "Keys"
              },
              {
                "name": "proof",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "0b01",
            "name": "purge_keys",
            "docs": [
              "Removes any session key(s) of the function caller.",
              "",
              "This doesn't take effect until the next session.",
              "",
              "The dispatch origin of this function must be Signed and the account must be either be",
              "convertible to a validator ID using the chain's typical addressing system (this usually",
              "means being a controller account) or directly convertible into a validator ID (which",
              "usually means being a stash account).",
              "",
              "## Complexity",
              "- `O(1)` in number of key types. Actual cost depends on the number of length of",
              "  `T::Keys::key_ids()` which is fixed."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 228
        },
        "events": [
          {
            "lookup": "0b00",
            "name": "NewSession",
            "docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "SessionIndex"
            ]
          }
        ],
        "events_value": {
          "type": 51
        },
        "errors": [
          {
            "name": "InvalidProof",
            "doc": [
              "Invalid ownership proof."
            ]
          },
          {
            "name": "NoAssociatedValidatorId",
            "doc": [
              "No associated validator ID for account."
            ]
          },
          {
            "name": "DuplicatedKey",
            "doc": [
              "Registered duplicate key."
            ]
          },
          {
            "name": "NoKeys",
            "doc": [
              "No keys are associated with this account."
            ]
          },
          {
            "name": "NoAccount",
            "doc": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "errors_value": {
          "type": 504
        },
        "index": 11
      },
      {
        "name": "Democracy",
        "prefix": "Democracy",
        "storage": [
          {
            "name": "PublicPropCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of (public) proposals that have been made so far."
            ]
          },
          {
            "name": "PublicProps",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U32frame_support:traits:preimages:Bounded[U8; 32]\u003e",
              "PlainTypeValue": 505
            },
            "fallback": "0x00",
            "docs": [
              " The public proposals. Unsorted. The second item is the proposal."
            ]
          },
          {
            "name": "DepositOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@509U128",
                "keys_id": 4,
                "value_id": 508
              }
            },
            "fallback": "0x00",
            "docs": [
              " Those who have locked a deposit.",
              "",
              " TWOX-NOTE: Safe, as increasing integer keys are safe."
            ]
          },
          {
            "name": "ReferendumCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The next free referendum index, aka the number of referenda started so far."
            ]
          },
          {
            "name": "LowestUnbaked",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The lowest referendum index representing an unbaked referendum. Equal to",
              " `ReferendumCount` if there isn't a unbaked referendum."
            ]
          },
          {
            "name": "ReferendumInfoOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_democracy:types:ReferendumInfo",
                "keys_id": 4,
                "value_id": 510
              }
            },
            "fallback": "0x00",
            "docs": [
              " Information concerning any given referendum.",
              "",
              "0x2054574f582d4e4f54453a205341464520617320696e646578657320617265206e6f7420756e64657220616e2061747461636b6572e280997320636f6e74726f6c2e"
            ]
          },
          {
            "name": "VotingOf",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_democracy:vote:Voting",
                "keys_id": 0,
                "value_id": 513
              }
            },
            "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " All votes for a particular voter. We store the balance for the number of votes that we",
              " have recorded. The second item is the total amount of delegations, that will be added.",
              "",
              " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
            ]
          },
          {
            "name": "LastTabledWasExternal",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 42
            },
            "fallback": "0x00",
            "docs": [
              " True if the last referendum tabled was submitted externally. False if it was a public",
              " proposal."
            ]
          },
          {
            "name": "NextExternal",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Tuple:frame_support:traits:preimages:Boundedpallet_democracy:vote_threshold:VoteThreshold",
              "PlainTypeValue": 519
            },
            "fallback": "0x00",
            "docs": [
              " The referendum to be tabled whenever it would be valid to table an external proposal.",
              " This happens when a referendum needs to be tabled and one of two conditions are met:",
              " - `LastTabledWasExternal` is `false`; or",
              " - `PublicProps` is empty."
            ]
          },
          {
            "name": "Blacklist",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Tuple:U32Vec\u003c[U8; 32]\u003e",
                "keys_id": 12,
                "value_id": 520
              }
            },
            "fallback": "0x00",
            "docs": [
              " A record of who vetoed what. Maps proposal hash to a possible existent block number",
              " (until when it may not be resubmitted) and who vetoed it."
            ]
          },
          {
            "name": "Cancellations",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Bool",
                "keys_id": 12,
                "value_id": 42
              }
            },
            "fallback": "0x00",
            "docs": [
              " Record of all proposals that have been subject to emergency cancellation."
            ]
          },
          {
            "name": "MetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "pallet_democracy:types:MetadataOwner"
                ],
                "value": "H256",
                "keys_id": 56,
                "value_id": 12
              }
            },
            "fallback": "0x00",
            "docs": [
              " General information concerning any proposal or referendum.",
              " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
              " dump or IPFS hash of a JSON file.",
              "",
              " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
              " large preimages."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0c00",
            "name": "propose",
            "docs": [
              "Propose a sensitive action to be taken.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender must",
              "have funds to cover the deposit.",
              "",
              "- `proposal_hash`: The hash of the proposal preimage.",
              "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
              "",
              "Emits `Proposed`."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "0c01",
            "name": "second",
            "docs": [
              "Signals agreement with a particular proposal.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender",
              "must have funds to cover the deposit, equal to the original deposit.",
              "",
              "- `proposal`: The index of the proposal to second."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "compact\u003cU32\u003e",
                "type_name": "PropIndex"
              }
            ]
          },
          {
            "lookup": "0c02",
            "name": "vote",
            "docs": [
              "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
              "otherwise it is a vote to keep the status quo.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `ref_index`: The index of the referendum to vote for.",
              "- `vote`: The vote configuration."
            ],
            "args": [
              {
                "name": "ref_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReferendumIndex"
              },
              {
                "name": "vote",
                "type": "pallet_democracy:vote:AccountVote",
                "type_name": "AccountVote\u003cBalanceOf\u003e"
              }
            ]
          },
          {
            "lookup": "0c03",
            "name": "emergency_cancel",
            "docs": [
              "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
              "referendum.",
              "",
              "The dispatch origin of this call must be `CancellationOrigin`.",
              "",
              "-`ref_index`: The index of the referendum to cancel.",
              "",
              "Weight: `O(1)`."
            ],
            "args": [
              {
                "name": "ref_index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "0c04",
            "name": "external_propose",
            "docs": [
              "Schedule a referendum to be tabled once it is legal to schedule an external",
              "referendum.",
              "",
              "The dispatch origin of this call must be `ExternalOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              }
            ]
          },
          {
            "lookup": "0c05",
            "name": "external_propose_majority",
            "docs": [
              "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
              "an external referendum.",
              "",
              "The dispatch of this call must be `ExternalMajorityOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              }
            ]
          },
          {
            "lookup": "0c06",
            "name": "external_propose_default",
            "docs": [
              "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
              "schedule an external referendum.",
              "",
              "The dispatch of this call must be `ExternalDefaultOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              }
            ]
          },
          {
            "lookup": "0c07",
            "name": "fast_track",
            "docs": [
              "Schedule the currently externally-proposed majority-carries referendum to be tabled",
              "immediately. If there is no externally-proposed referendum currently, or if there is one",
              "but it is not a majority-carries referendum then it fails.",
              "",
              "The dispatch of this call must be `FastTrackOrigin`.",
              "",
              "- `proposal_hash`: The hash of the current external proposal.",
              "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
              "\tMust be always greater than zero.",
              "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
              "- `delay`: The number of block after voting has ended in approval and this should be",
              "  enacted. This doesn't have a minimum amount.",
              "",
              "Emits `Started`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "H256"
              },
              {
                "name": "voting_period",
                "type": "U32",
                "type_name": "BlockNumber"
              },
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumber"
              }
            ]
          },
          {
            "lookup": "0c08",
            "name": "veto_external",
            "docs": [
              "Veto and blacklist the external proposal hash.",
              "",
              "The dispatch origin of this call must be `VetoOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
              "",
              "Emits `Vetoed`.",
              "",
              "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "H256"
              }
            ]
          },
          {
            "lookup": "0c09",
            "name": "cancel_referendum",
            "docs": [
              "Remove a referendum.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "- `ref_index`: The index of the referendum to cancel.",
              "",
              "# Weight: `O(1)`."
            ],
            "args": [
              {
                "name": "ref_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "0c0a",
            "name": "delegate",
            "docs": [
              "Delegate the voting power (with some given conviction) of the sending account.",
              "",
              "The balance delegated is locked for as long as it's delegated, and thereafter for the",
              "time appropriate for the conviction's lock period.",
              "",
              "The dispatch origin of this call must be _Signed_, and the signing account must either:",
              "  - be delegating already; or",
              "  - have no voting activity (if there is, then it will need to be removed/consolidated",
              "    through `reap_vote` or `unvote`).",
              "",
              "- `to`: The account whose voting the `target` account's voting power will follow.",
              "- `conviction`: The conviction that will be attached to the delegated votes. When the",
              "  account is undelegated, the funds will be locked for the corresponding period.",
              "- `balance`: The amount of the account's balance to be used in delegating. This must not",
              "  be more than the account's current balance.",
              "",
              "Emits `Delegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ],
            "args": [
              {
                "name": "to",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "conviction",
                "type": "pallet_democracy:conviction:Conviction",
                "type_name": "Conviction"
              },
              {
                "name": "balance",
                "type": "U128",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "0c0b",
            "name": "undelegate",
            "docs": [
              "Undelegate the voting power of the sending account.",
              "",
              "Tokens may be unlocked following once an amount of time consistent with the lock period",
              "of the conviction with which the delegation was issued.",
              "",
              "The dispatch origin of this call must be _Signed_ and the signing account must be",
              "currently delegating.",
              "",
              "Emits `Undelegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ],
            "args": null
          },
          {
            "lookup": "0c0c",
            "name": "clear_public_proposals",
            "docs": [
              "Clears all public proposals.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "Weight: `O(1)`."
            ],
            "args": null
          },
          {
            "lookup": "0c0d",
            "name": "unlock",
            "docs": [
              "Unlock tokens that have an expired lock.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account to remove the lock on.",
              "",
              "Weight: `O(R)` with R number of vote of target."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "0c0e",
            "name": "remove_vote",
            "docs": [
              "Remove a vote for a referendum.",
              "",
              "If:",
              "- the referendum was cancelled, or",
              "- the referendum is ongoing, or",
              "- the referendum has ended such that",
              "  - the vote of the account was in opposition to the result; or",
              "  - there was no conviction to the account's vote; or",
              "  - the account made a split vote",
              "...then the vote is removed cleanly and a following call to `unlock` may result in more",
              "funds being available.",
              "",
              "If, however, the referendum has ended and:",
              "- it finished corresponding to the vote of the account, and",
              "- the account made a standard vote with conviction, and",
              "- the lock period of the conviction is not over",
              "...then the lock will be aggregated into the overall account's lock, which may involve",
              "*overlocking* (where the two locks are combined into a single lock that is the maximum",
              "of both the amount locked and the time is it locked for).",
              "",
              "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
              "registered for referendum `index`.",
              "",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "0c0f",
            "name": "remove_other_vote",
            "docs": [
              "Remove a vote for a referendum.",
              "",
              "If the `target` is equal to the signer, then this function is exactly equivalent to",
              "`remove_vote`. If not equal to the signer, then the vote must have expired,",
              "either because the referendum was cancelled, because the voter lost the referendum or",
              "because the conviction period is over.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account of the vote to be removed; this account must have voted for",
              "  referendum `index`.",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "0c10",
            "name": "blacklist",
            "docs": [
              "Permanently place a proposal into the blacklist. This prevents it from ever being",
              "proposed again.",
              "",
              "If called on a queued public or external proposal, then this will result in it being",
              "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
              "then it will be cancelled.",
              "",
              "The dispatch origin of this call must be `BlacklistOrigin`.",
              "",
              "- `proposal_hash`: The proposal hash to blacklist permanently.",
              "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
              "cancelled.",
              "",
              "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
              "  reasonable value)."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "H256"
              },
              {
                "name": "maybe_ref_index",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cReferendumIndex\u003e"
              }
            ]
          },
          {
            "lookup": "0c11",
            "name": "cancel_proposal",
            "docs": [
              "Remove a proposal.",
              "",
              "The dispatch origin of this call must be `CancelProposalOrigin`.",
              "",
              "- `prop_index`: The index of the proposal to cancel.",
              "",
              "Weight: `O(p)` where `p = PublicProps::\u003cT\u003e::decode_len()`"
            ],
            "args": [
              {
                "name": "prop_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "PropIndex"
              }
            ]
          },
          {
            "lookup": "0c12",
            "name": "set_metadata",
            "docs": [
              "Set or clear a metadata of a proposal or a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must correspond to the `MetadataOwner`.",
              "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`",
              "      threshold.",
              "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`",
              "      threshold.",
              "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`",
              "      threshold.",
              "    - `Signed` by a creator for a public proposal.",
              "    - `Signed` to clear a metadata for a finished referendum.",
              "    - `Root` to set a metadata for an ongoing referendum.",
              "- `owner`: an identifier of a metadata owner.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ],
            "args": [
              {
                "name": "owner",
                "type": "pallet_democracy:types:MetadataOwner",
                "type_name": "MetadataOwner"
              },
              {
                "name": "maybe_hash",
                "type": "option\u003cH256\u003e",
                "type_name": "Option\u003cPreimageHash\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 231
        },
        "events": [
          {
            "lookup": "0c00",
            "name": "Proposed",
            "docs": [
              "A motion has been proposed by a public account."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_type_name": [
              "PropIndex",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0c01",
            "name": "Tabled",
            "docs": [
              "A public proposal has been tabled for referendum vote."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_type_name": [
              "PropIndex",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0c02",
            "name": "ExternalTabled",
            "docs": [
              "An external proposal has been tabled."
            ],
            "args": null
          },
          {
            "lookup": "0c03",
            "name": "Started",
            "docs": [
              "A referendum has begun."
            ],
            "args": [
              "U32",
              "pallet_democracy:vote_threshold:VoteThreshold"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "VoteThreshold"
            ]
          },
          {
            "lookup": "0c04",
            "name": "Passed",
            "docs": [
              "A proposal has been approved by referendum."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "0c05",
            "name": "NotPassed",
            "docs": [
              "A proposal has been rejected by referendum."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "0c06",
            "name": "Cancelled",
            "docs": [
              "A referendum has been cancelled."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "0c07",
            "name": "Delegated",
            "docs": [
              "An account has delegated their vote to another account."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "0c08",
            "name": "Undelegated",
            "docs": [
              "An account has cancelled a previous delegation operation."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "0c09",
            "name": "Vetoed",
            "docs": [
              "An external proposal has been vetoed."
            ],
            "args": [
              "[U8; 32]",
              "H256",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "H256",
              "BlockNumber"
            ]
          },
          {
            "lookup": "0c0a",
            "name": "Blacklisted",
            "docs": [
              "A proposal_hash has been blacklisted permanently."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "H256"
            ]
          },
          {
            "lookup": "0c0b",
            "name": "Voted",
            "docs": [
              "An account has voted in a referendum"
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "pallet_democracy:vote:AccountVote"
            ],
            "args_type_name": [
              "AccountId",
              "ReferendumIndex",
              "AccountVote\u003cBalanceOf\u003e"
            ]
          },
          {
            "lookup": "0c0c",
            "name": "Seconded",
            "docs": [
              "An account has secconded a proposal"
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "PropIndex"
            ]
          },
          {
            "lookup": "0c0d",
            "name": "ProposalCanceled",
            "docs": [
              "A proposal got canceled."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "PropIndex"
            ]
          },
          {
            "lookup": "0c0e",
            "name": "MetadataSet",
            "docs": [
              "Metadata for a proposal or a referendum has been set."
            ],
            "args": [
              "pallet_democracy:types:MetadataOwner",
              "H256"
            ],
            "args_type_name": [
              "MetadataOwner",
              "PreimageHash"
            ]
          },
          {
            "lookup": "0c0f",
            "name": "MetadataCleared",
            "docs": [
              "Metadata for a proposal or a referendum has been cleared."
            ],
            "args": [
              "pallet_democracy:types:MetadataOwner",
              "H256"
            ],
            "args_type_name": [
              "MetadataOwner",
              "PreimageHash"
            ]
          },
          {
            "lookup": "0c10",
            "name": "MetadataTransferred",
            "docs": [
              "Metadata has been transferred to new owner."
            ],
            "args": [
              "pallet_democracy:types:MetadataOwner",
              "pallet_democracy:types:MetadataOwner",
              "H256"
            ],
            "args_type_name": [
              "MetadataOwner",
              "MetadataOwner",
              "PreimageHash"
            ]
          }
        ],
        "events_value": {
          "type": 52
        },
        "constants": [
          {
            "name": "EnactmentPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "002f0d00",
            "docs": [
              " The period between a proposal being approved and enacted.",
              "",
              " It should generally be a little more than the unstake period to ensure that",
              " voting stakers have an opportunity to remove themselves from the system in the case",
              " where they are on the losing side of a vote."
            ]
          },
          {
            "name": "LaunchPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "004e0c00",
            "docs": [
              " How often (in blocks) new public referenda are launched."
            ]
          },
          {
            "name": "VotingPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "004e0c00",
            "docs": [
              " How often (in blocks) to check for new votes."
            ]
          },
          {
            "name": "VoteLockingPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "002f0d00",
            "docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          },
          {
            "name": "MinimumDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "name": "InstantAllowed",
            "type": "Bool",
            "type_value": 42,
            "constants_value": "01",
            "docs": [
              " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
              " want to set this permanently to `false`, others may want to condition it on things such",
              " as an upgrade having happened recently."
            ]
          },
          {
            "name": "FastTrackVotingPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80510100",
            "docs": [
              " Minimum voting period allowed for a fast-track referendum."
            ]
          },
          {
            "name": "CooloffPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "004e0c00",
            "docs": [
              " Period in blocks where an external proposal may not be re-submitted after being vetoed."
            ]
          },
          {
            "name": "MaxVotes",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of votes for an account.",
              "",
              " Also used to compute weight, an overly big value can",
              " lead to extrinsic with very big weight: see `delegate` for instance."
            ]
          },
          {
            "name": "MaxProposals",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of public proposals that can exist at any time."
            ]
          },
          {
            "name": "MaxDeposits",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of deposits a public proposal may have at any time."
            ]
          },
          {
            "name": "MaxBlacklisted",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of items which can be blacklisted."
            ]
          }
        ],
        "errors": [
          {
            "name": "ValueLow",
            "doc": [
              "Value too low"
            ]
          },
          {
            "name": "ProposalMissing",
            "doc": [
              "Proposal does not exist"
            ]
          },
          {
            "name": "AlreadyCanceled",
            "doc": [
              "Cannot cancel the same proposal twice"
            ]
          },
          {
            "name": "DuplicateProposal",
            "doc": [
              "Proposal already made"
            ]
          },
          {
            "name": "ProposalBlacklisted",
            "doc": [
              "Proposal still blacklisted"
            ]
          },
          {
            "name": "NotSimpleMajority",
            "doc": [
              "Next external proposal not simple majority"
            ]
          },
          {
            "name": "InvalidHash",
            "doc": [
              "Invalid hash"
            ]
          },
          {
            "name": "NoProposal",
            "doc": [
              "No external proposal"
            ]
          },
          {
            "name": "AlreadyVetoed",
            "doc": [
              "Identity may not veto a proposal twice"
            ]
          },
          {
            "name": "ReferendumInvalid",
            "doc": [
              "Vote given for invalid referendum"
            ]
          },
          {
            "name": "NoneWaiting",
            "doc": [
              "No proposals waiting"
            ]
          },
          {
            "name": "NotVoter",
            "doc": [
              "The given account did not vote on the referendum."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "name": "AlreadyDelegating",
            "doc": [
              "The account is already delegating."
            ]
          },
          {
            "name": "InsufficientFunds",
            "doc": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "name": "NotDelegating",
            "doc": [
              "The account is not currently delegating."
            ]
          },
          {
            "name": "VotesExist",
            "doc": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "name": "InstantNotAllowed",
            "doc": [
              "The instant referendum origin is currently disallowed."
            ]
          },
          {
            "name": "Nonsense",
            "doc": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "name": "WrongUpperBound",
            "doc": [
              "Invalid upper bound."
            ]
          },
          {
            "name": "MaxVotesReached",
            "doc": [
              "Maximum number of votes reached."
            ]
          },
          {
            "name": "TooMany",
            "doc": [
              "Maximum number of items reached."
            ]
          },
          {
            "name": "VotingPeriodLow",
            "doc": [
              "Voting period too low"
            ]
          },
          {
            "name": "PreimageNotExist",
            "doc": [
              "The preimage does not exist."
            ]
          }
        ],
        "errors_value": {
          "type": 521
        },
        "index": 12
      },
      {
        "name": "Council",
        "prefix": "Council",
        "storage": [
          {
            "name": "Proposals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cH256\u003e",
              "PlainTypeValue": 522
            },
            "fallback": "0x00",
            "docs": [
              " The hashes of the active proposals."
            ]
          },
          {
            "name": "ProposalOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Call",
                "keys_id": 12,
                "value_id": 133
              }
            },
            "fallback": "0x00",
            "docs": [
              " Actual proposal for a given hash, if it's current."
            ]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_collective:Votes",
                "keys_id": 12,
                "value_id": 523
              }
            },
            "fallback": "0x00",
            "docs": [
              " Votes on a given proposal, if it is ongoing."
            ]
          },
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Proposals so far."
            ]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 86
            },
            "fallback": "0x00",
            "docs": [
              " The current members of the collective. This is stored sorted (just by value)."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The prime member that helps determine the default vote behavior in case of absentations."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0d00",
            "name": "set_members",
            "docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ],
            "args": [
              {
                "name": "new_members",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "prime",
                "type": "option\u003c[U8; 32]\u003e",
                "type_name": "Option\u003cAccountId\u003e"
              },
              {
                "name": "old_count",
                "type": "U32",
                "type_name": "MemberCount"
              }
            ]
          },
          {
            "lookup": "0d01",
            "name": "execute",
            "docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ],
            "args": [
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0d02",
            "name": "propose",
            "docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold \u003c 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold \u003c 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold \u003e= 2`)"
            ],
            "args": [
              {
                "name": "threshold",
                "type": "compact\u003cU32\u003e",
                "type_name": "MemberCount"
              },
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0d03",
            "name": "vote",
            "docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ],
            "args": [
              {
                "name": "proposal",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "0d05",
            "name": "disapprove_proposal",
            "docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "0d06",
            "name": "close",
            "docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::\u003cu32\u003e() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "proposal_weight_bound",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 234
        },
        "events": [
          {
            "lookup": "0d00",
            "name": "Proposed",
            "docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "H256",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "ProposalIndex",
              "Hash",
              "MemberCount"
            ]
          },
          {
            "lookup": "0d01",
            "name": "Voted",
            "docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "H256",
              "Bool",
              "U32",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "Hash",
              "bool",
              "MemberCount",
              "MemberCount"
            ]
          },
          {
            "lookup": "0d02",
            "name": "Approved",
            "docs": [
              "A motion was approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "0d03",
            "name": "Disapproved",
            "docs": [
              "A motion was not approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "0d04",
            "name": "Executed",
            "docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "0d05",
            "name": "MemberExecuted",
            "docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "0d06",
            "name": "Closed",
            "docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ],
            "args": [
              "H256",
              "U32",
              "U32"
            ],
            "args_type_name": [
              "Hash",
              "MemberCount",
              "MemberCount"
            ]
          }
        ],
        "events_value": {
          "type": 57
        },
        "constants": [
          {
            "name": "MaxProposalWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "070010a5d4e813ffffffffffffff7f",
            "docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotMember",
            "doc": [
              "Account is not a member"
            ]
          },
          {
            "name": "DuplicateProposal",
            "doc": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "name": "ProposalMissing",
            "doc": [
              "Proposal must exist"
            ]
          },
          {
            "name": "WrongIndex",
            "doc": [
              "Mismatched index"
            ]
          },
          {
            "name": "DuplicateVote",
            "doc": [
              "Duplicate vote ignored"
            ]
          },
          {
            "name": "AlreadyInitialized",
            "doc": [
              "Members are already initialized!"
            ]
          },
          {
            "name": "TooEarly",
            "doc": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "name": "TooManyProposals",
            "doc": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "name": "WrongProposalWeight",
            "doc": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "name": "WrongProposalLength",
            "doc": [
              "The given length bound for the proposal was too low."
            ]
          }
        ],
        "errors_value": {
          "type": 524
        },
        "index": 13
      },
      {
        "name": "TechnicalCommittee",
        "prefix": "TechnicalCommittee",
        "storage": [
          {
            "name": "Proposals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cH256\u003e",
              "PlainTypeValue": 525
            },
            "fallback": "0x00",
            "docs": [
              " The hashes of the active proposals."
            ]
          },
          {
            "name": "ProposalOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Call",
                "keys_id": 12,
                "value_id": 133
              }
            },
            "fallback": "0x00",
            "docs": [
              " Actual proposal for a given hash, if it's current."
            ]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_collective:Votes",
                "keys_id": 12,
                "value_id": 523
              }
            },
            "fallback": "0x00",
            "docs": [
              " Votes on a given proposal, if it is ongoing."
            ]
          },
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Proposals so far."
            ]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 86
            },
            "fallback": "0x00",
            "docs": [
              " The current members of the collective. This is stored sorted (just by value)."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The prime member that helps determine the default vote behavior in case of absentations."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0e00",
            "name": "set_members",
            "docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ],
            "args": [
              {
                "name": "new_members",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "prime",
                "type": "option\u003c[U8; 32]\u003e",
                "type_name": "Option\u003cAccountId\u003e"
              },
              {
                "name": "old_count",
                "type": "U32",
                "type_name": "MemberCount"
              }
            ]
          },
          {
            "lookup": "0e01",
            "name": "execute",
            "docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ],
            "args": [
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0e02",
            "name": "propose",
            "docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold \u003c 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold \u003c 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold \u003e= 2`)"
            ],
            "args": [
              {
                "name": "threshold",
                "type": "compact\u003cU32\u003e",
                "type_name": "MemberCount"
              },
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0e03",
            "name": "vote",
            "docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ],
            "args": [
              {
                "name": "proposal",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "0e05",
            "name": "disapprove_proposal",
            "docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "0e06",
            "name": "close",
            "docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::\u003cu32\u003e() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "proposal_weight_bound",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 235
        },
        "events": [
          {
            "lookup": "0e00",
            "name": "Proposed",
            "docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "H256",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "ProposalIndex",
              "Hash",
              "MemberCount"
            ]
          },
          {
            "lookup": "0e01",
            "name": "Voted",
            "docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "H256",
              "Bool",
              "U32",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "Hash",
              "bool",
              "MemberCount",
              "MemberCount"
            ]
          },
          {
            "lookup": "0e02",
            "name": "Approved",
            "docs": [
              "A motion was approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "0e03",
            "name": "Disapproved",
            "docs": [
              "A motion was not approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "0e04",
            "name": "Executed",
            "docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "0e05",
            "name": "MemberExecuted",
            "docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "0e06",
            "name": "Closed",
            "docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ],
            "args": [
              "H256",
              "U32",
              "U32"
            ],
            "args_type_name": [
              "Hash",
              "MemberCount",
              "MemberCount"
            ]
          }
        ],
        "events_value": {
          "type": 58
        },
        "constants": [
          {
            "name": "MaxProposalWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "070010a5d4e813ffffffffffffff7f",
            "docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotMember",
            "doc": [
              "Account is not a member"
            ]
          },
          {
            "name": "DuplicateProposal",
            "doc": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "name": "ProposalMissing",
            "doc": [
              "Proposal must exist"
            ]
          },
          {
            "name": "WrongIndex",
            "doc": [
              "Mismatched index"
            ]
          },
          {
            "name": "DuplicateVote",
            "doc": [
              "Duplicate vote ignored"
            ]
          },
          {
            "name": "AlreadyInitialized",
            "doc": [
              "Members are already initialized!"
            ]
          },
          {
            "name": "TooEarly",
            "doc": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "name": "TooManyProposals",
            "doc": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "name": "WrongProposalWeight",
            "doc": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "name": "WrongProposalLength",
            "doc": [
              "The given length bound for the proposal was too low."
            ]
          }
        ],
        "errors_value": {
          "type": 526
        },
        "index": 14
      },
      {
        "name": "Elections",
        "prefix": "Elections",
        "storage": [
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_elections_phragmen:SeatHolder\u003e",
              "PlainTypeValue": 527
            },
            "fallback": "0x00",
            "docs": [
              " The current elected members.",
              "",
              " Invariant: Always sorted based on account id."
            ]
          },
          {
            "name": "RunnersUp",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_elections_phragmen:SeatHolder\u003e",
              "PlainTypeValue": 527
            },
            "fallback": "0x00",
            "docs": [
              " The current reserved runners-up.",
              "",
              " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
              " last (i.e. _best_) runner-up will be replaced."
            ]
          },
          {
            "name": "Candidates",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:[U8; 32]U128\u003e",
              "PlainTypeValue": 60
            },
            "fallback": "0x00",
            "docs": [
              " The present candidate list. A current member or runner-up can never enter this vector",
              " and is always implicitly assumed to be a candidate.",
              "",
              " Second element is the deposit.",
              "",
              " Invariant: Always sorted based on account id."
            ]
          },
          {
            "name": "ElectionRounds",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The total number of vote rounds that have happened, excluding the upcoming one."
            ]
          },
          {
            "name": "Voting",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_elections_phragmen:Voter",
                "keys_id": 0,
                "value_id": 529
              }
            },
            "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Votes and locked stake of a particular voter.",
              "",
              " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0f00",
            "name": "vote",
            "docs": [
              "Vote for a set of candidates for the upcoming round of election. This can be called to",
              "set the initial votes, or update already existing votes.",
              "",
              "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
              "reserved. The deposit is based on the number of votes and can be updated over time.",
              "",
              "The `votes` should:",
              "  - not be empty.",
              "  - be less than the number of possible candidates. Note that all current members and",
              "    runners-up are also automatically candidates for the next round.",
              "",
              "If `value` is more than `who`'s free balance, then the maximum of the two is used.",
              "",
              "The dispatch origin of this call must be signed.",
              "",
              "### Warning",
              "",
              "It is the responsibility of the caller to **NOT** place all of their balance into the",
              "lock and keep some for further operations."
            ],
            "args": [
              {
                "name": "votes",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "0f01",
            "name": "remove_voter",
            "docs": [
              "Remove `origin` as a voter.",
              "",
              "This removes the lock and returns the deposit.",
              "",
              "The dispatch origin of this call must be signed and be a voter."
            ],
            "args": null
          },
          {
            "lookup": "0f02",
            "name": "submit_candidacy",
            "docs": [
              "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
              "",
              "All candidates are wiped at the end of the term. They either become a member/runner-up,",
              "or leave the system while their deposit is slashed.",
              "",
              "The dispatch origin of this call must be signed.",
              "",
              "### Warning",
              "",
              "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
              "to get their deposit back. Losing the spot in an election will always lead to a slash.",
              "",
              "The number of current candidates must be provided as witness data.",
              "## Complexity",
              "O(C + log(C)) where C is candidate_count."
            ],
            "args": [
              {
                "name": "candidate_count",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0f03",
            "name": "renounce_candidacy",
            "docs": [
              "Renounce one's intention to be a candidate for the next election round. 3 potential",
              "outcomes exist:",
              "",
              "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
              "  unreserved, returned and origin is removed as a candidate.",
              "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
              "  origin is removed as a runner-up.",
              "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
              "  removed as a member, consequently not being a candidate for the next round anymore.",
              "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
              "  are immediately used. If the prime is renouncing, then no prime will exist until the",
              "  next round.",
              "",
              "The dispatch origin of this call must be signed, and have one of the above roles.",
              "The type of renouncing must be provided as witness data.",
              "",
              "## Complexity",
              "  - Renouncing::Candidate(count): O(count + log(count))",
              "  - Renouncing::Member: O(1)",
              "  - Renouncing::RunnerUp: O(1)"
            ],
            "args": [
              {
                "name": "renouncing",
                "type": "pallet_elections_phragmen:Renouncing",
                "type_name": "Renouncing"
              }
            ]
          },
          {
            "lookup": "0f04",
            "name": "remove_member",
            "docs": [
              "Remove a particular member from the set. This is effective immediately and the bond of",
              "the outgoing member is slashed.",
              "",
              "If a runner-up is available, then the best runner-up will be removed and replaces the",
              "outgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is",
              "started, else, nothing happens.",
              "",
              "If `slash_bond` is set to true, the bond of the member being removed is slashed. Else,",
              "it is returned.",
              "",
              "The dispatch origin of this call must be root.",
              "",
              "Note that this does not affect the designated block number of the next election.",
              "",
              "## Complexity",
              "- Check details of remove_and_replace_member() and do_phragmen()."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "slash_bond",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "rerun_election",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "0f05",
            "name": "clean_defunct_voters",
            "docs": [
              "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
              "deposit of the removed voters are returned.",
              "",
              "This is an root function to be used only for cleaning the state.",
              "",
              "The dispatch origin of this call must be root.",
              "",
              "## Complexity",
              "- Check is_defunct_voter() details."
            ],
            "args": [
              {
                "name": "num_voters",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "num_defunct",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 236
        },
        "events": [
          {
            "lookup": "0f00",
            "name": "NewTerm",
            "docs": [
              "A new term with new_members. This indicates that enough candidates existed to run",
              "the election, not that enough have has been elected. The inner value must be examined",
              "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
              "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
              "begin with."
            ],
            "args": [
              "Vec\u003cTuple:[U8; 32]U128\u003e"
            ],
            "args_type_name": [
              "Vec\u003c(\u003cT as frame_system::Config\u003e::AccountId, BalanceOf)\u003e"
            ]
          },
          {
            "lookup": "0f01",
            "name": "EmptyTerm",
            "docs": [
              "No (or not enough) candidates existed for this round. This is different from",
              "`NewTerm(\\[\\])`. See the description of `NewTerm`."
            ],
            "args": null
          },
          {
            "lookup": "0f02",
            "name": "ElectionError",
            "docs": [
              "Internal error happened while trying to perform election."
            ],
            "args": null
          },
          {
            "lookup": "0f03",
            "name": "MemberKicked",
            "docs": [
              "A member has been removed. This should always be followed by either `NewTerm` or",
              "`EmptyTerm`."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId"
            ]
          },
          {
            "lookup": "0f04",
            "name": "Renounced",
            "docs": [
              "Someone has renounced their candidacy."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId"
            ]
          },
          {
            "lookup": "0f05",
            "name": "CandidateSlashed",
            "docs": [
              "A candidate was slashed by amount due to failing to obtain a seat as member or",
              "runner-up.",
              "",
              "Note that old members and runners-up are also candidates."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0f06",
            "name": "SeatHolderSlashed",
            "docs": [
              "A seat holder was slashed by amount by being forcefully removed from the set."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 59
        },
        "constants": [
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 277,
            "constants_value": "706872656c656374",
            "docs": [
              " Identifier for the elections-phragmen pallet's lock"
            ]
          },
          {
            "name": "CandidacyBond",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " How much should be locked up in order to submit one's candidacy."
            ]
          },
          {
            "name": "VotingBondBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00f0436de36a01000000000000000000",
            "docs": [
              " Base deposit associated with voting.",
              "",
              " This should be sensibly high to economically ensure the pallet cannot be attacked by",
              " creating a gigantic number of votes."
            ]
          },
          {
            "name": "VotingBondFactor",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000cc7b9fae00000000000000000000",
            "docs": [
              " The amount of bond that need to be locked for each vote (32 bytes)."
            ]
          },
          {
            "name": "DesiredMembers",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0d000000",
            "docs": [
              " Number of members to elect."
            ]
          },
          {
            "name": "DesiredRunnersUp",
            "type": "U32",
            "type_value": 4,
            "constants_value": "07000000",
            "docs": [
              " Number of runners_up to keep."
            ]
          },
          {
            "name": "TermDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80130300",
            "docs": [
              " How long each seat is kept. This defines the next block number at which an election",
              " round will happen. If set to zero, no elections are ever triggered and the module will",
              " be in passive mode."
            ]
          },
          {
            "name": "MaxCandidates",
            "type": "U32",
            "type_value": 4,
            "constants_value": "40000000",
            "docs": [
              " The maximum number of candidates in a phragmen election.",
              "",
              " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
              " consider how it will impact `T::WeightInfo::election_phragmen`.",
              "",
              " When this limit is reached no more candidates are accepted in the election."
            ]
          },
          {
            "name": "MaxVoters",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00020000",
            "docs": [
              " The maximum number of voters to allow in a phragmen election.",
              "",
              " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
              " consider how it will impact `T::WeightInfo::election_phragmen`.",
              "",
              " When the limit is reached the new voters are ignored."
            ]
          },
          {
            "name": "MaxVotesPerVoter",
            "type": "U32",
            "type_value": 4,
            "constants_value": "10000000",
            "docs": [
              " Maximum numbers of votes per voter.",
              "",
              " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
              " consider how it will impact `T::WeightInfo::election_phragmen`."
            ]
          }
        ],
        "errors": [
          {
            "name": "UnableToVote",
            "doc": [
              "Cannot vote when no candidates or members exist."
            ]
          },
          {
            "name": "NoVotes",
            "doc": [
              "Must vote for at least one candidate."
            ]
          },
          {
            "name": "TooManyVotes",
            "doc": [
              "Cannot vote more than candidates."
            ]
          },
          {
            "name": "MaximumVotesExceeded",
            "doc": [
              "Cannot vote more than maximum allowed."
            ]
          },
          {
            "name": "LowBalance",
            "doc": [
              "Cannot vote with stake less than minimum balance."
            ]
          },
          {
            "name": "UnableToPayBond",
            "doc": [
              "Voter can not pay voting bond."
            ]
          },
          {
            "name": "MustBeVoter",
            "doc": [
              "Must be a voter."
            ]
          },
          {
            "name": "DuplicatedCandidate",
            "doc": [
              "Duplicated candidate submission."
            ]
          },
          {
            "name": "TooManyCandidates",
            "doc": [
              "Too many candidates have been created."
            ]
          },
          {
            "name": "MemberSubmit",
            "doc": [
              "Member cannot re-submit candidacy."
            ]
          },
          {
            "name": "RunnerUpSubmit",
            "doc": [
              "Runner cannot re-submit candidacy."
            ]
          },
          {
            "name": "InsufficientCandidateFunds",
            "doc": [
              "Candidate does not have enough funds."
            ]
          },
          {
            "name": "NotMember",
            "doc": [
              "Not a member."
            ]
          },
          {
            "name": "InvalidWitnessData",
            "doc": [
              "The provided count of number of candidates is incorrect."
            ]
          },
          {
            "name": "InvalidVoteCount",
            "doc": [
              "The provided count of number of votes is incorrect."
            ]
          },
          {
            "name": "InvalidRenouncing",
            "doc": [
              "The renouncing origin presented a wrong `Renouncing` parameter."
            ]
          },
          {
            "name": "InvalidReplacement",
            "doc": [
              "Prediction regarding replacement after member removal is wrong."
            ]
          }
        ],
        "errors_value": {
          "type": 530
        },
        "index": 15
      },
      {
        "name": "TechnicalMembership",
        "prefix": "TechnicalMembership",
        "storage": [
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 531
            },
            "fallback": "0x00",
            "docs": [
              " The current membership, stored as an ordered Vec."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The current prime member, if one exists."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1000",
            "name": "add_member",
            "docs": [
              "Add a member `who` to the set.",
              "",
              "May only be called from `T::AddOrigin`."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1001",
            "name": "remove_member",
            "docs": [
              "Remove a member `who` from the set.",
              "",
              "May only be called from `T::RemoveOrigin`."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1002",
            "name": "swap_member",
            "docs": [
              "Swap out one member `remove` for another `add`.",
              "",
              "May only be called from `T::SwapOrigin`.",
              "",
              "Prime membership is *not* passed from `remove` to `add`, if extant."
            ],
            "args": [
              {
                "name": "remove",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "add",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1003",
            "name": "reset_members",
            "docs": [
              "Change the membership to a new set, disregarding the existing membership. Be nice and",
              "pass `members` pre-sorted.",
              "",
              "May only be called from `T::ResetOrigin`."
            ],
            "args": [
              {
                "name": "members",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "1004",
            "name": "change_key",
            "docs": [
              "Swap out the sending member for some other key `new`.",
              "",
              "May only be called from `Signed` origin of a current member.",
              "",
              "Prime membership is passed from the origin account to `new`, if extant."
            ],
            "args": [
              {
                "name": "new",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1005",
            "name": "set_prime",
            "docs": [
              "Set the prime member. Must be a current member.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1006",
            "name": "clear_prime",
            "docs": [
              "Remove the prime member if it exists.",
              "",
              "May only be called from `T::PrimeOrigin`."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 238
        },
        "events": [
          {
            "lookup": "1000",
            "name": "MemberAdded",
            "docs": [
              "The given member was added; see the transaction for who."
            ],
            "args": null
          },
          {
            "lookup": "1001",
            "name": "MemberRemoved",
            "docs": [
              "The given member was removed; see the transaction for who."
            ],
            "args": null
          },
          {
            "lookup": "1002",
            "name": "MembersSwapped",
            "docs": [
              "Two members were swapped; see the transaction for who."
            ],
            "args": null
          },
          {
            "lookup": "1003",
            "name": "MembersReset",
            "docs": [
              "The membership was reset; see the transaction for who the new set is."
            ],
            "args": null
          },
          {
            "lookup": "1004",
            "name": "KeyChanged",
            "docs": [
              "One of the members' keys changed."
            ],
            "args": null
          },
          {
            "lookup": "1005",
            "name": "Dummy",
            "docs": [
              "Phantom member, never used."
            ],
            "args": null
          }
        ],
        "events_value": {
          "type": 62
        },
        "errors": [
          {
            "name": "AlreadyMember",
            "doc": [
              "Already a member."
            ]
          },
          {
            "name": "NotMember",
            "doc": [
              "Not a member."
            ]
          },
          {
            "name": "TooManyMembers",
            "doc": [
              "Too many members."
            ]
          }
        ],
        "errors_value": {
          "type": 532
        },
        "index": 16
      },
      {
        "name": "Grandpa",
        "prefix": "Grandpa",
        "storage": [
          {
            "name": "State",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_grandpa:StoredState",
              "PlainTypeValue": 533
            },
            "fallback": "0x00",
            "docs": [
              " State of the current authority set."
            ]
          },
          {
            "name": "PendingChange",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_grandpa:StoredPendingChange",
              "PlainTypeValue": 534
            },
            "fallback": "0x00",
            "docs": [
              " Pending change: (signaled at, scheduled change)."
            ]
          },
          {
            "name": "NextForced",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " next block number where we can force a change."
            ]
          },
          {
            "name": "Stalled",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Tuple:U32U32",
              "PlainTypeValue": 90
            },
            "fallback": "0x00",
            "docs": [
              " `true` if we are currently stalled."
            ]
          },
          {
            "name": "CurrentSetId",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 11
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " The number of changes (both in terms of keys and underlying economic responsibilities)",
              " in the \"set\" of Grandpa validators from genesis."
            ]
          },
          {
            "name": "SetIdSession",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U64"
                ],
                "value": "U32",
                "keys_id": 11,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " A mapping from grandpa set ID to the index of the *most recent* session for which its",
              " members were responsible.",
              "",
              " This is only used for validating equivocation proofs. An equivocation proof must",
              " contains a key-ownership proof for a given session, therefore we need a way to tie",
              " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
              " was the owner of a given key on a given session, and what the active set ID was",
              " during that session.",
              "",
              " TWOX-NOTE: `SetId` is not under user control."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1100",
            "name": "report_equivocation",
            "docs": [
              "Report voter equivocation/misbehavior. This method will verify the",
              "equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence",
              "will be reported."
            ],
            "args": [
              {
                "name": "equivocation_proof",
                "type": "sp_consensus_grandpa:EquivocationProof",
                "type_name": "Box\u003cEquivocationProof\u003cHash, BlockNumber\u003e\u003e"
              },
              {
                "name": "key_owner_proof",
                "type": "sp_session:MembershipProof",
                "type_name": "KeyOwnerProof"
              }
            ]
          },
          {
            "lookup": "1101",
            "name": "report_equivocation_unsigned",
            "docs": [
              "Report voter equivocation/misbehavior. This method will verify the",
              "equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence",
              "will be reported.",
              "",
              "This extrinsic must be called unsigned and it is expected that only",
              "block authors will call it (validated in `ValidateUnsigned`), as such",
              "if the block author is defined it will be defined as the equivocation",
              "reporter."
            ],
            "args": [
              {
                "name": "equivocation_proof",
                "type": "sp_consensus_grandpa:EquivocationProof",
                "type_name": "Box\u003cEquivocationProof\u003cHash, BlockNumber\u003e\u003e"
              },
              {
                "name": "key_owner_proof",
                "type": "sp_session:MembershipProof",
                "type_name": "KeyOwnerProof"
              }
            ]
          },
          {
            "lookup": "1102",
            "name": "note_stalled",
            "docs": [
              "Note that the current authority set of the GRANDPA finality gadget has stalled.",
              "",
              "This will trigger a forced authority set change at the beginning of the next session, to",
              "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
              "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
              "The block production rate (which may be slowed down because of finality lagging) should",
              "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
              "authority will start voting on top of `best_finalized_block_number` for new finalized",
              "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
              "block of all validators of the new authority set.",
              "",
              "Only callable by root."
            ],
            "args": [
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumber"
              },
              {
                "name": "best_finalized_block_number",
                "type": "U32",
                "type_name": "BlockNumber"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 239
        },
        "events": [
          {
            "lookup": "1100",
            "name": "NewAuthorities",
            "docs": [
              "New authority set has been applied."
            ],
            "args": [
              "Vec\u003cTuple:sp_consensus_grandpa:app:PublicU64\u003e"
            ],
            "args_type_name": [
              "AuthorityList"
            ]
          },
          {
            "lookup": "1101",
            "name": "Paused",
            "docs": [
              "Current authority set has been paused."
            ],
            "args": null
          },
          {
            "lookup": "1102",
            "name": "Resumed",
            "docs": [
              "Current authority set has been resumed."
            ],
            "args": null
          }
        ],
        "events_value": {
          "type": 63
        },
        "constants": [
          {
            "name": "MaxAuthorities",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " Max Authorities in use"
            ]
          },
          {
            "name": "MaxSetIdSessionEntries",
            "type": "U64",
            "type_value": 11,
            "constants_value": "c00f000000000000",
            "docs": [
              " The maximum number of entries to keep in the set id to session index mapping.",
              "",
              " Since the `SetIdSession` map is only used for validating equivocations this",
              " value should relate to the bonding duration of whatever staking system is",
              " being used (if any). If equivocation handling is not enabled then this value",
              " can be zero."
            ]
          }
        ],
        "errors": [
          {
            "name": "PauseFailed",
            "doc": [
              "Attempt to signal GRANDPA pause when the authority set isn't live",
              "(either paused or already pending pause)."
            ]
          },
          {
            "name": "ResumeFailed",
            "doc": [
              "Attempt to signal GRANDPA resume when the authority set isn't paused",
              "(either live or already pending resume)."
            ]
          },
          {
            "name": "ChangePending",
            "doc": [
              "Attempt to signal GRANDPA change with one already pending."
            ]
          },
          {
            "name": "TooSoon",
            "doc": [
              "Cannot signal forced change so soon after last."
            ]
          },
          {
            "name": "InvalidKeyOwnershipProof",
            "doc": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "name": "InvalidEquivocationProof",
            "doc": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "name": "DuplicateOffenceReport",
            "doc": [
              "A given equivocation report is valid but already previously reported."
            ]
          }
        ],
        "errors_value": {
          "type": 536
        },
        "index": 17
      },
      {
        "name": "Treasury",
        "prefix": "Treasury",
        "storage": [
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Number of proposals that have been made."
            ]
          },
          {
            "name": "Proposals",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_treasury:Proposal",
                "keys_id": 4,
                "value_id": 537
              }
            },
            "fallback": "0x00",
            "docs": [
              " Proposals that have been made."
            ]
          },
          {
            "name": "Deactivated",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The amount which has been reported as inactive to Currency."
            ]
          },
          {
            "name": "Approvals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU32\u003e",
              "PlainTypeValue": 538
            },
            "fallback": "0x00",
            "docs": [
              " Proposal indices that have been approved but not yet awarded."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1200",
            "name": "propose_spend",
            "docs": [
              "Put forward a suggestion for spending. A deposit proportional to the value",
              "is reserved and slashed if the proposal is rejected. It is returned once the",
              "proposal is awarded.",
              "",
              "## Complexity",
              "- O(1)"
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1201",
            "name": "reject_proposal",
            "docs": [
              "Reject a proposed spend. The original deposit will be slashed.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "",
              "## Complexity",
              "- O(1)"
            ],
            "args": [
              {
                "name": "proposal_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              }
            ]
          },
          {
            "lookup": "1202",
            "name": "approve_proposal",
            "docs": [
              "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
              "and the original deposit will be returned.",
              "",
              "May only be called from `T::ApproveOrigin`.",
              "",
              "## Complexity",
              " - O(1)."
            ],
            "args": [
              {
                "name": "proposal_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              }
            ]
          },
          {
            "lookup": "1203",
            "name": "spend",
            "docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The destination account for the transfer.",
              "",
              "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
              "beneficiary."
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1204",
            "name": "remove_approval",
            "docs": [
              "Force a previously approved proposal to be removed from the approval queue.",
              "The original deposit will no longer be returned.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "- `proposal_id`: The index of a proposal",
              "",
              "## Complexity",
              "- O(A) where `A` is the number of approvals",
              "",
              "Errors:",
              "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
              "i.e., the proposal has not been approved. This could also mean the proposal does not",
              "exist altogether, thus there is no way it would have been approved in the first place."
            ],
            "args": [
              {
                "name": "proposal_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 251
        },
        "events": [
          {
            "lookup": "1200",
            "name": "Proposed",
            "docs": [
              "New proposal."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "ProposalIndex"
            ]
          },
          {
            "lookup": "1201",
            "name": "Spending",
            "docs": [
              "We have ended a spend period and will now allocate funds."
            ],
            "args": [
              "U128"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "1202",
            "name": "Awarded",
            "docs": [
              "Some funds have been allocated."
            ],
            "args": [
              "U32",
              "U128",
              "[U8; 32]"
            ],
            "args_type_name": [
              "ProposalIndex",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "1203",
            "name": "Rejected",
            "docs": [
              "A proposal was rejected; funds were slashed."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_type_name": [
              "ProposalIndex",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1204",
            "name": "Burnt",
            "docs": [
              "Some of our funds have been burnt."
            ],
            "args": [
              "U128"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "1205",
            "name": "Rollover",
            "docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ],
            "args": [
              "U128"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "1206",
            "name": "Deposit",
            "docs": [
              "Some funds have been deposited."
            ],
            "args": [
              "U128"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "1207",
            "name": "SpendApproved",
            "docs": [
              "A new spend proposal has been approved."
            ],
            "args": [
              "U32",
              "U128",
              "[U8; 32]"
            ],
            "args_type_name": [
              "ProposalIndex",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "1208",
            "name": "UpdatedInactive",
            "docs": [
              "The inactive funds of the pallet have been updated."
            ],
            "args": [
              "U128",
              "U128"
            ],
            "args_type_name": [
              "BalanceOf",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 68
        },
        "constants": [
          {
            "name": "ProposalBond",
            "type": "U32",
            "type_value": 539,
            "constants_value": "50c30000",
            "docs": [
              " Fraction of a proposal's value that should be bonded in order to place the proposal.",
              " An accepted proposal gets these back. A rejected proposal does not."
            ]
          },
          {
            "name": "ProposalBondMinimum",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "name": "ProposalBondMaximum",
            "type": "option\u003cU128\u003e",
            "type_value": 328,
            "constants_value": "00",
            "docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "name": "SpendPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80700000",
            "docs": [
              " Period between successive spends."
            ]
          },
          {
            "name": "Burn",
            "type": "U32",
            "type_value": 539,
            "constants_value": "20a10700",
            "docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 540,
            "constants_value": "70792f7472737279",
            "docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "name": "MaxApprovals",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          }
        ],
        "errors": [
          {
            "name": "InsufficientProposersBalance",
            "doc": [
              "Proposer's balance is too low."
            ]
          },
          {
            "name": "InvalidIndex",
            "doc": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "name": "TooManyApprovals",
            "doc": [
              "Too many approvals in the queue."
            ]
          },
          {
            "name": "InsufficientPermission",
            "doc": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "name": "ProposalNotApproved",
            "doc": [
              "Proposal has not been approved."
            ]
          }
        ],
        "errors_value": {
          "type": 541
        },
        "index": 18
      },
      {
        "name": "AssetRate",
        "prefix": "AssetRate",
        "storage": [
          {
            "name": "ConversionRateToNative",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U128",
                "keys_id": 4,
                "value_id": 70
              }
            },
            "fallback": "0x00",
            "docs": [
              " Maps an asset to its fixed point representation in the native balance.",
              "",
              " E.g. `native_amount = asset_amount * ConversionRateToNative::\u003cT\u003e::get(asset_id)`"
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1300",
            "name": "create",
            "docs": [
              "Initialize a conversion rate to native balance for the given asset.",
              "",
              "## Complexity",
              "- O(1)"
            ],
            "args": [
              {
                "name": "asset_id",
                "type": "U32",
                "type_name": "AssetId"
              },
              {
                "name": "rate",
                "type": "U128",
                "type_name": "FixedU128"
              }
            ]
          },
          {
            "lookup": "1301",
            "name": "update",
            "docs": [
              "Update the conversion rate to native balance for the given asset.",
              "",
              "## Complexity",
              "- O(1)"
            ],
            "args": [
              {
                "name": "asset_id",
                "type": "U32",
                "type_name": "AssetId"
              },
              {
                "name": "rate",
                "type": "U128",
                "type_name": "FixedU128"
              }
            ]
          },
          {
            "lookup": "1302",
            "name": "remove",
            "docs": [
              "Remove an existing conversion rate to native balance for the given asset.",
              "",
              "## Complexity",
              "- O(1)"
            ],
            "args": [
              {
                "name": "asset_id",
                "type": "U32",
                "type_name": "AssetId"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 252
        },
        "events": [
          {
            "lookup": "1300",
            "name": "AssetRateCreated",
            "docs": null,
            "args": [
              "U32",
              "U128"
            ],
            "args_type_name": [
              "AssetId",
              "FixedU128"
            ]
          },
          {
            "lookup": "1301",
            "name": "AssetRateRemoved",
            "docs": null,
            "args": [
              "U32"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "1302",
            "name": "AssetRateUpdated",
            "docs": null,
            "args": [
              "U32",
              "U128",
              "U128"
            ],
            "args_type_name": [
              "AssetId",
              "FixedU128",
              "FixedU128"
            ]
          }
        ],
        "events_value": {
          "type": 69
        },
        "errors": [
          {
            "name": "UnknownAssetId",
            "doc": [
              "The given asset ID is unknown."
            ]
          },
          {
            "name": "AlreadyExists",
            "doc": [
              "The given asset ID already has an assigned conversion rate and cannot be re-created."
            ]
          }
        ],
        "errors_value": {
          "type": 542
        },
        "index": 19
      },
      {
        "name": "Contracts",
        "prefix": "Contracts",
        "storage": [
          {
            "name": "PristineCode",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 12,
                "value_id": 543
              }
            },
            "fallback": "0x00",
            "docs": [
              " A mapping from an original code hash to the original code, untouched by instrumentation."
            ]
          },
          {
            "name": "CodeStorage",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_contracts:wasm:PrefabWasmModule",
                "keys_id": 12,
                "value_id": 544
              }
            },
            "fallback": "0x00",
            "docs": [
              " A mapping between an original code hash and instrumented wasm code, ready for execution."
            ]
          },
          {
            "name": "OwnerInfoOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_contracts:wasm:OwnerInfo",
                "keys_id": 12,
                "value_id": 546
              }
            },
            "fallback": "0x00",
            "docs": [
              " A mapping between an original code hash and its owner information."
            ]
          },
          {
            "name": "Nonce",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 11
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " This is a **monotonic** counter incremented on contract instantiation.",
              "",
              " This is used in order to generate unique trie ids for contracts.",
              " The trie id of a new contract is calculated from hash(account_id, nonce).",
              " The nonce is required because otherwise the following sequence would lead to",
              " a possible collision of storage:",
              "",
              " 1. Create a new contract.",
              " 2. Terminate the contract.",
              " 3. Immediately recreate the contract with the same account_id.",
              "",
              " This is bad because the contents of a trie are deleted lazily and there might be",
              " storage of the old instantiation still in it when the new contract is created. Please",
              " note that we can't replace the counter by the block number because the sequence above",
              " can happen in the same block. We also can't keep the account counter in memory only",
              " because storage is the only way to communicate across different extrinsics in the",
              " same block.",
              "",
              " # Note",
              "",
              " Do not use it to determine the number of contracts. It won't be decremented if",
              " a contract is destroyed."
            ]
          },
          {
            "name": "ContractInfoOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_contracts:storage:ContractInfo",
                "keys_id": 0,
                "value_id": 547
              }
            },
            "fallback": "0x00",
            "docs": [
              " The code associated with a given account.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "DeletionQueue",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 397
              }
            },
            "fallback": "0x00",
            "docs": [
              " Evicted contracts that await child trie deletion.",
              "",
              " Child trie deletion is a heavy operation depending on the amount of storage items",
              " stored in said trie. Therefore this operation is performed lazily in `on_idle`."
            ]
          },
          {
            "name": "DeletionQueueCounter",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_contracts:storage:DeletionQueueManager",
              "PlainTypeValue": 549
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " A pair of monotonic counters used to track the latest contract marked for deletion",
              " and the latest deleted contract in queue."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1400",
            "name": "call_old_weight",
            "docs": [
              "Deprecated version if [`Self::call`] for use in an in-storage `Call`."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "compact\u003cU64\u003e",
                "type_name": "OldWeight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1401",
            "name": "instantiate_with_code_old_weight",
            "docs": [
              "Deprecated version if [`Self::instantiate_with_code`] for use in an in-storage `Call`."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "compact\u003cU64\u003e",
                "type_name": "OldWeight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "code",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "salt",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1402",
            "name": "instantiate_old_weight",
            "docs": [
              "Deprecated version if [`Self::instantiate`] for use in an in-storage `Call`."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "compact\u003cU64\u003e",
                "type_name": "OldWeight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "code_hash",
                "type": "H256",
                "type_name": "CodeHash"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "salt",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1403",
            "name": "upload_code",
            "docs": [
              "Upload new `code` without instantiating a contract from it.",
              "",
              "If the code does not already exist a deposit is reserved from the caller",
              "and unreserved only when [`Self::remove_code`] is called. The size of the reserve",
              "depends on the instrumented size of the the supplied `code`.",
              "",
              "If the code already exists in storage it will still return `Ok` and upgrades",
              "the in storage version to the current",
              "[`InstructionWeights::version`](InstructionWeights).",
              "",
              "- `determinism`: If this is set to any other value but [`Determinism::Enforced`] then",
              "  the only way to use this code is to delegate call into it from an offchain execution.",
              "  Set to [`Determinism::Enforced`] if in doubt.",
              "",
              "# Note",
              "",
              "Anyone can instantiate a contract from any uploaded code and thus prevent its removal.",
              "To avoid this situation a constructor could employ access control so that it can",
              "only be instantiated by permissioned entities. The same is true when uploading",
              "through [`Self::instantiate_with_code`]."
            ],
            "args": [
              {
                "name": "code",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "determinism",
                "type": "pallet_contracts:wasm:Determinism",
                "type_name": "Determinism"
              }
            ]
          },
          {
            "lookup": "1404",
            "name": "remove_code",
            "docs": [
              "Remove the code stored under `code_hash` and refund the deposit to its owner.",
              "",
              "A code can only be removed by its original uploader (its owner) and only if it is",
              "not used by any contract."
            ],
            "args": [
              {
                "name": "code_hash",
                "type": "H256",
                "type_name": "CodeHash"
              }
            ]
          },
          {
            "lookup": "1405",
            "name": "set_code",
            "docs": [
              "Privileged function that changes the code of an existing contract.",
              "",
              "This takes care of updating refcounts and all other necessary operations. Returns",
              "an error if either the `code_hash` or `dest` do not exist.",
              "",
              "# Note",
              "",
              "This does **not** change the address of the contract in question. This means",
              "that the contract address is no longer derived from its code hash after calling",
              "this dispatchable."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "code_hash",
                "type": "H256",
                "type_name": "CodeHash"
              }
            ]
          },
          {
            "lookup": "1406",
            "name": "call",
            "docs": [
              "Makes a call to an account, optionally transferring some balance.",
              "",
              "# Parameters",
              "",
              "* `dest`: Address of the contract to call.",
              "* `value`: The balance to transfer from the `origin` to `dest`.",
              "* `gas_limit`: The gas limit enforced when executing the constructor.",
              "* `storage_deposit_limit`: The maximum amount of balance that can be charged from the",
              "  caller to pay for the storage consumed.",
              "* `data`: The input data to pass to the contract.",
              "",
              "* If the account is a smart-contract account, the associated code will be",
              "executed and any value will be transferred.",
              "* If the account is a regular account, any value will be transferred.",
              "* If no account exists and the call value is not less than `existential_deposit`,",
              "a regular account will be created and any value will be transferred."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1407",
            "name": "instantiate_with_code",
            "docs": [
              "Instantiates a new contract from the supplied `code` optionally transferring",
              "some balance.",
              "",
              "This dispatchable has the same effect as calling [`Self::upload_code`] +",
              "[`Self::instantiate`]. Bundling them together provides efficiency gains. Please",
              "also check the documentation of [`Self::upload_code`].",
              "",
              "# Parameters",
              "",
              "* `value`: The balance to transfer from the `origin` to the newly created contract.",
              "* `gas_limit`: The gas limit enforced when executing the constructor.",
              "* `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved",
              "  from the caller to pay for the storage consumed.",
              "* `code`: The contract code to deploy in raw bytes.",
              "* `data`: The input data to pass to the contract constructor.",
              "* `salt`: Used for the address derivation. See [`Pallet::contract_address`].",
              "",
              "Instantiation is executed as follows:",
              "",
              "- The supplied `code` is instrumented, deployed, and a `code_hash` is created for that",
              "  code.",
              "- If the `code_hash` already exists on the chain the underlying `code` will be shared.",
              "- The destination address is computed based on the sender, code_hash and the salt.",
              "- The smart-contract account is created at the computed address.",
              "- The `value` is transferred to the new account.",
              "- The `deploy` function is executed in the context of the newly-created account."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "code",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "salt",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1408",
            "name": "instantiate",
            "docs": [
              "Instantiates a contract from a previously deployed wasm binary.",
              "",
              "This function is identical to [`Self::instantiate_with_code`] but without the",
              "code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary",
              "must be supplied."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "code_hash",
                "type": "H256",
                "type_name": "CodeHash"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "salt",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 253
        },
        "events": [
          {
            "lookup": "1400",
            "name": "Instantiated",
            "docs": [
              "Contract deployed by address at the specified address."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1401",
            "name": "Terminated",
            "docs": [
              "Contract has been removed.",
              "",
              "# Note",
              "",
              "The only way for a contract to be removed and emitting this event is by calling",
              "`seal_terminate`."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1402",
            "name": "CodeStored",
            "docs": [
              "Code with the specified hash has been stored."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "1403",
            "name": "ContractEmitted",
            "docs": [
              "A custom event emitted by the contract."
            ],
            "args": [
              "[U8; 32]",
              "Vec\u003cU8\u003e"
            ],
            "args_type_name": [
              "AccountId",
              "Bytes"
            ]
          },
          {
            "lookup": "1404",
            "name": "CodeRemoved",
            "docs": [
              "A code with the specified hash was removed."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "1405",
            "name": "ContractCodeUpdated",
            "docs": [
              "A contract's code was updated."
            ],
            "args": [
              "[U8; 32]",
              "H256",
              "H256"
            ],
            "args_type_name": [
              "AccountId",
              "Hash",
              "Hash"
            ]
          },
          {
            "lookup": "1406",
            "name": "Called",
            "docs": [
              "A contract was called either by a plain account or another contract.",
              "",
              "# Note",
              "",
              "Please keep in mind that like all events this is only emitted for successful",
              "calls. This is because on failure all storage changes including events are",
              "rolled back."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1407",
            "name": "DelegateCalled",
            "docs": [
              "A contract delegate called a code hash.",
              "",
              "# Note",
              "",
              "Please keep in mind that like all events this is only emitted for successful",
              "calls. This is because on failure all storage changes including events are",
              "rolled back."
            ],
            "args": [
              "[U8; 32]",
              "H256"
            ],
            "args_type_name": [
              "AccountId",
              "CodeHash"
            ]
          }
        ],
        "events_value": {
          "type": 71
        },
        "constants": [
          {
            "name": "Schedule",
            "type": "pallet_contracts:schedule:Schedule",
            "type_value": 550,
            "constants_value": "040000000001000000040000800000001000000000100000000100002000000000400000000000080400000000000000bc050000490d0000050c0000f1070000e1170000350600007f090000be1200002a0000006f3e0000594f0000db040000d40300005d0800008b030000f31a0000bf1c0000e7080000bb20c900760300001e0300001d030000d40200009603000068030000fe02000012060000fc0500001d0600001c060000a10500008a060000220600007a0600000606000026060000a50500009f06000049050000111d000044180000c81e0000c0180000dc04000040050000c0050000a2050000aa060000a805000032060000a705000026bf140018163cc1066d2ab210f2067d2a0e05190018fe1e0a000c0e481400180e13140018fe79580018de2214001856d1130018a206150018ae08140018d6a45100289e270800009a501000182d0900f6c86900b4c502004a96e7fc9579861c6c00282ad1d300282e72511e31271d0900360e0e001c6d0b000eec3b1f95046906006c04c2bfad464930c2bf321f85042901047ac6130785048d0104d6e12307a504350b0422cf451fa5046d0a04eac62e266127feb6886db12ad6f0ca54312892f3e24389503d0900b6f65fec55516a1347392929e511008d140022ee220020d13c00deca2c0020dd30007e3a190020310e0006091900203d0e00c209c2083501a2a93002a8f2dc540bc101554904aec109000c96de0f00a03a7208000c",
            "docs": [
              " Cost schedule and limits."
            ]
          },
          {
            "name": "DepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0060defb740500000000000000000000",
            "docs": [
              " The amount of balance a caller has to pay for each byte of storage.",
              "",
              " # Note",
              "",
              " Changing this value for an existing chain might need a storage migration."
            ]
          },
          {
            "name": "DefaultDepositLimit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c0afbc4f86570000000000000000",
            "docs": [
              " Fallback value to limit the storage deposit if it's not being set by the caller."
            ]
          },
          {
            "name": "DepositPerItem",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00f0ab75a40d00000000000000000000",
            "docs": [
              " The amount of balance a caller has to pay for each storage item.",
              "",
              " # Note",
              "",
              " Changing this value for an existing chain might need a storage migration."
            ]
          },
          {
            "name": "MaxCodeLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00ec0100",
            "docs": [
              " The maximum length of a contract code in bytes. This limit applies to the instrumented",
              " version of the code. Therefore `instantiate_with_code` can fail even when supplying",
              " a wasm binary below this maximum size.",
              "",
              " The value should be chosen carefully taking into the account the overall memory limit",
              " your runtime has, as well as the [maximum allowed callstack",
              " depth](#associatedtype.CallStack). Look into the `integrity_test()` for some insights."
            ]
          },
          {
            "name": "MaxStorageKeyLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80000000",
            "docs": [
              " The maximum allowable length in bytes for storage keys."
            ]
          },
          {
            "name": "UnsafeUnstableInterface",
            "type": "Bool",
            "type_value": 42,
            "constants_value": "00",
            "docs": [
              " Make contract callable functions marked as `#[unstable]` available.",
              "",
              " Contracts that use `#[unstable]` functions won't be able to be uploaded unless",
              " this is set to `true`. This is only meant for testnets and dev nodes in order to",
              " experiment with new features.",
              "",
              " # Warning",
              "",
              " Do **not** set to `true` on productions chains."
            ]
          },
          {
            "name": "MaxDebugBufferLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00002000",
            "docs": [
              " The maximum length of the debug buffer in bytes."
            ]
          }
        ],
        "errors": [
          {
            "name": "InvalidScheduleVersion",
            "doc": [
              "A new schedule must have a greater version than the current one."
            ]
          },
          {
            "name": "InvalidCallFlags",
            "doc": [
              "Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."
            ]
          },
          {
            "name": "OutOfGas",
            "doc": [
              "The executed contract exhausted its gas limit."
            ]
          },
          {
            "name": "OutputBufferTooSmall",
            "doc": [
              "The output buffer supplied to a contract API call was too small."
            ]
          },
          {
            "name": "TransferFailed",
            "doc": [
              "Performing the requested transfer failed. Probably because there isn't enough",
              "free balance in the sender's account."
            ]
          },
          {
            "name": "MaxCallDepthReached",
            "doc": [
              "Performing a call was denied because the calling depth reached the limit",
              "of what is specified in the schedule."
            ]
          },
          {
            "name": "ContractNotFound",
            "doc": [
              "No contract was found at the specified address."
            ]
          },
          {
            "name": "CodeTooLarge",
            "doc": [
              "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
              "current schedule."
            ]
          },
          {
            "name": "CodeNotFound",
            "doc": [
              "No code could be found at the supplied code hash."
            ]
          },
          {
            "name": "OutOfBounds",
            "doc": [
              "A buffer outside of sandbox memory was passed to a contract API function."
            ]
          },
          {
            "name": "DecodingFailed",
            "doc": [
              "Input passed to a contract API function failed to decode as expected type."
            ]
          },
          {
            "name": "ContractTrapped",
            "doc": [
              "Contract trapped during execution."
            ]
          },
          {
            "name": "ValueTooLarge",
            "doc": [
              "The size defined in `T::MaxValueSize` was exceeded."
            ]
          },
          {
            "name": "TerminatedWhileReentrant",
            "doc": [
              "Termination of a contract is not allowed while the contract is already",
              "on the call stack. Can be triggered by `seal_terminate`."
            ]
          },
          {
            "name": "InputForwarded",
            "doc": [
              "`seal_call` forwarded this contracts input. It therefore is no longer available."
            ]
          },
          {
            "name": "RandomSubjectTooLong",
            "doc": [
              "The subject passed to `seal_random` exceeds the limit."
            ]
          },
          {
            "name": "TooManyTopics",
            "doc": [
              "The amount of topics passed to `seal_deposit_events` exceeds the limit."
            ]
          },
          {
            "name": "NoChainExtension",
            "doc": [
              "The chain does not provide a chain extension. Calling the chain extension results",
              "in this error. Note that this usually  shouldn't happen as deploying such contracts",
              "is rejected."
            ]
          },
          {
            "name": "DuplicateContract",
            "doc": [
              "A contract with the same AccountId already exists."
            ]
          },
          {
            "name": "TerminatedInConstructor",
            "doc": [
              "A contract self destructed in its constructor.",
              "",
              "This can be triggered by a call to `seal_terminate`."
            ]
          },
          {
            "name": "ReentranceDenied",
            "doc": [
              "A call tried to invoke a contract that is flagged as non-reentrant.",
              "The only other cause is that a call from a contract into the runtime tried to call back",
              "into `pallet-contracts`. This would make the whole pallet reentrant with regard to",
              "contract code execution which is not supported."
            ]
          },
          {
            "name": "StorageDepositNotEnoughFunds",
            "doc": [
              "Origin doesn't have enough balance to pay the required storage deposits."
            ]
          },
          {
            "name": "StorageDepositLimitExhausted",
            "doc": [
              "More storage was created than allowed by the storage deposit limit."
            ]
          },
          {
            "name": "CodeInUse",
            "doc": [
              "Code removal was denied because the code is still in use by at least one contract."
            ]
          },
          {
            "name": "ContractReverted",
            "doc": [
              "The contract ran to completion but decided to revert its storage changes.",
              "Please note that this error is only returned from extrinsics. When called directly",
              "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags",
              "to determine whether a reversion has taken place."
            ]
          },
          {
            "name": "CodeRejected",
            "doc": [
              "The contract's code was found to be invalid during validation or instrumentation.",
              "",
              "The most likely cause of this is that an API was used which is not supported by the",
              "node. This happens if an older node is used with a new version of ink!. Try updating",
              "your node to the newest available version.",
              "",
              "A more detailed error can be found on the node console if debug messages are enabled",
              "by supplying `-lruntime::contracts=debug`."
            ]
          },
          {
            "name": "Indeterministic",
            "doc": [
              "An indetermistic code was used in a context where this is not permitted."
            ]
          }
        ],
        "errors_value": {
          "type": 554
        },
        "index": 20
      },
      {
        "name": "Sudo",
        "prefix": "Sudo",
        "storage": [
          {
            "name": "Key",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The `AccountId` of the sudo key."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1500",
            "name": "sudo",
            "docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "1501",
            "name": "sudo_unchecked_weight",
            "docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "This function does not check the weight of the call, and instead allows the",
              "Sudo user to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              },
              {
                "name": "weight",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          },
          {
            "lookup": "1502",
            "name": "set_key",
            "docs": [
              "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
              "key.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "new",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1503",
            "name": "sudo_as",
            "docs": [
              "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
              "a given account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 256
        },
        "events": [
          {
            "lookup": "1500",
            "name": "Sudid",
            "docs": [
              "A sudo just took place. \\[result\\]"
            ],
            "args": [
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "DispatchResult"
            ]
          },
          {
            "lookup": "1501",
            "name": "KeyChanged",
            "docs": [
              "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
            ],
            "args": [
              "option\u003c[U8; 32]\u003e"
            ],
            "args_type_name": [
              "Option\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "1502",
            "name": "SudoAsDone",
            "docs": [
              "A sudo just took place. \\[result\\]"
            ],
            "args": [
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "DispatchResult"
            ]
          }
        ],
        "events_value": {
          "type": 72
        },
        "errors": [
          {
            "name": "RequireSudo",
            "doc": [
              "Sender must be the Sudo account"
            ]
          }
        ],
        "errors_value": {
          "type": 555
        },
        "index": 21
      },
      {
        "name": "ImOnline",
        "prefix": "ImOnline",
        "storage": [
          {
            "name": "HeartbeatAfter",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The block number after which it's ok to send heartbeats in the current",
              " session.",
              "",
              " At the beginning of each session we set this to a value that should fall",
              " roughly in the middle of the session duration. The idea is to first wait for",
              " the validators to produce a block in the current session, so that the",
              " heartbeat later on will not be necessary.",
              "",
              " This value will only be used as a fallback if we fail to get a proper session",
              " progress estimate from `NextSessionRotation`, as those estimates should be",
              " more accurate then the value we calculate for `HeartbeatAfter`."
            ]
          },
          {
            "name": "Keys",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 556
            },
            "fallback": "0x00",
            "docs": [
              " The current set of keys that may issue a heartbeat."
            ]
          },
          {
            "name": "ReceivedHeartbeats",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "WrapperOpaque\u003cpallet_im_online:BoundedOpaqueNetworkState\u003e",
                "keys_id": 90,
                "value_id": 558
              }
            },
            "fallback": "0x00",
            "docs": [
              " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
              " `WrapperOpaque\u003cBoundedOpaqueNetworkState\u003e`."
            ]
          },
          {
            "name": "AuthoredBlocks",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 487,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " For each session index, we keep a mapping of `ValidatorId\u003cT\u003e` to the",
              " number of blocks authored by the given authority."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1600",
            "name": "heartbeat",
            "docs": [
              "## Complexity:",
              "- `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is length of",
              "  `heartbeat.network_state.external_address`",
              "  - `O(K)`: decoding of length `K`",
              "  - `O(E)`: decoding/encoding of length `E`"
            ],
            "args": [
              {
                "name": "heartbeat",
                "type": "pallet_im_online:Heartbeat",
                "type_name": "Heartbeat\u003cBlockNumber\u003e"
              },
              {
                "name": "signature",
                "type": "[U8; 64]",
                "type_name": "\u003cAuthorityId as RuntimeAppPublic\u003e::Signature"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 257
        },
        "events": [
          {
            "lookup": "1600",
            "name": "HeartbeatReceived",
            "docs": [
              "A new heartbeat was received from `AuthorityId`."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AuthorityId"
            ]
          },
          {
            "lookup": "1601",
            "name": "AllGood",
            "docs": [
              "At the end of the session, no offence was committed."
            ],
            "args": null
          },
          {
            "lookup": "1602",
            "name": "SomeOffline",
            "docs": [
              "At the end of the session, at least one validator was found to be offline."
            ],
            "args": [
              "Vec\u003cTuple:[U8; 32]pallet_staking:Exposure\u003e"
            ],
            "args_type_name": [
              "Vec\u003cIdentificationTuple\u003e"
            ]
          }
        ],
        "events_value": {
          "type": 73
        },
        "constants": [
          {
            "name": "UnsignedPriority",
            "type": "U64",
            "type_value": 11,
            "constants_value": "ffffffffffffffff",
            "docs": [
              " A configuration for base priority of unsigned transactions.",
              "",
              " This is exposed so that it can be tuned for particular runtime, when",
              " multiple pallets send unsigned transactions."
            ]
          }
        ],
        "errors": [
          {
            "name": "InvalidKey",
            "doc": [
              "Non existent public key."
            ]
          },
          {
            "name": "DuplicatedHeartbeat",
            "doc": [
              "Duplicated heartbeat."
            ]
          }
        ],
        "errors_value": {
          "type": 563
        },
        "index": 22
      },
      {
        "name": "AuthorityDiscovery",
        "prefix": "AuthorityDiscovery",
        "storage": [
          {
            "name": "Keys",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 564
            },
            "fallback": "0x00",
            "docs": [
              " Keys of the current authority set."
            ]
          },
          {
            "name": "NextKeys",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 564
            },
            "fallback": "0x00",
            "docs": [
              " Keys of the next authority set."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 23
      },
      {
        "name": "Offences",
        "prefix": "Offences",
        "storage": [
          {
            "name": "Reports",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "sp_staking:offence:OffenceDetails",
                "keys_id": 12,
                "value_id": 566
              }
            },
            "fallback": "0x00",
            "docs": [
              " The primary structure that holds all offence records keyed by report identifiers."
            ]
          },
          {
            "name": "ConcurrentReportsIndex",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 16]",
                  "Vec\u003cU8\u003e"
                ],
                "value": "Vec\u003cH256\u003e",
                "keys_id": 567,
                "value_id": 418
              }
            },
            "fallback": "0x00",
            "docs": [
              " A vector of reports of the same kind that happened at the same time slot."
            ]
          }
        ],
        "events": [
          {
            "lookup": "1800",
            "name": "Offence",
            "docs": [
              "There is an offence reported of the given `kind` happened at the `session_index` and",
              "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
              "\\[kind, timeslot\\]."
            ],
            "args": [
              "[U8; 16]",
              "Vec\u003cU8\u003e"
            ],
            "args_type_name": [
              "Kind",
              "OpaqueTimeSlot"
            ]
          }
        ],
        "events_value": {
          "type": 82
        },
        "errors": null,
        "errors_value": null,
        "index": 24
      },
      {
        "name": "Historical",
        "prefix": "",
        "storage": null,
        "errors": null,
        "errors_value": null,
        "index": 25
      },
      {
        "name": "RandomnessCollectiveFlip",
        "prefix": "RandomnessCollectiveFlip",
        "storage": [
          {
            "name": "RandomMaterial",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cH256\u003e",
              "PlainTypeValue": 568
            },
            "fallback": "0x00",
            "docs": [
              " Series of block headers from the last 81 blocks that acts as random seed material. This",
              " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
              " the oldest hash."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 26
      },
      {
        "name": "Identity",
        "prefix": "Identity",
        "storage": [
          {
            "name": "IdentityOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_identity:types:Registration",
                "keys_id": 0,
                "value_id": 569
              }
            },
            "fallback": "0x00",
            "docs": [
              " Information that is pertinent to identify the entity behind an account.",
              "",
              "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
            ]
          },
          {
            "name": "SuperOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:[U8; 32]pallet_identity:types:Data",
                "keys_id": 0,
                "value_id": 302
              }
            },
            "fallback": "0x00",
            "docs": [
              " The super-identity of an alternative \"sub\" identity together with its name, within that",
              " context. If the account is not some other account's sub-identity, then just `None`."
            ]
          },
          {
            "name": "SubsOf",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:U128bounded_collections:bounded_vec:BoundedVec@574",
                "keys_id": 0,
                "value_id": 573
              }
            },
            "fallback": "0x0000000000000000000000000000000000",
            "docs": [
              " Alternative \"sub\" identities of this account.",
              "",
              " The first item is the deposit, the second is a vector of the accounts.",
              "",
              "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
            ]
          },
          {
            "name": "Registrars",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003coption\u003cpallet_identity:types:RegistrarInfo\u003e\u003e",
              "PlainTypeValue": 575
            },
            "fallback": "0x00",
            "docs": [
              " The set of registrars. Not expected to get very big as can only be added through a",
              " special origin (likely a council motion).",
              "",
              " The index into this can be cast to `RegistrarIndex` to get a valid value."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1b00",
            "name": "add_registrar",
            "docs": [
              "Add a registrar to the system.",
              "",
              "The dispatch origin for this call must be `T::RegistrarOrigin`.",
              "",
              "- `account`: the account of the registrar.",
              "",
              "Emits `RegistrarAdded` if successful.",
              "",
              "## Complexity",
              "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."
            ],
            "args": [
              {
                "name": "account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1b01",
            "name": "set_identity",
            "docs": [
              "Set an account's identity information and reserve the appropriate deposit.",
              "",
              "If the account already has identity information, the deposit is taken as part payment",
              "for the new deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `info`: The identity information.",
              "",
              "Emits `IdentitySet` if successful.",
              "",
              "## Complexity",
              "- `O(X + X' + R)`",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
              "  - where `R` judgements-count (registrar-count-bounded)"
            ],
            "args": [
              {
                "name": "info",
                "type": "pallet_identity:types:IdentityInfo",
                "type_name": "Box\u003cIdentityInfo\u003cMaxAdditionalFields\u003e\u003e"
              }
            ]
          },
          {
            "lookup": "1b02",
            "name": "set_subs",
            "docs": [
              "Set the sub-accounts of the sender.",
              "",
              "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
              "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "- `subs`: The identity's (new) sub-accounts.",
              "",
              "## Complexity",
              "- `O(P + S)`",
              "  - where `P` old-subs-count (hard- and deposit-bounded).",
              "  - where `S` subs-count (hard- and deposit-bounded)."
            ],
            "args": [
              {
                "name": "subs",
                "type": "Vec\u003cTuple:[U8; 32]pallet_identity:types:Data\u003e",
                "type_name": "Vec\u003c(AccountId, Data)\u003e"
              }
            ]
          },
          {
            "lookup": "1b03",
            "name": "clear_identity",
            "docs": [
              "Clear an account's identity info and all sub-accounts and return all deposits.",
              "",
              "Payment: All reserved balances on the account are returned.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "Emits `IdentityCleared` if successful.",
              "",
              "## Complexity",
              "- `O(R + S + X)`",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `S` subs-count (hard- and deposit-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ],
            "args": null
          },
          {
            "lookup": "1b04",
            "name": "request_judgement",
            "docs": [
              "Request a judgement from a registrar.",
              "",
              "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
              "given.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is requested.",
              "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
              "",
              "```nocompile",
              "Self::registrars().get(reg_index).unwrap().fee",
              "```",
              "",
              "Emits `JudgementRequested` if successful.",
              "",
              "## Complexity",
              "- `O(R + X)`.",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ],
            "args": [
              {
                "name": "reg_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "RegistrarIndex"
              },
              {
                "name": "max_fee",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "1b05",
            "name": "cancel_request",
            "docs": [
              "Cancel a previous request.",
              "",
              "Payment: A previously reserved deposit is returned on success.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
              "",
              "Emits `JudgementUnrequested` if successful.",
              "",
              "## Complexity",
              "- `O(R + X)`.",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ],
            "args": [
              {
                "name": "reg_index",
                "type": "U32",
                "type_name": "RegistrarIndex"
              }
            ]
          },
          {
            "lookup": "1b06",
            "name": "set_fee",
            "docs": [
              "Set the fee required for a judgement to be requested from a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fee`: the new fee.",
              "",
              "## Complexity",
              "- `O(R)`.",
              "  - where `R` registrar-count (governance-bounded)."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "RegistrarIndex"
              },
              {
                "name": "fee",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "1b07",
            "name": "set_account_id",
            "docs": [
              "Change the account associated with a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `new`: the new account ID.",
              "",
              "## Complexity",
              "- `O(R)`.",
              "  - where `R` registrar-count (governance-bounded)."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "RegistrarIndex"
              },
              {
                "name": "new",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1b08",
            "name": "set_fields",
            "docs": [
              "Set the field information for a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fields`: the fields that the registrar concerns themselves with.",
              "",
              "## Complexity",
              "- `O(R)`.",
              "  - where `R` registrar-count (governance-bounded)."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "RegistrarIndex"
              },
              {
                "name": "fields",
                "type": "U64",
                "type_name": "IdentityFields"
              }
            ]
          },
          {
            "lookup": "1b09",
            "name": "provide_judgement",
            "docs": [
              "Provide a judgement for an account's identity.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `reg_index`.",
              "",
              "- `reg_index`: the index of the registrar whose judgement is being made.",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
              "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
              "",
              "Emits `JudgementGiven` if successful.",
              "",
              "## Complexity",
              "- `O(R + X)`.",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ],
            "args": [
              {
                "name": "reg_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "RegistrarIndex"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "judgement",
                "type": "pallet_identity:types:Judgement",
                "type_name": "Judgement\u003cBalanceOf\u003e"
              },
              {
                "name": "identity",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "1b0a",
            "name": "kill_identity",
            "docs": [
              "Remove an account's identity and sub-account information and slash the deposits.",
              "",
              "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
              "`Slash`. Verification request deposits are not returned; they should be cancelled",
              "manually using `cancel_request`.",
              "",
              "The dispatch origin for this call must match `T::ForceOrigin`.",
              "",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "",
              "Emits `IdentityKilled` if successful.",
              "",
              "## Complexity",
              "- `O(R + S + X)`",
              "  - where `R` registrar-count (governance-bounded).",
              "  - where `S` subs-count (hard- and deposit-bounded).",
              "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1b0b",
            "name": "add_sub",
            "docs": [
              "Add the given account to the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ],
            "args": [
              {
                "name": "sub",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "data",
                "type": "pallet_identity:types:Data",
                "type_name": "Data"
              }
            ]
          },
          {
            "lookup": "1b0c",
            "name": "rename_sub",
            "docs": [
              "Alter the associated name of the given sub-account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ],
            "args": [
              {
                "name": "sub",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "data",
                "type": "pallet_identity:types:Data",
                "type_name": "Data"
              }
            ]
          },
          {
            "lookup": "1b0d",
            "name": "remove_sub",
            "docs": [
              "Remove the given account from the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ],
            "args": [
              {
                "name": "sub",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1b0e",
            "name": "quit_sub",
            "docs": [
              "Remove the sender as a sub-account.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender (*not* the original depositor).",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "super-identity.",
              "",
              "NOTE: This should not normally be used, but is provided in the case that the non-",
              "controller of an account is maliciously registered as a sub-account."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 265
        },
        "events": [
          {
            "lookup": "1b00",
            "name": "IdentitySet",
            "docs": [
              "A name was set or reset (which will remove all judgements)."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1b01",
            "name": "IdentityCleared",
            "docs": [
              "A name was cleared, and the given balance returned."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1b02",
            "name": "IdentityKilled",
            "docs": [
              "A name was removed and the given balance slashed."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1b03",
            "name": "JudgementRequested",
            "docs": [
              "A judgement was asked from a registrar."
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "RegistrarIndex"
            ]
          },
          {
            "lookup": "1b04",
            "name": "JudgementUnrequested",
            "docs": [
              "A judgement request was retracted."
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "RegistrarIndex"
            ]
          },
          {
            "lookup": "1b05",
            "name": "JudgementGiven",
            "docs": [
              "A judgement was given by a registrar."
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "RegistrarIndex"
            ]
          },
          {
            "lookup": "1b06",
            "name": "RegistrarAdded",
            "docs": [
              "A registrar was added."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "RegistrarIndex"
            ]
          },
          {
            "lookup": "1b07",
            "name": "SubIdentityAdded",
            "docs": [
              "A sub-identity was added to an identity and the deposit paid."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1b08",
            "name": "SubIdentityRemoved",
            "docs": [
              "A sub-identity was removed from an identity and the deposit freed."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1b09",
            "name": "SubIdentityRevoked",
            "docs": [
              "A sub-identity was cleared, and the given deposit repatriated from the",
              "main identity account to the sub-identity account."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 84
        },
        "constants": [
          {
            "name": "BasicDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The amount held on deposit for a registered identity"
            ]
          },
          {
            "name": "FieldDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00a031a95fe300000000000000000000",
            "docs": [
              " The amount held on deposit per additional field for a registered identity."
            ]
          },
          {
            "name": "SubAccountDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080f420e6b500000000000000000000",
            "docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "name": "MaxSubAccounts",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "name": "MaxAdditionalFields",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
              " required to access an identity, but can be pretty high."
            ]
          },
          {
            "name": "MaxRegistrars",
            "type": "U32",
            "type_value": 4,
            "constants_value": "14000000",
            "docs": [
              " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          }
        ],
        "errors": [
          {
            "name": "TooManySubAccounts",
            "doc": [
              "Too many subs-accounts."
            ]
          },
          {
            "name": "NotFound",
            "doc": [
              "Account isn't found."
            ]
          },
          {
            "name": "NotNamed",
            "doc": [
              "Account isn't named."
            ]
          },
          {
            "name": "EmptyIndex",
            "doc": [
              "Empty index."
            ]
          },
          {
            "name": "FeeChanged",
            "doc": [
              "Fee is changed."
            ]
          },
          {
            "name": "NoIdentity",
            "doc": [
              "No identity found."
            ]
          },
          {
            "name": "StickyJudgement",
            "doc": [
              "Sticky judgement."
            ]
          },
          {
            "name": "JudgementGiven",
            "doc": [
              "Judgement given."
            ]
          },
          {
            "name": "InvalidJudgement",
            "doc": [
              "Invalid judgement."
            ]
          },
          {
            "name": "InvalidIndex",
            "doc": [
              "The index is invalid."
            ]
          },
          {
            "name": "InvalidTarget",
            "doc": [
              "The target is invalid."
            ]
          },
          {
            "name": "TooManyFields",
            "doc": [
              "Too many additional fields."
            ]
          },
          {
            "name": "TooManyRegistrars",
            "doc": [
              "Maximum amount of registrars reached. Cannot add any more."
            ]
          },
          {
            "name": "AlreadyClaimed",
            "doc": [
              "Account ID is already named."
            ]
          },
          {
            "name": "NotSub",
            "doc": [
              "Sender is not a sub-account."
            ]
          },
          {
            "name": "NotOwned",
            "doc": [
              "Sub-account isn't owned by sender."
            ]
          },
          {
            "name": "JudgementForDifferentIdentity",
            "doc": [
              "The provided judgement was for a different identity."
            ]
          },
          {
            "name": "JudgementPaymentFailed",
            "doc": [
              "Error that occurs when there is an issue paying for judgement."
            ]
          }
        ],
        "errors_value": {
          "type": 579
        },
        "index": 27
      },
      {
        "name": "Society",
        "prefix": "Society",
        "storage": [
          {
            "name": "Founder",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The first member."
            ]
          },
          {
            "name": "Rules",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "H256",
              "PlainTypeValue": 12
            },
            "fallback": "0x00",
            "docs": [
              " A hash of the rules of this society concerning membership. Can only be set once and",
              " only by the founder."
            ]
          },
          {
            "name": "Candidates",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_society:Bid\u003e",
              "PlainTypeValue": 580
            },
            "fallback": "0x00",
            "docs": [
              " The current set of candidates; bidders that are attempting to become members."
            ]
          },
          {
            "name": "SuspendedCandidates",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:U128pallet_society:BidKind",
                "keys_id": 0,
                "value_id": 583
              }
            },
            "fallback": "0x00",
            "docs": [
              " The set of suspended candidates."
            ]
          },
          {
            "name": "Pot",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " Amount of our account balance that is specifically for the next round's bid(s)."
            ]
          },
          {
            "name": "Head",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The most primary from the most recently approved members."
            ]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 86
            },
            "fallback": "0x00",
            "docs": [
              " The current set of members, ordered."
            ]
          },
          {
            "name": "SuspendedMembers",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Bool",
                "keys_id": 0,
                "value_id": 42
              }
            },
            "fallback": "0x00",
            "docs": [
              " The set of suspended members."
            ]
          },
          {
            "name": "Bids",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_society:Bid\u003e",
              "PlainTypeValue": 580
            },
            "fallback": "0x00",
            "docs": [
              " The current bids, stored ordered by the value of the bid."
            ]
          },
          {
            "name": "Vouching",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_society:VouchingStatus",
                "keys_id": 0,
                "value_id": 584
              }
            },
            "fallback": "0x00",
            "docs": [
              " Members currently vouching or banned from vouching again"
            ]
          },
          {
            "name": "Payouts",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cTuple:U32U128\u003e",
                "keys_id": 0,
                "value_id": 585
              }
            },
            "fallback": "0x00",
            "docs": [
              " Pending payouts; ordered by block number, with the amount that should be paid out."
            ]
          },
          {
            "name": "Strikes",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 0,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " The ongoing number of losing votes cast by the member."
            ]
          },
          {
            "name": "Votes",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "[U8; 32]"
                ],
                "value": "pallet_society:Vote",
                "keys_id": 587,
                "value_id": 588
              }
            },
            "fallback": "0x00",
            "docs": [
              " Double map from Candidate -\u003e Voter -\u003e (Maybe) Vote."
            ]
          },
          {
            "name": "Defender",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The defending member currently being challenged."
            ]
          },
          {
            "name": "DefenderVotes",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_society:Vote",
                "keys_id": 0,
                "value_id": 588
              }
            },
            "fallback": "0x00",
            "docs": [
              " Votes for the defender."
            ]
          },
          {
            "name": "MaxMembers",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The max number of members for the society at one time."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1c00",
            "name": "bid",
            "docs": [
              "A user outside of the society can make a bid for entry.",
              "",
              "Payment: `CandidateDeposit` will be reserved for making a bid. It is returned",
              "when the bid becomes a member, or if the bid calls `unbid`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `value`: A one time payment the bid would like to receive when joining the society.",
              "",
              "## Complexity",
              "- O(M + B + C + logM + logB + X)",
              "\t  - B (len of bids)",
              "  - C (len of candidates)",
              "  - M (len of members)",
              "  - X (balance reserve)"
            ],
            "args": [
              {
                "name": "value",
                "type": "U128",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "1c01",
            "name": "unbid",
            "docs": [
              "A bidder can remove their bid for entry into society.",
              "By doing so, they will have their candidate deposit returned or",
              "they will unvouch their voucher.",
              "",
              "Payment: The bid deposit is unreserved if the user made a bid.",
              "",
              "The dispatch origin for this call must be _Signed_ and a bidder.",
              "",
              "Parameters:",
              "- `pos`: Position in the `Bids` vector of the bid who wants to unbid.",
              "",
              "## Complexity",
              "- O(B + X)",
              "  - B (len of bids)",
              "  - X (balance unreserve)"
            ],
            "args": [
              {
                "name": "pos",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "1c02",
            "name": "vouch",
            "docs": [
              "As a member, vouch for someone to join society by placing a bid on their behalf.",
              "",
              "There is no deposit required to vouch for a new bid, but a member can only vouch for",
              "one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by",
              "the suspension judgement origin, the member will be banned from vouching again.",
              "",
              "As a vouching member, you can claim a tip if the candidate is accepted. This tip will",
              "be paid as a portion of the reward the member will receive for joining the society.",
              "",
              "The dispatch origin for this call must be _Signed_ and a member.",
              "",
              "Parameters:",
              "- `who`: The user who you would like to vouch for.",
              "- `value`: The total reward to be paid between you and the candidate if they become",
              "a member in the society.",
              "- `tip`: Your cut of the total `value` payout when the candidate is inducted into",
              "the society. Tips larger than `value` will be saturated upon payout.",
              "",
              "## Complexity",
              "- O(M + B + C + logM + logB + X)",
              "  - B (len of bids)",
              "  - C (len of candidates)",
              "  - M (len of members)",
              "  - X (balance reserve)"
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "U128",
                "type_name": "BalanceOf"
              },
              {
                "name": "tip",
                "type": "U128",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "1c03",
            "name": "unvouch",
            "docs": [
              "As a vouching member, unvouch a bid. This only works while vouched user is",
              "only a bidder (and not a candidate).",
              "",
              "The dispatch origin for this call must be _Signed_ and a vouching member.",
              "",
              "Parameters:",
              "- `pos`: Position in the `Bids` vector of the bid who should be unvouched.",
              "",
              "## Complexity",
              "- O(B)",
              "  - B (len of bids)"
            ],
            "args": [
              {
                "name": "pos",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "1c04",
            "name": "vote",
            "docs": [
              "As a member, vote on a candidate.",
              "",
              "The dispatch origin for this call must be _Signed_ and a member.",
              "",
              "Parameters:",
              "- `candidate`: The candidate that the member would like to bid on.",
              "- `approve`: A boolean which says if the candidate should be approved (`true`) or",
              "  rejected (`false`).",
              "",
              "## Complexity",
              "- O(M + logM + C)",
              "  - C (len of candidates)",
              "  - M (len of members)"
            ],
            "args": [
              {
                "name": "candidate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "1c05",
            "name": "defender_vote",
            "docs": [
              "As a member, vote on the defender.",
              "",
              "The dispatch origin for this call must be _Signed_ and a member.",
              "",
              "Parameters:",
              "- `approve`: A boolean which says if the candidate should be",
              "approved (`true`) or rejected (`false`).",
              "",
              "## Complexity",
              "- O(M + logM)",
              "  - M (len of members)"
            ],
            "args": [
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "1c06",
            "name": "payout",
            "docs": [
              "Transfer the first matured payout for the sender and remove it from the records.",
              "",
              "NOTE: This extrinsic needs to be called multiple times to claim multiple matured",
              "payouts.",
              "",
              "Payment: The member will receive a payment equal to their first matured",
              "payout to their free balance.",
              "",
              "The dispatch origin for this call must be _Signed_ and a member with",
              "payouts remaining.",
              "",
              "## Complexity",
              "- O(M + logM + P + X)",
              "  - M (len of members)",
              "  - P (number of payouts for a particular member)",
              "  - X (currency transfer call)"
            ],
            "args": null
          },
          {
            "lookup": "1c07",
            "name": "found",
            "docs": [
              "Found the society.",
              "",
              "This is done as a discrete action in order to allow for the",
              "pallet to be included into a running chain and can only be done once.",
              "",
              "The dispatch origin for this call must be from the _FounderSetOrigin_.",
              "",
              "Parameters:",
              "- `founder` - The first member and head of the newly founded society.",
              "- `max_members` - The initial max number of members for the society.",
              "- `rules` - The rules of this society concerning membership.",
              "",
              "## Complexity",
              "- O(1)"
            ],
            "args": [
              {
                "name": "founder",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "max_members",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "rules",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1c08",
            "name": "unfound",
            "docs": [
              "Annul the founding of the society.",
              "",
              "The dispatch origin for this call must be Signed, and the signing account must be both",
              "the `Founder` and the `Head`. This implies that it may only be done when there is one",
              "member.",
              "",
              "## Complexity",
              "- O(1)"
            ],
            "args": null
          },
          {
            "lookup": "1c09",
            "name": "judge_suspended_member",
            "docs": [
              "Allow suspension judgement origin to make judgement on a suspended member.",
              "",
              "If a suspended member is forgiven, we simply add them back as a member, not affecting",
              "any of the existing storage items for that member.",
              "",
              "If a suspended member is rejected, remove all associated storage items, including",
              "their payouts, and remove any vouched bids they currently have.",
              "",
              "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
              "",
              "Parameters:",
              "- `who` - The suspended member to be judged.",
              "- `forgive` - A boolean representing whether the suspension judgement origin forgives",
              "  (`true`) or rejects (`false`) a suspended member.",
              "",
              "## Complexity",
              "- O(M + logM + B)",
              "  - B (len of bids)",
              "  - M (len of members)"
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "forgive",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "1c0a",
            "name": "judge_suspended_candidate",
            "docs": [
              "Allow suspended judgement origin to make judgement on a suspended candidate.",
              "",
              "If the judgement is `Approve`, we add them to society as a member with the appropriate",
              "payment for joining society.",
              "",
              "If the judgement is `Reject`, we either slash the deposit of the bid, giving it back",
              "to the society treasury, or we ban the voucher from vouching again.",
              "",
              "If the judgement is `Rebid`, we put the candidate back in the bid pool and let them go",
              "through the induction process again.",
              "",
              "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
              "",
              "Parameters:",
              "- `who` - The suspended candidate to be judged.",
              "- `judgement` - `Approve`, `Reject`, or `Rebid`.",
              "",
              "## Complexity",
              "- O(M + logM + B + X)",
              "  - B (len of bids)",
              "  - M (len of members)",
              "  - X (balance action)"
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "judgement",
                "type": "pallet_society:Judgement",
                "type_name": "Judgement"
              }
            ]
          },
          {
            "lookup": "1c0b",
            "name": "set_max_members",
            "docs": [
              "Allows root origin to change the maximum number of members in society.",
              "Max membership count must be greater than 1.",
              "",
              "The dispatch origin for this call must be from _ROOT_.",
              "",
              "Parameters:",
              "- `max` - The maximum number of members for the society.",
              "",
              "## Complexity",
              "- O(1)"
            ],
            "args": [
              {
                "name": "max",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 306
        },
        "events": [
          {
            "lookup": "1c00",
            "name": "Founded",
            "docs": [
              "The society is founded by the given identity."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1c01",
            "name": "Bid",
            "docs": [
              "A membership bid just happened. The given account is the candidate's ID and their offer",
              "is the second."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1c02",
            "name": "Vouch",
            "docs": [
              "A membership bid just happened by vouching. The given account is the candidate's ID and",
              "their offer is the second. The vouching party is the third."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "1c03",
            "name": "AutoUnbid",
            "docs": [
              "A candidate was dropped (due to an excess of bids in the system)."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1c04",
            "name": "Unbid",
            "docs": [
              "A candidate was dropped (by their request)."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1c05",
            "name": "Unvouch",
            "docs": [
              "A candidate was dropped (by request of who vouched for them)."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1c06",
            "name": "Inducted",
            "docs": [
              "A group of candidates have been inducted. The batch's primary is the first value, the",
              "batch in full is the second."
            ],
            "args": [
              "[U8; 32]",
              "Vec\u003c[U8; 32]\u003e"
            ],
            "args_type_name": [
              "AccountId",
              "Vec\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "1c07",
            "name": "SuspendedMemberJudgement",
            "docs": [
              "A suspended member has been judged."
            ],
            "args": [
              "[U8; 32]",
              "Bool"
            ],
            "args_type_name": [
              "AccountId",
              "bool"
            ]
          },
          {
            "lookup": "1c08",
            "name": "CandidateSuspended",
            "docs": [
              "A candidate has been suspended"
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1c09",
            "name": "MemberSuspended",
            "docs": [
              "A member has been suspended"
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1c0a",
            "name": "Challenged",
            "docs": [
              "A member has been challenged"
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1c0b",
            "name": "Vote",
            "docs": [
              "A vote has been placed"
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "Bool"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "bool"
            ]
          },
          {
            "lookup": "1c0c",
            "name": "DefenderVote",
            "docs": [
              "A vote has been placed for a defending member"
            ],
            "args": [
              "[U8; 32]",
              "Bool"
            ],
            "args_type_name": [
              "AccountId",
              "bool"
            ]
          },
          {
            "lookup": "1c0d",
            "name": "NewMaxMembers",
            "docs": [
              "A new \\[max\\] member count has been set"
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "u32"
            ]
          },
          {
            "lookup": "1c0e",
            "name": "Unfounded",
            "docs": [
              "Society is unfounded."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1c0f",
            "name": "Deposit",
            "docs": [
              "Some funds were deposited into the society account."
            ],
            "args": [
              "U128"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "1c10",
            "name": "SkepticsChosen",
            "docs": [
              "A group of members has been choosen as Skeptics"
            ],
            "args": [
              "Vec\u003c[U8; 32]\u003e"
            ],
            "args_type_name": [
              "Vec\u003cAccountId\u003e"
            ]
          }
        ],
        "events_value": {
          "type": 85
        },
        "constants": [
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 540,
            "constants_value": "70792f736f636965",
            "docs": [
              " The societies's pallet id"
            ]
          },
          {
            "name": "CandidateDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The minimum amount of a deposit required for a bid to be made."
            ]
          },
          {
            "name": "WrongSideDeduction",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080f420e6b500000000000000000000",
            "docs": [
              " The amount of the unpaid reward that gets deducted in the case that either a skeptic",
              " doesn't vote or someone votes in the wrong way."
            ]
          },
          {
            "name": "MaxStrikes",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The number of times a member may vote the wrong way (or not at all, when they are a",
              " skeptic) before they become suspended."
            ]
          },
          {
            "name": "PeriodSpend",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c52ebca2b1000000000000000000",
            "docs": [
              " The amount of incentive paid within each period. Doesn't include VoterTip."
            ]
          },
          {
            "name": "RotationPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00770100",
            "docs": [
              " The number of blocks between candidate/membership rotation periods."
            ]
          },
          {
            "name": "MaxLockDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "009cda01",
            "docs": [
              " The maximum duration of the payout lock."
            ]
          },
          {
            "name": "ChallengePeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80130300",
            "docs": [
              " The number of blocks between membership challenges."
            ]
          },
          {
            "name": "MaxCandidateIntake",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The maximum number of candidates that we accept per round."
            ]
          }
        ],
        "errors": [
          {
            "name": "BadPosition",
            "doc": [
              "An incorrect position was provided."
            ]
          },
          {
            "name": "NotMember",
            "doc": [
              "User is not a member."
            ]
          },
          {
            "name": "AlreadyMember",
            "doc": [
              "User is already a member."
            ]
          },
          {
            "name": "Suspended",
            "doc": [
              "User is suspended."
            ]
          },
          {
            "name": "NotSuspended",
            "doc": [
              "User is not suspended."
            ]
          },
          {
            "name": "NoPayout",
            "doc": [
              "Nothing to payout."
            ]
          },
          {
            "name": "AlreadyFounded",
            "doc": [
              "Society already founded."
            ]
          },
          {
            "name": "InsufficientPot",
            "doc": [
              "Not enough in pot to accept candidate."
            ]
          },
          {
            "name": "AlreadyVouching",
            "doc": [
              "Member is already vouching or banned from vouching again."
            ]
          },
          {
            "name": "NotVouching",
            "doc": [
              "Member is not vouching."
            ]
          },
          {
            "name": "Head",
            "doc": [
              "Cannot remove the head of the chain."
            ]
          },
          {
            "name": "Founder",
            "doc": [
              "Cannot remove the founder."
            ]
          },
          {
            "name": "AlreadyBid",
            "doc": [
              "User has already made a bid."
            ]
          },
          {
            "name": "AlreadyCandidate",
            "doc": [
              "User is already a candidate."
            ]
          },
          {
            "name": "NotCandidate",
            "doc": [
              "User is not a candidate."
            ]
          },
          {
            "name": "MaxMembers",
            "doc": [
              "Too many members in the society."
            ]
          },
          {
            "name": "NotFounder",
            "doc": [
              "The caller is not the founder."
            ]
          },
          {
            "name": "NotHead",
            "doc": [
              "The caller is not the head."
            ]
          }
        ],
        "errors_value": {
          "type": 589
        },
        "index": 28
      },
      {
        "name": "Recovery",
        "prefix": "Recovery",
        "storage": [
          {
            "name": "Recoverable",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_recovery:RecoveryConfig",
                "keys_id": 0,
                "value_id": 590
              }
            },
            "fallback": "0x00",
            "docs": [
              " The set of recoverable accounts and their recovery configuration."
            ]
          },
          {
            "name": "ActiveRecoveries",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "[U8; 32]"
                ],
                "value": "pallet_recovery:ActiveRecovery",
                "keys_id": 587,
                "value_id": 592
              }
            },
            "fallback": "0x00",
            "docs": [
              " Active recovery attempts.",
              "",
              " First account is the account to be recovered, and the second account",
              " is the user trying to recover the account."
            ]
          },
          {
            "name": "Proxy",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "[U8; 32]",
                "keys_id": 0,
                "value_id": 0
              }
            },
            "fallback": "0x00",
            "docs": [
              " The list of allowed proxy accounts.",
              "",
              " Map from the user who can access it to the recovered account."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1d00",
            "name": "as_recovered",
            "docs": [
              "Send a call through a recovered account.",
              "",
              "The dispatch origin for this call must be _Signed_ and registered to",
              "be able to make calls on behalf of the recovered account.",
              "",
              "Parameters:",
              "- `account`: The recovered account you want to make a call on-behalf-of.",
              "- `call`: The call you want to make with the recovered account."
            ],
            "args": [
              {
                "name": "account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "1d01",
            "name": "set_recovered",
            "docs": [
              "Allow ROOT to bypass the recovery process and set an a rescuer account",
              "for a lost account directly.",
              "",
              "The dispatch origin for this call must be _ROOT_.",
              "",
              "Parameters:",
              "- `lost`: The \"lost account\" to be recovered.",
              "- `rescuer`: The \"rescuer account\" which can call as the lost account."
            ],
            "args": [
              {
                "name": "lost",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "rescuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1d02",
            "name": "create_recovery",
            "docs": [
              "Create a recovery configuration for your account. This makes your account recoverable.",
              "",
              "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance",
              "will be reserved for storing the recovery configuration. This deposit is returned",
              "in full when the user calls `remove_recovery`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be",
              "  ordered and contain no duplicate values.",
              "- `threshold`: The number of friends that must vouch for a recovery attempt before the",
              "  account can be recovered. Should be less than or equal to the length of the list of",
              "  friends.",
              "- `delay_period`: The number of blocks after a recovery attempt is initialized that",
              "  needs to pass before the account can be recovered."
            ],
            "args": [
              {
                "name": "friends",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "threshold",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "delay_period",
                "type": "U32",
                "type_name": "BlockNumber"
              }
            ]
          },
          {
            "lookup": "1d03",
            "name": "initiate_recovery",
            "docs": [
              "Initiate the process for recovering a recoverable account.",
              "",
              "Payment: `RecoveryDeposit` balance will be reserved for initiating the",
              "recovery process. This deposit will always be repatriated to the account",
              "trying to be recovered. See `close_recovery`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `account`: The lost account that you want to recover. This account needs to be",
              "  recoverable (i.e. have a recovery configuration)."
            ],
            "args": [
              {
                "name": "account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1d04",
            "name": "vouch_recovery",
            "docs": [
              "Allow a \"friend\" of a recoverable account to vouch for an active recovery",
              "process for that account.",
              "",
              "The dispatch origin for this call must be _Signed_ and must be a \"friend\"",
              "for the recoverable account.",
              "",
              "Parameters:",
              "- `lost`: The lost account that you want to recover.",
              "- `rescuer`: The account trying to rescue the lost account that you want to vouch for.",
              "",
              "The combination of these two parameters must point to an active recovery",
              "process."
            ],
            "args": [
              {
                "name": "lost",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "rescuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1d05",
            "name": "claim_recovery",
            "docs": [
              "Allow a successful rescuer to claim their recovered account.",
              "",
              "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"",
              "who has successfully completed the account recovery process: collected",
              "`threshold` or more vouches, waited `delay_period` blocks since initiation.",
              "",
              "Parameters:",
              "- `account`: The lost account that you want to claim has been successfully recovered by",
              "  you."
            ],
            "args": [
              {
                "name": "account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1d06",
            "name": "close_recovery",
            "docs": [
              "As the controller of a recoverable account, close an active recovery",
              "process for your account.",
              "",
              "Payment: By calling this function, the recoverable account will receive",
              "the recovery deposit `RecoveryDeposit` placed by the rescuer.",
              "",
              "The dispatch origin for this call must be _Signed_ and must be a",
              "recoverable account with an active recovery process for it.",
              "",
              "Parameters:",
              "- `rescuer`: The account trying to rescue this recoverable account."
            ],
            "args": [
              {
                "name": "rescuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1d07",
            "name": "remove_recovery",
            "docs": [
              "Remove the recovery process for your account. Recovered accounts are still accessible.",
              "",
              "NOTE: The user must make sure to call `close_recovery` on all active",
              "recovery attempts before calling this function else it will fail.",
              "",
              "Payment: By calling this function the recoverable account will unreserve",
              "their recovery configuration deposit.",
              "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)",
              "",
              "The dispatch origin for this call must be _Signed_ and must be a",
              "recoverable account (i.e. has a recovery configuration)."
            ],
            "args": null
          },
          {
            "lookup": "1d08",
            "name": "cancel_recovered",
            "docs": [
              "Cancel the ability to use `as_recovered` for `account`.",
              "",
              "The dispatch origin for this call must be _Signed_ and registered to",
              "be able to make calls on behalf of the recovered account.",
              "",
              "Parameters:",
              "- `account`: The recovered account you are able to call on-behalf-of."
            ],
            "args": [
              {
                "name": "account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 308
        },
        "events": [
          {
            "lookup": "1d00",
            "name": "RecoveryCreated",
            "docs": [
              "A recovery process has been set up for an account."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1d01",
            "name": "RecoveryInitiated",
            "docs": [
              "A recovery process has been initiated for lost account by rescuer account."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1d02",
            "name": "RecoveryVouched",
            "docs": [
              "A recovery process for lost account by rescuer account has been vouched for by sender."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1d03",
            "name": "RecoveryClosed",
            "docs": [
              "A recovery process for lost account by rescuer account has been closed."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1d04",
            "name": "AccountRecovered",
            "docs": [
              "Lost account has been successfully recovered by rescuer account."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1d05",
            "name": "RecoveryRemoved",
            "docs": [
              "A recovery process has been removed for an account."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 87
        },
        "constants": [
          {
            "name": "ConfigDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00406352bfc601000000000000000000",
            "docs": [
              " The base amount of currency needed to reserve for creating a recovery configuration.",
              "",
              " This is held for an additional storage item whose value size is",
              " `2 + sizeof(BlockNumber, Balance)` bytes."
            ]
          },
          {
            "name": "FriendDepositFactor",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00203d88792d00000000000000000000",
            "docs": [
              " The amount of currency needed per additional user when creating a recovery",
              " configuration.",
              "",
              " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage",
              " value."
            ]
          },
          {
            "name": "MaxFriends",
            "type": "U32",
            "type_value": 4,
            "constants_value": "09000000",
            "docs": [
              " The maximum amount of friends allowed in a recovery configuration.",
              "",
              " NOTE: The threshold programmed in this Pallet uses u16, so it does",
              " not really make sense to have a limit here greater than u16::MAX.",
              " But also, that is a lot more than you should probably set this value",
              " to anyway..."
            ]
          },
          {
            "name": "RecoveryDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00406352bfc601000000000000000000",
            "docs": [
              " The base amount of currency needed to reserve for starting a recovery.",
              "",
              " This is primarily held for deterring malicious recovery attempts, and should",
              " have a value large enough that a bad actor would choose not to place this",
              " deposit. It also acts to fund additional storage item whose value size is",
              " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable",
              " threshold."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotAllowed",
            "doc": [
              "User is not allowed to make a call on behalf of this account"
            ]
          },
          {
            "name": "ZeroThreshold",
            "doc": [
              "Threshold must be greater than zero"
            ]
          },
          {
            "name": "NotEnoughFriends",
            "doc": [
              "Friends list must be greater than zero and threshold"
            ]
          },
          {
            "name": "MaxFriends",
            "doc": [
              "Friends list must be less than max friends"
            ]
          },
          {
            "name": "NotSorted",
            "doc": [
              "Friends list must be sorted and free of duplicates"
            ]
          },
          {
            "name": "NotRecoverable",
            "doc": [
              "This account is not set up for recovery"
            ]
          },
          {
            "name": "AlreadyRecoverable",
            "doc": [
              "This account is already set up for recovery"
            ]
          },
          {
            "name": "AlreadyStarted",
            "doc": [
              "A recovery process has already started for this account"
            ]
          },
          {
            "name": "NotStarted",
            "doc": [
              "A recovery process has not started for this rescuer"
            ]
          },
          {
            "name": "NotFriend",
            "doc": [
              "This account is not a friend who can vouch"
            ]
          },
          {
            "name": "DelayPeriod",
            "doc": [
              "The friend must wait until the delay period to vouch for this recovery"
            ]
          },
          {
            "name": "AlreadyVouched",
            "doc": [
              "This user has already vouched for this recovery"
            ]
          },
          {
            "name": "Threshold",
            "doc": [
              "The threshold for recovering this account has not been met"
            ]
          },
          {
            "name": "StillActive",
            "doc": [
              "There are still active recovery attempts that need to be closed"
            ]
          },
          {
            "name": "AlreadyProxy",
            "doc": [
              "This account is already set up for recovery"
            ]
          },
          {
            "name": "BadState",
            "doc": [
              "Some internal state is broken."
            ]
          }
        ],
        "errors_value": {
          "type": 593
        },
        "index": 29
      },
      {
        "name": "Vesting",
        "prefix": "Vesting",
        "storage": [
          {
            "name": "Vesting",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cpallet_vesting:vesting_info:VestingInfo\u003e",
                "keys_id": 0,
                "value_id": 594
              }
            },
            "fallback": "0x00",
            "docs": [
              " Information regarding the vesting of a given account."
            ]
          },
          {
            "name": "StorageVersion",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_vesting:Releases",
              "PlainTypeValue": 596
            },
            "fallback": "0x00",
            "docs": [
              " Storage version of the pallet.",
              "",
              " New networks start with latest version, as determined by the genesis build."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1e00",
            "name": "vest",
            "docs": [
              "Unlock any vested funds of the sender account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "## Complexity",
              "- `O(1)`."
            ],
            "args": null
          },
          {
            "lookup": "1e01",
            "name": "vest_other",
            "docs": [
              "Unlock any vested funds of a `target` account.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account whose vested funds should be unlocked. Must have funds still",
              "locked under this pallet.",
              "",
              "Emits either `VestingCompleted` or `VestingUpdated`.",
              "",
              "## Complexity",
              "- `O(1)`."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1e02",
            "name": "vested_transfer",
            "docs": [
              "Create a vested transfer.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `target`: The account receiving the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "## Complexity",
              "- `O(1)`."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "schedule",
                "type": "pallet_vesting:vesting_info:VestingInfo",
                "type_name": "VestingInfo\u003cBalanceOf, BlockNumber\u003e"
              }
            ]
          },
          {
            "lookup": "1e03",
            "name": "force_vested_transfer",
            "docs": [
              "Force a vested transfer.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "- `source`: The account whose funds should be transferred.",
              "- `target`: The account that should be transferred the vested funds.",
              "- `schedule`: The vesting schedule attached to the transfer.",
              "",
              "Emits `VestingCreated`.",
              "",
              "NOTE: This will unlock all schedules through the current block.",
              "",
              "## Complexity",
              "- `O(1)`."
            ],
            "args": [
              {
                "name": "source",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "schedule",
                "type": "pallet_vesting:vesting_info:VestingInfo",
                "type_name": "VestingInfo\u003cBalanceOf, BlockNumber\u003e"
              }
            ]
          },
          {
            "lookup": "1e04",
            "name": "merge_schedules",
            "docs": [
              "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
              "the highest possible start and end blocks. If both schedules have already started the",
              "current block will be used as the schedule start; with the caveat that if one schedule",
              "is finished by the current block, the other will be treated as the new merged schedule,",
              "unmodified.",
              "",
              "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
              "NOTE: This will unlock all schedules through the current block prior to merging.",
              "NOTE: If both schedules have ended by the current block, no new schedule will be created",
              "and both will be removed.",
              "",
              "Merged schedule attributes:",
              "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
              "  current_block)`.",
              "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
              "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `schedule1_index`: index of the first schedule to merge.",
              "- `schedule2_index`: index of the second schedule to merge."
            ],
            "args": [
              {
                "name": "schedule1_index",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "schedule2_index",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 309
        },
        "events": [
          {
            "lookup": "1e00",
            "name": "VestingUpdated",
            "docs": [
              "The amount vested has been updated. This could indicate a change in funds available.",
              "The balance given is the amount which is left unvested (and thus locked)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1e01",
            "name": "VestingCompleted",
            "docs": [
              "An \\[account\\] has become fully vested."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 88
        },
        "constants": [
          {
            "name": "MinVestedTransfer",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          },
          {
            "name": "MaxVestingSchedules",
            "type": "U32",
            "type_value": 4,
            "constants_value": "1c000000",
            "docs": null
          }
        ],
        "errors": [
          {
            "name": "NotVesting",
            "doc": [
              "The account given is not vesting."
            ]
          },
          {
            "name": "AtMaxVestingSchedules",
            "doc": [
              "The account already has `MaxVestingSchedules` count of schedules and thus",
              "cannot add another one. Consider merging existing schedules in order to add another."
            ]
          },
          {
            "name": "AmountLow",
            "doc": [
              "Amount being transferred is too low to create a vesting schedule."
            ]
          },
          {
            "name": "ScheduleIndexOutOfBounds",
            "doc": [
              "An index was out of bounds of the vesting schedules."
            ]
          },
          {
            "name": "InvalidScheduleParams",
            "doc": [
              "Failed to create a new schedule because some parameter was invalid."
            ]
          }
        ],
        "errors_value": {
          "type": 597
        },
        "index": 30
      },
      {
        "name": "Scheduler",
        "prefix": "Scheduler",
        "storage": [
          {
            "name": "IncompleteSince",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "Agenda",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003coption\u003cpallet_scheduler:Scheduled\u003e\u003e",
                "keys_id": 4,
                "value_id": 598
              }
            },
            "fallback": "0x00",
            "docs": [
              " Items to be executed, indexed by the block number that they should be executed on."
            ]
          },
          {
            "name": "Lookup",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:U32U32",
                "keys_id": 1,
                "value_id": 90
              }
            },
            "fallback": "0x00",
            "docs": [
              " Lookup from a name to the block number and index of the task.",
              "",
              " For v3 -\u003e v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
              " identities."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1f00",
            "name": "schedule",
            "docs": [
              "Anonymously schedule a task."
            ],
            "args": [
              {
                "name": "when",
                "type": "U32",
                "type_name": "BlockNumber"
              },
              {
                "name": "maybe_periodic",
                "type": "option\u003cTuple:U32U32\u003e",
                "type_name": "Option\u003cschedule::Period\u003cBlockNumber\u003e\u003e"
              },
              {
                "name": "priority",
                "type": "U8",
                "type_name": "schedule::Priority"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "1f01",
            "name": "cancel",
            "docs": [
              "Cancel an anonymously scheduled task."
            ],
            "args": [
              {
                "name": "when",
                "type": "U32",
                "type_name": "BlockNumber"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "1f02",
            "name": "schedule_named",
            "docs": [
              "Schedule a named task."
            ],
            "args": [
              {
                "name": "id",
                "type": "[U8; 32]",
                "type_name": "TaskName"
              },
              {
                "name": "when",
                "type": "U32",
                "type_name": "BlockNumber"
              },
              {
                "name": "maybe_periodic",
                "type": "option\u003cTuple:U32U32\u003e",
                "type_name": "Option\u003cschedule::Period\u003cBlockNumber\u003e\u003e"
              },
              {
                "name": "priority",
                "type": "U8",
                "type_name": "schedule::Priority"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "1f03",
            "name": "cancel_named",
            "docs": [
              "Cancel a named scheduled task."
            ],
            "args": [
              {
                "name": "id",
                "type": "[U8; 32]",
                "type_name": "TaskName"
              }
            ]
          },
          {
            "lookup": "1f04",
            "name": "schedule_after",
            "docs": [
              "Anonymously schedule a task after a delay."
            ],
            "args": [
              {
                "name": "after",
                "type": "U32",
                "type_name": "BlockNumber"
              },
              {
                "name": "maybe_periodic",
                "type": "option\u003cTuple:U32U32\u003e",
                "type_name": "Option\u003cschedule::Period\u003cBlockNumber\u003e\u003e"
              },
              {
                "name": "priority",
                "type": "U8",
                "type_name": "schedule::Priority"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "1f05",
            "name": "schedule_named_after",
            "docs": [
              "Schedule a named task after a delay."
            ],
            "args": [
              {
                "name": "id",
                "type": "[U8; 32]",
                "type_name": "TaskName"
              },
              {
                "name": "after",
                "type": "U32",
                "type_name": "BlockNumber"
              },
              {
                "name": "maybe_periodic",
                "type": "option\u003cTuple:U32U32\u003e",
                "type_name": "Option\u003cschedule::Period\u003cBlockNumber\u003e\u003e"
              },
              {
                "name": "priority",
                "type": "U8",
                "type_name": "schedule::Priority"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 311
        },
        "events": [
          {
            "lookup": "1f00",
            "name": "Scheduled",
            "docs": [
              "Scheduled some task."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "BlockNumber",
              "u32"
            ]
          },
          {
            "lookup": "1f01",
            "name": "Canceled",
            "docs": [
              "Canceled some task."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "BlockNumber",
              "u32"
            ]
          },
          {
            "lookup": "1f02",
            "name": "Dispatched",
            "docs": [
              "Dispatched some task."
            ],
            "args": [
              "Tuple:U32U32",
              "option\u003c[U8; 32]\u003e",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "TaskAddress\u003cBlockNumber\u003e",
              "Option\u003cTaskName\u003e",
              "DispatchResult"
            ]
          },
          {
            "lookup": "1f03",
            "name": "CallUnavailable",
            "docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ],
            "args": [
              "Tuple:U32U32",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_type_name": [
              "TaskAddress\u003cBlockNumber\u003e",
              "Option\u003cTaskName\u003e"
            ]
          },
          {
            "lookup": "1f04",
            "name": "PeriodicFailed",
            "docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ],
            "args": [
              "Tuple:U32U32",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_type_name": [
              "TaskAddress\u003cBlockNumber\u003e",
              "Option\u003cTaskName\u003e"
            ]
          },
          {
            "lookup": "1f05",
            "name": "PermanentlyOverweight",
            "docs": [
              "The given task can never be executed since it is overweight."
            ],
            "args": [
              "Tuple:U32U32",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_type_name": [
              "TaskAddress\u003cBlockNumber\u003e",
              "Option\u003cTaskName\u003e"
            ]
          }
        ],
        "events_value": {
          "type": 89
        },
        "constants": [
          {
            "name": "MaximumWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "0b00806e87740113cccccccccccccccc",
            "docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "name": "MaxScheduledPerBlock",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum number of scheduled calls in the queue for a single block.",
              "",
              " NOTE:",
              " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
              " higher limit under `runtime-benchmarks` feature."
            ]
          }
        ],
        "errors": [
          {
            "name": "FailedToSchedule",
            "doc": [
              "Failed to schedule a call"
            ]
          },
          {
            "name": "NotFound",
            "doc": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "name": "TargetBlockNumberInPast",
            "doc": [
              "Given target block number is in the past."
            ]
          },
          {
            "name": "RescheduleNoChange",
            "doc": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "name": "Named",
            "doc": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "errors_value": {
          "type": 602
        },
        "index": 31
      },
      {
        "name": "Glutton",
        "prefix": "Glutton",
        "storage": [
          {
            "name": "Compute",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 47
            },
            "fallback": "0x00000000",
            "docs": [
              " Storage value used to specify what percentage of the left over `ref_time`",
              " to consume during `on_idle`."
            ]
          },
          {
            "name": "Storage",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 47
            },
            "fallback": "0x00000000",
            "docs": [
              " Storage value used the specify what percentage of left over `proof_size`",
              " to consume during `on_idle`."
            ]
          },
          {
            "name": "TrashData",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "[U8; 1024]",
                "keys_id": 4,
                "value_id": 603
              }
            },
            "fallback": "0x00",
            "docs": [
              " Storage map used for wasting proof size.",
              "",
              " It contains no meaningful data - hence the name \"Trash\". The maximal number of entries is",
              " set to 65k, which is just below the next jump at 16^4. This is important to reduce the proof",
              " size benchmarking overestimate. The assumption here is that we won't have more than 65k *",
              " 1KiB = 65MiB of proof size wasting in practice. However, this limit is not enforced, so the",
              " pallet would also work out of the box with more entries, but its benchmarked proof weight",
              " would possibly be underestimated in that case."
            ]
          },
          {
            "name": "TrashDataCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The current number of entries in `TrashData`."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2000",
            "name": "initialize_pallet",
            "docs": [
              "Initializes the pallet by writing into `TrashData`.",
              "",
              "Only callable by Root. A good default for `trash_count` is `5_000`."
            ],
            "args": [
              {
                "name": "new_count",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "witness_count",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cu32\u003e"
              }
            ]
          },
          {
            "lookup": "2001",
            "name": "set_compute",
            "docs": [
              "Set the `Compute` storage value that determines how much of the",
              "block's weight `ref_time` to use during `on_idle`.",
              "",
              "Only callable by Root."
            ],
            "args": [
              {
                "name": "compute",
                "type": "U32",
                "type_name": "Perbill"
              }
            ]
          },
          {
            "lookup": "2002",
            "name": "set_storage",
            "docs": [
              "Set the `Storage` storage value that determines the PoV size usage",
              "for each block.",
              "",
              "Only callable by Root."
            ],
            "args": [
              {
                "name": "storage",
                "type": "U32",
                "type_name": "Perbill"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 313
        },
        "events": [
          {
            "lookup": "2000",
            "name": "PalletInitialized",
            "docs": [
              "The pallet has been (re)initialized by root."
            ],
            "args": [
              "Bool"
            ],
            "args_type_name": [
              "bool"
            ]
          },
          {
            "lookup": "2001",
            "name": "ComputationLimitSet",
            "docs": [
              "The computation limit has been updated by root."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "Perbill"
            ]
          },
          {
            "lookup": "2002",
            "name": "StorageLimitSet",
            "docs": [
              "The storage limit has been updated by root."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "Perbill"
            ]
          }
        ],
        "events_value": {
          "type": 92
        },
        "errors": [
          {
            "name": "AlreadyInitialized",
            "doc": [
              "The pallet was already initialized.",
              "",
              "Set `witness_count` to `Some` to bypass this error."
            ]
          }
        ],
        "errors_value": {
          "type": 604
        },
        "index": 32
      },
      {
        "name": "Preimage",
        "prefix": "Preimage",
        "storage": [
          {
            "name": "StatusFor",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_preimage:RequestStatus",
                "keys_id": 12,
                "value_id": 605
              }
            },
            "fallback": "0x00",
            "docs": [
              " The request status of a given hash."
            ]
          },
          {
            "name": "PreimageFor",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256",
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 607,
                "value_id": 608
              }
            },
            "fallback": "0x00",
            "docs": null
          }
        ],
        "calls": [
          {
            "lookup": "2100",
            "name": "note_preimage",
            "docs": [
              "Register a preimage on-chain.",
              "",
              "If the preimage was previously requested, no fees or deposits are taken for providing",
              "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
            ],
            "args": [
              {
                "name": "bytes",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "2101",
            "name": "unnote_preimage",
            "docs": [
              "Clear an unrequested preimage from the runtime storage.",
              "",
              "If `len` is provided, then it will be a much cheaper operation.",
              "",
              "- `hash`: The hash of the preimage to be removed from the store.",
              "- `len`: The length of the preimage of `hash`."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "2102",
            "name": "request_preimage",
            "docs": [
              "Request a preimage be uploaded to the chain without paying any fees or deposits.",
              "",
              "If the preimage requests has already been provided on-chain, we unreserve any deposit",
              "a user may have paid, and take the control of the preimage out of their hands."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "2103",
            "name": "unrequest_preimage",
            "docs": [
              "Clear a previously made request for a preimage.",
              "",
              "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 314
        },
        "events": [
          {
            "lookup": "2100",
            "name": "Noted",
            "docs": [
              "A preimage has been noted."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "2101",
            "name": "Requested",
            "docs": [
              "A preimage has been requested."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "2102",
            "name": "Cleared",
            "docs": [
              "A preimage has ben cleared."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          }
        ],
        "events_value": {
          "type": 93
        },
        "errors": [
          {
            "name": "TooBig",
            "doc": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "name": "AlreadyNoted",
            "doc": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "name": "NotAuthorized",
            "doc": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "name": "NotNoted",
            "doc": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "name": "Requested",
            "doc": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "name": "NotRequested",
            "doc": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          }
        ],
        "errors_value": {
          "type": 609
        },
        "index": 33
      },
      {
        "name": "Proxy",
        "prefix": "Proxy",
        "storage": [
          {
            "name": "Proxies",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@611U128",
                "keys_id": 0,
                "value_id": 610
              }
            },
            "fallback": "0x0000000000000000000000000000000000",
            "docs": [
              " The set of account proxies. Maps the account which has delegated to the accounts",
              " which are being delegated to, together with the amount held on deposit."
            ]
          },
          {
            "name": "Announcements",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@615U128",
                "keys_id": 0,
                "value_id": 614
              }
            },
            "fallback": "0x0000000000000000000000000000000000",
            "docs": [
              " The announcements made by the proxy (key)."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2200",
            "name": "proxy",
            "docs": [
              "Dispatch the given `call` from an account that the sender is authorised for through",
              "`add_proxy`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ],
            "args": [
              {
                "name": "real",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "force_proxy_type",
                "type": "option\u003ckitchensink_runtime:ProxyType\u003e",
                "type_name": "Option\u003cProxyType\u003e"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "2201",
            "name": "add_proxy",
            "docs": [
              "Register a proxy account for the sender that is able to make calls on its behalf.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to make a proxy.",
              "- `proxy_type`: The permissions allowed for this proxy account.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero."
            ],
            "args": [
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "proxy_type",
                "type": "kitchensink_runtime:ProxyType",
                "type_name": "ProxyType"
              },
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumber"
              }
            ]
          },
          {
            "lookup": "2202",
            "name": "remove_proxy",
            "docs": [
              "Unregister a proxy account for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to remove as a proxy.",
              "- `proxy_type`: The permissions currently enabled for the removed proxy account."
            ],
            "args": [
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "proxy_type",
                "type": "kitchensink_runtime:ProxyType",
                "type_name": "ProxyType"
              },
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumber"
              }
            ]
          },
          {
            "lookup": "2203",
            "name": "remove_proxies",
            "docs": [
              "Unregister all proxy accounts for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "WARNING: This may be called on accounts created by `pure`, however if done, then",
              "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
            ],
            "args": null
          },
          {
            "lookup": "2204",
            "name": "create_pure",
            "docs": [
              "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
              "initialize it with a proxy of `proxy_type` for `origin` sender.",
              "",
              "Requires a `Signed` origin.",
              "",
              "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
              "new account. This will almost always be the most permissive `ProxyType` possible to",
              "allow for maximum flexibility.",
              "- `index`: A disambiguation index, in case this is called multiple times in the same",
              "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
              "want to use `0`.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero.",
              "",
              "Fails with `Duplicate` if this has already been called in this transaction, from the",
              "same sender, with the same parameters.",
              "",
              "Fails if there are insufficient funds to pay for deposit."
            ],
            "args": [
              {
                "name": "proxy_type",
                "type": "kitchensink_runtime:ProxyType",
                "type_name": "ProxyType"
              },
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumber"
              },
              {
                "name": "index",
                "type": "U16",
                "type_name": "u16"
              }
            ]
          },
          {
            "lookup": "2205",
            "name": "kill_pure",
            "docs": [
              "Removes a previously spawned pure proxy.",
              "",
              "WARNING: **All access to this account will be lost.** Any funds held in it will be",
              "inaccessible.",
              "",
              "Requires a `Signed` origin, and the sender account must have been created by a call to",
              "`pure` with corresponding parameters.",
              "",
              "- `spawner`: The account that originally called `pure` to create this account.",
              "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
              "- `proxy_type`: The proxy type originally passed to `pure`.",
              "- `height`: The height of the chain when the call to `pure` was processed.",
              "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
              "",
              "Fails with `NoPermission` in case the caller is not a previously created pure",
              "account whose `pure` call has corresponding parameters."
            ],
            "args": [
              {
                "name": "spawner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "proxy_type",
                "type": "kitchensink_runtime:ProxyType",
                "type_name": "ProxyType"
              },
              {
                "name": "index",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "height",
                "type": "compact\u003cU32\u003e",
                "type_name": "BlockNumber"
              },
              {
                "name": "ext_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2206",
            "name": "announce",
            "docs": [
              "Publish the hash of a proxy-call that will be made in the future.",
              "",
              "This must be called some number of blocks before the corresponding `proxy` is attempted",
              "if the delay associated with the proxy relationship is greater than zero.",
              "",
              "No more than `MaxPending` announcements may be made at any one time.",
              "",
              "This will take a deposit of `AnnouncementDepositFactor` as well as",
              "`AnnouncementDepositBase` if there are no other pending announcements.",
              "",
              "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ],
            "args": [
              {
                "name": "real",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "CallHashOf"
              }
            ]
          },
          {
            "lookup": "2207",
            "name": "remove_announcement",
            "docs": [
              "Remove a given announcement.",
              "",
              "May be called by a proxy account to remove a call they previously announced and return",
              "the deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ],
            "args": [
              {
                "name": "real",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "CallHashOf"
              }
            ]
          },
          {
            "lookup": "2208",
            "name": "reject_announcement",
            "docs": [
              "Remove the given announcement of a delegate.",
              "",
              "May be called by a target (proxied) account to remove a call that one of their delegates",
              "(`delegate`) has announced they want to execute. The deposit is returned.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `delegate`: The account that previously announced the call.",
              "- `call_hash`: The hash of the call to be made."
            ],
            "args": [
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "CallHashOf"
              }
            ]
          },
          {
            "lookup": "2209",
            "name": "proxy_announced",
            "docs": [
              "Dispatch the given `call` from an account that the sender is authorized for through",
              "`add_proxy`.",
              "",
              "Removes any corresponding announcement(s).",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ],
            "args": [
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "real",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "force_proxy_type",
                "type": "option\u003ckitchensink_runtime:ProxyType\u003e",
                "type_name": "Option\u003cProxyType\u003e"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 315
        },
        "events": [
          {
            "lookup": "2200",
            "name": "ProxyExecuted",
            "docs": [
              "A proxy was executed correctly, with the given."
            ],
            "args": [
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "DispatchResult"
            ]
          },
          {
            "lookup": "2201",
            "name": "PureCreated",
            "docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "kitchensink_runtime:ProxyType",
              "U16"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "ProxyType",
              "u16"
            ]
          },
          {
            "lookup": "2202",
            "name": "Announced",
            "docs": [
              "An announcement was placed to make a call in the future."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "H256"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "CallHashOf"
            ]
          },
          {
            "lookup": "2203",
            "name": "ProxyAdded",
            "docs": [
              "A proxy was added."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "kitchensink_runtime:ProxyType",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "ProxyType",
              "BlockNumber"
            ]
          },
          {
            "lookup": "2204",
            "name": "ProxyRemoved",
            "docs": [
              "A proxy was removed."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "kitchensink_runtime:ProxyType",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "ProxyType",
              "BlockNumber"
            ]
          }
        ],
        "events_value": {
          "type": 94
        },
        "constants": [
          {
            "name": "ProxyDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00f09e544c3900000000000000000000",
            "docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "name": "ProxyDepositFactor",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0060aa7714b400000000000000000000",
            "docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "name": "MaxProxies",
            "type": "U32",
            "type_value": 4,
            "constants_value": "20000000",
            "docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "name": "MaxPending",
            "type": "U32",
            "type_value": 4,
            "constants_value": "20000000",
            "docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "name": "AnnouncementDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00f09e544c3900000000000000000000",
            "docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "name": "AnnouncementDepositFactor",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00c054ef286801000000000000000000",
            "docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "errors": [
          {
            "name": "TooMany",
            "doc": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "name": "NotFound",
            "doc": [
              "Proxy registration not found."
            ]
          },
          {
            "name": "NotProxy",
            "doc": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "name": "Unproxyable",
            "doc": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "name": "Duplicate",
            "doc": [
              "Account is already a proxy."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "name": "Unannounced",
            "doc": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "name": "NoSelfProxy",
            "doc": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "errors_value": {
          "type": 618
        },
        "index": 34
      },
      {
        "name": "Multisig",
        "prefix": "Multisig",
        "storage": [
          {
            "name": "Multisigs",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "[U8; 32]"
                ],
                "value": "pallet_multisig:Multisig",
                "keys_id": 619,
                "value_id": 620
              }
            },
            "fallback": "0x00",
            "docs": [
              " The set of open multisig operations."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2300",
            "name": "as_multi_threshold_1",
            "docs": [
              "Immediately dispatch a multi-signature call using a single approval from the caller.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `other_signatories`: The accounts (other than the sender) who are part of the",
              "multi-signature, but do not participate in the approval process.",
              "- `call`: The call to be executed.",
              "",
              "Result is equivalent to the dispatched result.",
              "",
              "## Complexity",
              "O(Z + C) where Z is the length of the call and C its execution weight."
            ],
            "args": [
              {
                "name": "other_signatories",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "2301",
            "name": "as_multi",
            "docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "If there are enough, then dispatch the call.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call`: The call to be executed.",
              "",
              "NOTE: Unless this is the final approval, you will generally want to use",
              "`approve_as_multi` instead, since it only requires a hash of the call.",
              "",
              "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
              "on success, result is `Ok` and the result from the interior call, if it was executed,",
              "may be found in the deposited `MultisigExecuted` event.",
              "",
              "## Complexity",
              "- `O(S + Z + Call)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One call encode \u0026 hash, both of complexity `O(Z)` where `Z` is tx-len.",
              "- One encode \u0026 hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- The weight of the `call`.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ],
            "args": [
              {
                "name": "threshold",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "other_signatories",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "maybe_timepoint",
                "type": "option\u003cpallet_multisig:Timepoint\u003e",
                "type_name": "Option\u003cTimepoint\u003cBlockNumber\u003e\u003e"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              },
              {
                "name": "max_weight",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          },
          {
            "lookup": "2302",
            "name": "approve_as_multi",
            "docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode \u0026 hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ],
            "args": [
              {
                "name": "threshold",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "other_signatories",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "maybe_timepoint",
                "type": "option\u003cpallet_multisig:Timepoint\u003e",
                "type_name": "Option\u003cTimepoint\u003cBlockNumber\u003e\u003e"
              },
              {
                "name": "call_hash",
                "type": "[U8; 32]",
                "type_name": "[u8; 32]"
              },
              {
                "name": "max_weight",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          },
          {
            "lookup": "2303",
            "name": "cancel_as_multi",
            "docs": [
              "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
              "for this operation will be unreserved on success.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
              "transaction for this dispatch.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode \u0026 hash, both of complexity `O(S)`.",
              "- One event.",
              "- I/O: 1 read `O(S)`, one remove.",
              "- Storage: removes one item."
            ],
            "args": [
              {
                "name": "threshold",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "other_signatories",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "timepoint",
                "type": "pallet_multisig:Timepoint",
                "type_name": "Timepoint\u003cBlockNumber\u003e"
              },
              {
                "name": "call_hash",
                "type": "[U8; 32]",
                "type_name": "[u8; 32]"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 317
        },
        "events": [
          {
            "lookup": "2300",
            "name": "NewMultisig",
            "docs": [
              "A new multisig operation has begun."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "CallHash"
            ]
          },
          {
            "lookup": "2301",
            "name": "MultisigApproval",
            "docs": [
              "A multisig operation has been approved by someone."
            ],
            "args": [
              "[U8; 32]",
              "pallet_multisig:Timepoint",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "Timepoint\u003cBlockNumber\u003e",
              "AccountId",
              "CallHash"
            ]
          },
          {
            "lookup": "2302",
            "name": "MultisigExecuted",
            "docs": [
              "A multisig operation has been executed."
            ],
            "args": [
              "[U8; 32]",
              "pallet_multisig:Timepoint",
              "[U8; 32]",
              "[U8; 32]",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "AccountId",
              "Timepoint\u003cBlockNumber\u003e",
              "AccountId",
              "CallHash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "2303",
            "name": "MultisigCancelled",
            "docs": [
              "A multisig operation has been cancelled."
            ],
            "args": [
              "[U8; 32]",
              "pallet_multisig:Timepoint",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "Timepoint\u003cBlockNumber\u003e",
              "AccountId",
              "CallHash"
            ]
          }
        ],
        "events_value": {
          "type": 97
        },
        "constants": [
          {
            "name": "DepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00f01c0adbed01000000000000000000",
            "docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "name": "DepositFactor",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000cc7b9fae00000000000000000000",
            "docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "name": "MaxSignatories",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "errors": [
          {
            "name": "MinimumThreshold",
            "doc": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "name": "AlreadyApproved",
            "doc": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "name": "NoApprovalsNeeded",
            "doc": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "name": "TooFewSignatories",
            "doc": [
              "There are too few signatories in the list."
            ]
          },
          {
            "name": "TooManySignatories",
            "doc": [
              "There are too many signatories in the list."
            ]
          },
          {
            "name": "SignatoriesOutOfOrder",
            "doc": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "name": "SenderInSignatories",
            "doc": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "name": "NotFound",
            "doc": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "name": "NotOwner",
            "doc": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "name": "NoTimepoint",
            "doc": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "name": "WrongTimepoint",
            "doc": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "name": "UnexpectedTimepoint",
            "doc": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "name": "MaxWeightTooLow",
            "doc": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "name": "AlreadyStored",
            "doc": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "errors_value": {
          "type": 621
        },
        "index": 35
      },
      {
        "name": "Bounties",
        "prefix": "Bounties",
        "storage": [
          {
            "name": "BountyCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Number of bounty proposals that have been made."
            ]
          },
          {
            "name": "Bounties",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_bounties:Bounty",
                "keys_id": 4,
                "value_id": 622
              }
            },
            "fallback": "0x00",
            "docs": [
              " Bounties that have been made."
            ]
          },
          {
            "name": "BountyDescriptions",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 624
              }
            },
            "fallback": "0x00",
            "docs": [
              " The description of each bounty."
            ]
          },
          {
            "name": "BountyApprovals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU32\u003e",
              "PlainTypeValue": 538
            },
            "fallback": "0x00",
            "docs": [
              " Bounty indices that have been approved but not yet funded."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2400",
            "name": "propose_bounty",
            "docs": [
              "Propose a new bounty.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
              "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
              "or slashed when rejected.",
              "",
              "- `curator`: The curator account whom will manage this bounty.",
              "- `fee`: The curator fee.",
              "- `value`: The total payment amount of this bounty, curator fee included.",
              "- `description`: The description of this bounty."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "description",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "2401",
            "name": "approve_bounty",
            "docs": [
              "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
              "and the original deposit will be returned.",
              "",
              "May only be called from `T::SpendOrigin`.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "2402",
            "name": "propose_curator",
            "docs": [
              "Assign a curator to a funded bounty.",
              "",
              "May only be called from `T::SpendOrigin`.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "curator",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "fee",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "2403",
            "name": "unassign_curator",
            "docs": [
              "Unassign curator from a bounty.",
              "",
              "This function can only be called by the `RejectOrigin` a signed origin.",
              "",
              "If this function is called by the `RejectOrigin`, we assume that the curator is",
              "malicious or inactive. As a result, we will slash the curator when possible.",
              "",
              "If the origin is the curator, we take this as a sign they are unable to do their job and",
              "they willingly give up. We could slash them, but for now we allow them to recover their",
              "deposit and exit without issue. (We may want to change this if it is abused.)",
              "",
              "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
              "anyone in the community to call out that a curator is not doing their due diligence, and",
              "we should pick a new curator. In this case the curator should also be slashed.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "2404",
            "name": "accept_curator",
            "docs": [
              "Accept the curator role for a bounty.",
              "A deposit will be reserved from curator and refund upon successful payout.",
              "",
              "May only be called from the curator.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "2405",
            "name": "award_bounty",
            "docs": [
              "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
              "after a delay.",
              "",
              "The dispatch origin for this call must be the curator of this bounty.",
              "",
              "- `bounty_id`: Bounty ID to award.",
              "- `beneficiary`: The beneficiary account whom will receive the payout.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2406",
            "name": "claim_bounty",
            "docs": [
              "Claim the payout from an awarded bounty after payout delay.",
              "",
              "The dispatch origin for this call must be the beneficiary of this bounty.",
              "",
              "- `bounty_id`: Bounty ID to claim.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "2407",
            "name": "close_bounty",
            "docs": [
              "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
              "the curator deposit will be unreserved if possible.",
              "",
              "Only `T::RejectOrigin` is able to cancel a bounty.",
              "",
              "- `bounty_id`: Bounty ID to cancel.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "2408",
            "name": "extend_bounty_expiry",
            "docs": [
              "Extend the expiry time of an active bounty.",
              "",
              "The dispatch origin for this call must be the curator of this bounty.",
              "",
              "- `bounty_id`: Bounty ID to extend.",
              "- `remark`: additional information.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "remark",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 319
        },
        "events": [
          {
            "lookup": "2400",
            "name": "BountyProposed",
            "docs": [
              "New bounty proposal."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "BountyIndex"
            ]
          },
          {
            "lookup": "2401",
            "name": "BountyRejected",
            "docs": [
              "A bounty proposal was rejected; funds were slashed."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_type_name": [
              "BountyIndex",
              "BalanceOf"
            ]
          },
          {
            "lookup": "2402",
            "name": "BountyBecameActive",
            "docs": [
              "A bounty proposal is funded and became active."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "BountyIndex"
            ]
          },
          {
            "lookup": "2403",
            "name": "BountyAwarded",
            "docs": [
              "A bounty is awarded to a beneficiary."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "BountyIndex",
              "AccountId"
            ]
          },
          {
            "lookup": "2404",
            "name": "BountyClaimed",
            "docs": [
              "A bounty is claimed by beneficiary."
            ],
            "args": [
              "U32",
              "U128",
              "[U8; 32]"
            ],
            "args_type_name": [
              "BountyIndex",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "2405",
            "name": "BountyCanceled",
            "docs": [
              "A bounty is cancelled."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "BountyIndex"
            ]
          },
          {
            "lookup": "2406",
            "name": "BountyExtended",
            "docs": [
              "A bounty expiry is extended."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "BountyIndex"
            ]
          }
        ],
        "events_value": {
          "type": 99
        },
        "constants": [
          {
            "name": "BountyDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The amount held on deposit for placing a bounty proposal."
            ]
          },
          {
            "name": "BountyDepositPayoutDelay",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80700000",
            "docs": [
              " The delay period for which a bounty beneficiary need to wait before claim the payout."
            ]
          },
          {
            "name": "BountyUpdatePeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00270600",
            "docs": [
              " Bounty duration in blocks."
            ]
          },
          {
            "name": "CuratorDepositMultiplier",
            "type": "U32",
            "type_value": 539,
            "constants_value": "20a10700",
            "docs": [
              " The curator deposit is calculated as a percentage of the curator fee.",
              "",
              " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
              " `CuratorDepositMin`."
            ]
          },
          {
            "name": "CuratorDepositMax",
            "type": "option\u003cU128\u003e",
            "type_value": 328,
            "constants_value": "010000c16ff28623000000000000000000",
            "docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "name": "CuratorDepositMin",
            "type": "option\u003cU128\u003e",
            "type_value": 328,
            "constants_value": "0100407a10f35a00000000000000000000",
            "docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "name": "BountyValueMinimum",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00406352bfc601000000000000000000",
            "docs": [
              " Minimum value for a bounty."
            ]
          },
          {
            "name": "DataDepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0010a5d4e80000000000000000000000",
            "docs": [
              " The amount held on deposit per byte within the tip report reason or bounty description."
            ]
          },
          {
            "name": "MaximumReasonLength",
            "type": "U32",
            "type_value": 4,
            "constants_value": "2c010000",
            "docs": [
              " Maximum acceptable reason length.",
              "",
              " Benchmarks depend on this value, be sure to update weights file when changing this value"
            ]
          }
        ],
        "errors": [
          {
            "name": "InsufficientProposersBalance",
            "doc": [
              "Proposer's balance is too low."
            ]
          },
          {
            "name": "InvalidIndex",
            "doc": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "name": "ReasonTooBig",
            "doc": [
              "The reason given is just too big."
            ]
          },
          {
            "name": "UnexpectedStatus",
            "doc": [
              "The bounty status is unexpected."
            ]
          },
          {
            "name": "RequireCurator",
            "doc": [
              "Require bounty curator."
            ]
          },
          {
            "name": "InvalidValue",
            "doc": [
              "Invalid bounty value."
            ]
          },
          {
            "name": "InvalidFee",
            "doc": [
              "Invalid bounty fee."
            ]
          },
          {
            "name": "PendingPayout",
            "doc": [
              "A bounty payout is pending.",
              "To cancel the bounty, you must unassign and slash the curator."
            ]
          },
          {
            "name": "Premature",
            "doc": [
              "The bounties cannot be claimed/closed because it's still in the countdown period."
            ]
          },
          {
            "name": "HasActiveChildBounty",
            "doc": [
              "The bounty cannot be closed because it has active child bounties."
            ]
          },
          {
            "name": "TooManyQueued",
            "doc": [
              "Too many approvals are already queued."
            ]
          }
        ],
        "errors_value": {
          "type": 625
        },
        "index": 36
      },
      {
        "name": "Tips",
        "prefix": "Tips",
        "storage": [
          {
            "name": "Tips",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_tips:OpenTip",
                "keys_id": 12,
                "value_id": 626
              }
            },
            "fallback": "0x00",
            "docs": [
              " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
              " This has the insecure enumerable hash function since the key itself is already",
              " guaranteed to be a secure hash."
            ]
          },
          {
            "name": "Reasons",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 12,
                "value_id": 13
              }
            },
            "fallback": "0x00",
            "docs": [
              " Simple preimage lookup from the reason's hash to the original data. Again, has an",
              " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2500",
            "name": "report_awesome",
            "docs": [
              "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
              "`DataDepositPerByte` for each byte in `reason`.",
              "",
              "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
              "  a UTF-8-encoded URL.",
              "- `who`: The account which should be credited for the tip.",
              "",
              "Emits `NewTip` if successful.",
              "",
              "## Complexity",
              "- `O(R)` where `R` length of `reason`.",
              "  - encoding and hashing of 'reason'"
            ],
            "args": [
              {
                "name": "reason",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2501",
            "name": "retract_tip",
            "docs": [
              "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
              "",
              "If successful, the original deposit will be unreserved.",
              "",
              "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
              "must have been reported by the signing account through `report_awesome` (and not",
              "through `tip_new`).",
              "",
              "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
              "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
              "",
              "Emits `TipRetracted` if successful.",
              "",
              "## Complexity",
              "- `O(1)`",
              "  - Depends on the length of `T::Hash` which is fixed."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "2502",
            "name": "tip_new",
            "docs": [
              "Give a tip for something new; no finder's fee will be taken.",
              "",
              "The dispatch origin for this call must be _Signed_ and the signing account must be a",
              "member of the `Tippers` set.",
              "",
              "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
              "  a UTF-8-encoded URL.",
              "- `who`: The account which should be credited for the tip.",
              "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
              "  value of active tippers will be given to the `who`.",
              "",
              "Emits `NewTip` if successful.",
              "",
              "## Complexity",
              "- `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
              "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
              "    `ContainsLengthBound`. The actual cost depends on the implementation of",
              "    `T::Tippers`.",
              "  - `O(R)`: hashing and encoding of reason of length `R`"
            ],
            "args": [
              {
                "name": "reason",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "tip_value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "2503",
            "name": "tip",
            "docs": [
              "Declare a tip value for an already-open tip.",
              "",
              "The dispatch origin for this call must be _Signed_ and the signing account must be a",
              "member of the `Tippers` set.",
              "",
              "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
              "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
              "  account ID.",
              "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
              "  value of active tippers will be given to the `who`.",
              "",
              "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
              "has started.",
              "",
              "## Complexity",
              "- `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length `T`, insert",
              "  tip and check closing, `T` is charged as upper bound given by `ContainsLengthBound`.",
              "  The actual cost depends on the implementation of `T::Tippers`.",
              "",
              "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
              "  is weighted as if almost full i.e of length `T-1`."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "tip_value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "2504",
            "name": "close_tip",
            "docs": [
              "Close and payout a tip.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "The tip identified by `hash` must have finished its countdown period.",
              "",
              "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
              "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
              "",
              "## Complexity",
              "- : `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length `T`. `T`",
              "  is charged as upper bound given by `ContainsLengthBound`. The actual cost depends on",
              "  the implementation of `T::Tippers`."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "2505",
            "name": "slash_tip",
            "docs": [
              "Remove and slash an already-open tip.",
              "",
              "May only be called from `T::RejectOrigin`.",
              "",
              "As a result, the finder is slashed and the deposits are lost.",
              "",
              "Emits `TipSlashed` if successful.",
              "",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 320
        },
        "events": [
          {
            "lookup": "2500",
            "name": "NewTip",
            "docs": [
              "A new tip suggestion has been opened."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "2501",
            "name": "TipClosing",
            "docs": [
              "A tip suggestion has reached threshold and is closing."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "2502",
            "name": "TipClosed",
            "docs": [
              "A tip suggestion has been closed."
            ],
            "args": [
              "H256",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "Hash",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "2503",
            "name": "TipRetracted",
            "docs": [
              "A tip suggestion has been retracted."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "2504",
            "name": "TipSlashed",
            "docs": [
              "A tip suggestion has been slashed."
            ],
            "args": [
              "H256",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "Hash",
              "AccountId",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 100
        },
        "constants": [
          {
            "name": "MaximumReasonLength",
            "type": "U32",
            "type_value": 4,
            "constants_value": "2c010000",
            "docs": [
              " Maximum acceptable reason length.",
              "",
              " Benchmarks depend on this value, be sure to update weights file when changing this value"
            ]
          },
          {
            "name": "DataDepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0010a5d4e80000000000000000000000",
            "docs": [
              " The amount held on deposit per byte within the tip report reason or bounty description."
            ]
          },
          {
            "name": "TipCountdown",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80700000",
            "docs": [
              " The period for which a tip remains open after is has achieved threshold tippers."
            ]
          },
          {
            "name": "TipFindersFee",
            "type": "U8",
            "type_value": 223,
            "constants_value": "14",
            "docs": [
              " The percent of the final tip which goes to the original reporter of the tip."
            ]
          },
          {
            "name": "TipReportDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The amount held on deposit for placing a tip report."
            ]
          }
        ],
        "errors": [
          {
            "name": "ReasonTooBig",
            "doc": [
              "The reason given is just too big."
            ]
          },
          {
            "name": "AlreadyKnown",
            "doc": [
              "The tip was already found/started."
            ]
          },
          {
            "name": "UnknownTip",
            "doc": [
              "The tip hash is unknown."
            ]
          },
          {
            "name": "NotFinder",
            "doc": [
              "The account attempting to retract the tip is not the finder of the tip."
            ]
          },
          {
            "name": "StillOpen",
            "doc": [
              "The tip cannot be claimed/closed because there are not enough tippers yet."
            ]
          },
          {
            "name": "Premature",
            "doc": [
              "The tip cannot be claimed/closed because it's still in the countdown period."
            ]
          }
        ],
        "errors_value": {
          "type": 627
        },
        "index": 37
      },
      {
        "name": "Assets",
        "prefix": "Assets",
        "storage": [
          {
            "name": "Asset",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_assets:types:AssetDetails",
                "keys_id": 4,
                "value_id": 628
              }
            },
            "fallback": "0x00",
            "docs": [
              " Details of an asset."
            ]
          },
          {
            "name": "Account",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_assets:types:AssetAccount",
                "keys_id": 487,
                "value_id": 630
              }
            },
            "fallback": "0x00",
            "docs": [
              " The holdings of a specific account for a specific asset."
            ]
          },
          {
            "name": "Approvals",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]",
                  "[U8; 32]"
                ],
                "value": "pallet_assets:types:Approval",
                "keys_id": 632,
                "value_id": 633
              }
            },
            "fallback": "0x00",
            "docs": [
              " Approved balance transfers. First balance is the amount approved for transfer. Second",
              " is the amount of `T::Currency` reserved for storing this.",
              " First key is the asset ID, second key is the owner and third key is the delegate."
            ]
          },
          {
            "name": "Metadata",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_assets:types:AssetMetadata",
                "keys_id": 4,
                "value_id": 634
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000",
            "docs": [
              " Metadata of an asset."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2600",
            "name": "create",
            "docs": [
              "Issue a new class of fungible assets from a public origin.",
              "",
              "This new asset class has no assets initially and its owner is the origin.",
              "",
              "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
              "",
              "Funds of sender are reserved by `AssetDeposit`.",
              "",
              "Parameters:",
              "- `id`: The identifier of the new asset. This must not be currently in use to identify",
              "an existing asset.",
              "- `admin`: The admin of this class of assets. The admin is the initial address of each",
              "member of the asset class's admin team.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "",
              "Emits `Created` event when successful.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "min_balance",
                "type": "U128",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2601",
            "name": "force_create",
            "docs": [
              "Issue a new class of fungible assets from a privileged origin.",
              "",
              "This new asset class has no assets initially.",
              "",
              "The origin must conform to `ForceOrigin`.",
              "",
              "Unlike `create`, no funds are reserved.",
              "",
              "- `id`: The identifier of the new asset. This must not be currently in use to identify",
              "an existing asset.",
              "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
              "over this asset, but may later change and configure the permissions using",
              "`transfer_ownership` and `set_team`.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "",
              "Emits `ForceCreated` event when successful.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "is_sufficient",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "min_balance",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2602",
            "name": "start_destroy",
            "docs": [
              "Start the process of destroying a fungible asset class.",
              "",
              "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
              "destruction of an asset class.",
              "",
              "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "The asset class must be frozen before calling `start_destroy`."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2603",
            "name": "destroy_accounts",
            "docs": [
              "Destroy all accounts associated with a given asset.",
              "",
              "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state.",
              "",
              "Due to weight restrictions, this function may need to be called multiple times to fully",
              "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each call emits the `Event::DestroyedAccounts` event."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2604",
            "name": "destroy_approvals",
            "docs": [
              "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
              "",
              "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state.",
              "",
              "Due to weight restrictions, this function may need to be called multiple times to fully",
              "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each call emits the `Event::DestroyedApprovals` event."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2605",
            "name": "finish_destroy",
            "docs": [
              "Complete destroying asset and unreserve currency.",
              "",
              "`finish_destroy` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
              "hand.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each successful call emits the `Event::Destroyed` event."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2606",
            "name": "mint",
            "docs": [
              "Mint assets of a particular class.",
              "",
              "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to have some amount minted.",
              "- `beneficiary`: The account to be credited with the minted assets.",
              "- `amount`: The amount of the asset to be minted.",
              "",
              "Emits `Issued` event when successful.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2607",
            "name": "burn",
            "docs": [
              "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
              "",
              "Origin must be Signed and the sender should be the Manager of the asset `id`.",
              "",
              "Bails with `NoAccount` if the `who` is already dead.",
              "",
              "- `id`: The identifier of the asset to have some amount burned.",
              "- `who`: The account to be debited from.",
              "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
              "",
              "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
              "minimum for the asset, then the amount burned is increased to take it to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Post-existence of `who`; Pre \u0026 post Zombie-status of `who`."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2608",
            "name": "transfer",
            "docs": [
              "Move some assets from the sender account to another.",
              "",
              "Origin must be Signed.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `target`: The account to be credited.",
              "- `amount`: The amount by which the sender's balance of assets should be reduced and",
              "`target`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the sender balance above zero but below",
              "the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
              "`target`."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2609",
            "name": "transfer_keep_alive",
            "docs": [
              "Move some assets from the sender account to another, keeping the sender account alive.",
              "",
              "Origin must be Signed.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `target`: The account to be credited.",
              "- `amount`: The amount by which the sender's balance of assets should be reduced and",
              "`target`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the sender balance above zero but below",
              "the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
              "`target`."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "260a",
            "name": "force_transfer",
            "docs": [
              "Move some assets from one account to another.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `source`: The account to be debited.",
              "- `dest`: The account to be credited.",
              "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
              "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the `source` balance above zero but",
              "below the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
              "`dest`."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "source",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "260b",
            "name": "freeze",
            "docs": [
              "Disallow further unprivileged transfers from an account.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `who`: The account to be frozen.",
              "",
              "Emits `Frozen`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "260c",
            "name": "thaw",
            "docs": [
              "Allow unprivileged transfers from an account again.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `who`: The account to be unfrozen.",
              "",
              "Emits `Thawed`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "260d",
            "name": "freeze_asset",
            "docs": [
              "Disallow further unprivileged transfers for the asset class.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "",
              "Emits `Frozen`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "260e",
            "name": "thaw_asset",
            "docs": [
              "Allow unprivileged transfers for the asset again.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be thawed.",
              "",
              "Emits `Thawed`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "260f",
            "name": "transfer_ownership",
            "docs": [
              "Change the Owner of an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The new Owner of this asset.",
              "",
              "Emits `OwnerChanged`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2610",
            "name": "set_team",
            "docs": [
              "Change the Issuer, Admin and Freezer of an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `issuer`: The new Issuer of this asset.",
              "- `admin`: The new Admin of this asset.",
              "- `freezer`: The new Freezer of this asset.",
              "",
              "Emits `TeamChanged`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "issuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "freezer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2611",
            "name": "set_metadata",
            "docs": [
              "Set the metadata for an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "Funds of sender are reserved according to the formula:",
              "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
              "account any already reserved funds.",
              "",
              "- `id`: The identifier of the asset to update.",
              "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
              "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
              "- `decimals`: The number of decimals this asset uses to represent one unit.",
              "",
              "Emits `MetadataSet`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "name",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "symbol",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "decimals",
                "type": "U8",
                "type_name": "u8"
              }
            ]
          },
          {
            "lookup": "2612",
            "name": "clear_metadata",
            "docs": [
              "Clear the metadata for an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "Any deposit is freed for the asset owner.",
              "",
              "- `id`: The identifier of the asset to clear.",
              "",
              "Emits `MetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2613",
            "name": "force_set_metadata",
            "docs": [
              "Force the metadata for an asset to some value.",
              "",
              "Origin must be ForceOrigin.",
              "",
              "Any deposit is left alone.",
              "",
              "- `id`: The identifier of the asset to update.",
              "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
              "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
              "- `decimals`: The number of decimals this asset uses to represent one unit.",
              "",
              "Emits `MetadataSet`.",
              "",
              "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "name",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "symbol",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "decimals",
                "type": "U8",
                "type_name": "u8"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2614",
            "name": "force_clear_metadata",
            "docs": [
              "Clear the metadata for an asset.",
              "",
              "Origin must be ForceOrigin.",
              "",
              "Any deposit is returned.",
              "",
              "- `id`: The identifier of the asset to clear.",
              "",
              "Emits `MetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2615",
            "name": "force_asset_status",
            "docs": [
              "Alter the attributes of a given asset.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The new Owner of this asset.",
              "- `issuer`: The new Issuer of this asset.",
              "- `admin`: The new Admin of this asset.",
              "- `freezer`: The new Freezer of this asset.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
              "value to account for the state bloat associated with its balance storage. If set to",
              "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
              "an ED in the Balances pallet or whatever else is used to control user-account state",
              "growth).",
              "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
              "instructions.",
              "",
              "Emits `AssetStatusChanged` with the identity of the asset.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "issuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "freezer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "min_balance",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              },
              {
                "name": "is_sufficient",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2616",
            "name": "approve_transfer",
            "docs": [
              "Approve an amount of asset for transfer by a delegated third-party account.",
              "",
              "Origin must be Signed.",
              "",
              "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
              "for the purpose of holding the approval. If some non-zero amount of assets is already",
              "approved from signing account to `delegate`, then it is topped up or unreserved to",
              "meet the right value.",
              "",
              "NOTE: The signing account does not need to own `amount` of assets at the point of",
              "making this call.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account to delegate permission to transfer asset.",
              "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
              "already an approval in place, then this acts additively.",
              "",
              "Emits `ApprovedTransfer` on success.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2617",
            "name": "cancel_approval",
            "docs": [
              "Cancel all of some asset approved for delegated transfer by a third-party account.",
              "",
              "Origin must be Signed and there must be an approval in place between signer and",
              "`delegate`.",
              "",
              "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account delegated permission to transfer asset.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2618",
            "name": "force_cancel_approval",
            "docs": [
              "Cancel all of some asset approved for delegated transfer by a third-party account.",
              "",
              "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
              "account of the asset `id`.",
              "",
              "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account delegated permission to transfer asset.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2619",
            "name": "transfer_approved",
            "docs": [
              "Transfer some asset balance from a previously delegated account to some third-party",
              "account.",
              "",
              "Origin must be Signed and there must be an approval in place by the `owner` to the",
              "signer.",
              "",
              "If the entire amount approved for transfer is transferred, then any deposit previously",
              "reserved by `approve_transfer` is unreserved.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The account which previously approved for a transfer of at least `amount` and",
              "from which the asset balance will be withdrawn.",
              "- `destination`: The account to which the asset balance of `amount` will be transferred.",
              "- `amount`: The amount of assets to transfer.",
              "",
              "Emits `TransferredApproved` on success.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "destination",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "261a",
            "name": "touch",
            "docs": [
              "Create an asset account for non-provider assets.",
              "",
              "A deposit will be taken from the signer account.",
              "",
              "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
              "  to be taken.",
              "- `id`: The identifier of the asset for the account to be created.",
              "",
              "Emits `Touched` event when successful."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "261b",
            "name": "refund",
            "docs": [
              "Return the deposit (if any) of an asset account.",
              "",
              "The origin must be Signed.",
              "",
              "- `id`: The identifier of the asset for the account to be created.",
              "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
              "",
              "Emits `Refunded` event when successful."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "allow_burn",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "261c",
            "name": "set_min_balance",
            "docs": [
              "Sets the minimum balance of an asset.",
              "",
              "Only works if there aren't any accounts that are holding the asset or if",
              "the new value of `min_balance` is less than the old one.",
              "",
              "Origin must be Signed and the sender has to be the Owner of the",
              "asset `id`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `min_balance`: The new value of `min_balance`.",
              "",
              "Emits `AssetMinBalanceChanged` event when successful."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "min_balance",
                "type": "U128",
                "type_name": "Balance"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 321
        },
        "events": [
          {
            "lookup": "2600",
            "name": "Created",
            "docs": [
              "Some asset class was created."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2601",
            "name": "Issued",
            "docs": [
              "Some assets were issued."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2602",
            "name": "Transferred",
            "docs": [
              "Some assets were transferred."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2603",
            "name": "Burned",
            "docs": [
              "Some assets were destroyed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2604",
            "name": "TeamChanged",
            "docs": [
              "The management team changed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2605",
            "name": "OwnerChanged",
            "docs": [
              "The owner changed."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "2606",
            "name": "Frozen",
            "docs": [
              "Some account `who` was frozen."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "2607",
            "name": "Thawed",
            "docs": [
              "Some account `who` was thawed."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "2608",
            "name": "AssetFrozen",
            "docs": [
              "Some asset `asset_id` was frozen."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "2609",
            "name": "AssetThawed",
            "docs": [
              "Some asset `asset_id` was thawed."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "260a",
            "name": "AccountsDestroyed",
            "docs": [
              "Accounts were destroyed for given asset."
            ],
            "args": [
              "U32",
              "U32",
              "U32"
            ],
            "args_type_name": [
              "AssetId",
              "u32",
              "u32"
            ]
          },
          {
            "lookup": "260b",
            "name": "ApprovalsDestroyed",
            "docs": [
              "Approvals were destroyed for given asset."
            ],
            "args": [
              "U32",
              "U32",
              "U32"
            ],
            "args_type_name": [
              "AssetId",
              "u32",
              "u32"
            ]
          },
          {
            "lookup": "260c",
            "name": "DestructionStarted",
            "docs": [
              "An asset class is in the process of being destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "260d",
            "name": "Destroyed",
            "docs": [
              "An asset class was destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "260e",
            "name": "ForceCreated",
            "docs": [
              "Some asset class was force-created."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "260f",
            "name": "MetadataSet",
            "docs": [
              "New metadata has been set for an asset."
            ],
            "args": [
              "U32",
              "Vec\u003cU8\u003e",
              "Vec\u003cU8\u003e",
              "U8",
              "Bool"
            ],
            "args_type_name": [
              "AssetId",
              "Bytes",
              "Bytes",
              "u8",
              "bool"
            ]
          },
          {
            "lookup": "2610",
            "name": "MetadataCleared",
            "docs": [
              "Metadata has been cleared for an asset."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "2611",
            "name": "ApprovedTransfer",
            "docs": [
              "(Additional) funds have been approved for transfer to a destination account."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2612",
            "name": "ApprovalCancelled",
            "docs": [
              "An approval for account `delegate` was cancelled by `owner`."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2613",
            "name": "TransferredApproved",
            "docs": [
              "An `amount` was transferred in its entirety from `owner` to `destination` by",
              "the approved `delegate`."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2614",
            "name": "AssetStatusChanged",
            "docs": [
              "An asset has had its attributes changed by the `Force` origin."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "2615",
            "name": "AssetMinBalanceChanged",
            "docs": [
              "The min_balance of an asset has been updated by the asset owner."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_type_name": [
              "AssetId",
              "Balance"
            ]
          }
        ],
        "events_value": {
          "type": 101
        },
        "constants": [
          {
            "name": "RemoveItemsLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "e8030000",
            "docs": [
              " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
              "",
              " Must be configured to result in a weight that makes each call fit in a block."
            ]
          },
          {
            "name": "AssetDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved for an asset."
            ]
          },
          {
            "name": "AssetAccountDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The amount of funds that must be reserved for a non-provider asset account to be",
              " maintained."
            ]
          },
          {
            "name": "MetadataDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved when adding metadata to your asset."
            ]
          },
          {
            "name": "MetadataDepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The additional funds that must be reserved for the number of bytes you store in your",
              " metadata."
            ]
          },
          {
            "name": "ApprovalDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The amount of funds that must be reserved when creating a new approval."
            ]
          },
          {
            "name": "StringLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum length of a name or symbol stored on-chain."
            ]
          }
        ],
        "errors": [
          {
            "name": "BalanceLow",
            "doc": [
              "Account balance must be greater than or equal to the transfer amount."
            ]
          },
          {
            "name": "NoAccount",
            "doc": [
              "The account to alter does not exist."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "name": "Unknown",
            "doc": [
              "The given asset ID is unknown."
            ]
          },
          {
            "name": "Frozen",
            "doc": [
              "The origin account is frozen."
            ]
          },
          {
            "name": "InUse",
            "doc": [
              "The asset ID is already taken."
            ]
          },
          {
            "name": "BadWitness",
            "doc": [
              "Invalid witness data given."
            ]
          },
          {
            "name": "MinBalanceZero",
            "doc": [
              "Minimum balance should be non-zero."
            ]
          },
          {
            "name": "UnavailableConsumer",
            "doc": [
              "Unable to increment the consumer reference counters on the account. Either no provider",
              "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
              "fewer then the maximum number of consumers has been reached."
            ]
          },
          {
            "name": "BadMetadata",
            "doc": [
              "Invalid metadata given."
            ]
          },
          {
            "name": "Unapproved",
            "doc": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "name": "WouldDie",
            "doc": [
              "The source account would not survive the transfer and it needs to stay alive."
            ]
          },
          {
            "name": "AlreadyExists",
            "doc": [
              "The asset-account already exists."
            ]
          },
          {
            "name": "NoDeposit",
            "doc": [
              "The asset-account doesn't have an associated deposit."
            ]
          },
          {
            "name": "WouldBurn",
            "doc": [
              "The operation would result in funds being burned."
            ]
          },
          {
            "name": "LiveAsset",
            "doc": [
              "The asset is a live asset and is actively being used. Usually emit for operations such",
              "as `start_destroy` which require the asset to be in a destroying state."
            ]
          },
          {
            "name": "AssetNotLive",
            "doc": [
              "The asset is not live, and likely being destroyed."
            ]
          },
          {
            "name": "IncorrectStatus",
            "doc": [
              "The asset status is not the expected status."
            ]
          },
          {
            "name": "NotFrozen",
            "doc": [
              "The asset should be frozen before the given operation."
            ]
          },
          {
            "name": "CallbackFailed",
            "doc": [
              "Callback action resulted in error"
            ]
          }
        ],
        "errors_value": {
          "type": 635
        },
        "index": 38
      },
      {
        "name": "Mmr",
        "prefix": "Mmr",
        "storage": [
          {
            "name": "RootHash",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "H256",
              "PlainTypeValue": 12
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Latest MMR Root hash."
            ]
          },
          {
            "name": "NumberOfLeaves",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 11
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Current size of the MMR (number of leaves)."
            ]
          },
          {
            "name": "Nodes",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "U64"
                ],
                "value": "H256",
                "keys_id": 11,
                "value_id": 12
              }
            },
            "fallback": "0x00",
            "docs": [
              " Hashes of the nodes in the MMR.",
              "",
              " Note this collection only contains MMR peaks, the inner nodes (and leaves)",
              " are pruned and only stored in the Offchain DB."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 39
      },
      {
        "name": "Lottery",
        "prefix": "Lottery",
        "storage": [
          {
            "name": "LotteryIndex",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": null
          },
          {
            "name": "Lottery",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_lottery:LotteryConfig",
              "PlainTypeValue": 636
            },
            "fallback": "0x00",
            "docs": [
              " The configuration for the current lottery."
            ]
          },
          {
            "name": "Participants",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:U32bounded_collections:bounded_vec:BoundedVec@638",
                "keys_id": 0,
                "value_id": 637
              }
            },
            "fallback": "0x0000000000",
            "docs": [
              " Users who have purchased a ticket. (Lottery Index, Tickets Purchased)"
            ]
          },
          {
            "name": "TicketsCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Total number of tickets sold."
            ]
          },
          {
            "name": "Tickets",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "[U8; 32]",
                "keys_id": 4,
                "value_id": 0
              }
            },
            "fallback": "0x00",
            "docs": [
              " Each ticket's owner.",
              "",
              " May have residual storage from previous lotteries. Use `TicketsCount` to see which ones",
              " are actually valid ticket mappings."
            ]
          },
          {
            "name": "CallIndices",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U8U8\u003e",
              "PlainTypeValue": 638
            },
            "fallback": "0x00",
            "docs": [
              " The calls stored in this pallet to be used in an active lottery if configured",
              " by `Config::ValidateCall`."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2800",
            "name": "buy_ticket",
            "docs": [
              "Buy a ticket to enter the lottery.",
              "",
              "This extrinsic acts as a passthrough function for `call`. In all",
              "situations where `call` alone would succeed, this extrinsic should",
              "succeed.",
              "",
              "If `call` is successful, then we will attempt to purchase a ticket,",
              "which may fail silently. To detect success of a ticket purchase, you",
              "should listen for the `TicketBought` event.",
              "",
              "This extrinsic must be called by a signed origin."
            ],
            "args": [
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "2801",
            "name": "set_calls",
            "docs": [
              "Set calls in storage which can be used to purchase a lottery ticket.",
              "",
              "This function only matters if you use the `ValidateCall` implementation",
              "provided by this pallet, which uses storage to determine the valid calls.",
              "",
              "This extrinsic must be called by the Manager origin."
            ],
            "args": [
              {
                "name": "calls",
                "type": "Vec\u003cCall\u003e",
                "type_name": "Vec\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "2802",
            "name": "start_lottery",
            "docs": [
              "Start a lottery using the provided configuration.",
              "",
              "This extrinsic must be called by the `ManagerOrigin`.",
              "",
              "Parameters:",
              "",
              "* `price`: The cost of a single ticket.",
              "* `length`: How long the lottery should run for starting at the current block.",
              "* `delay`: How long after the lottery end we should wait before picking a winner.",
              "* `repeat`: If the lottery should repeat when completed."
            ],
            "args": [
              {
                "name": "price",
                "type": "U128",
                "type_name": "BalanceOf"
              },
              {
                "name": "length",
                "type": "U32",
                "type_name": "BlockNumber"
              },
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumber"
              },
              {
                "name": "repeat",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2803",
            "name": "stop_repeat",
            "docs": [
              "If a lottery is repeating, you can use this to stop the repeat.",
              "The lottery will continue to run to completion.",
              "",
              "This extrinsic must be called by the `ManagerOrigin`."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 322
        },
        "events": [
          {
            "lookup": "2800",
            "name": "LotteryStarted",
            "docs": [
              "A lottery has been started!"
            ],
            "args": null
          },
          {
            "lookup": "2801",
            "name": "CallsUpdated",
            "docs": [
              "A new set of calls have been set!"
            ],
            "args": null
          },
          {
            "lookup": "2802",
            "name": "Winner",
            "docs": [
              "A winner has been chosen!"
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "2803",
            "name": "TicketBought",
            "docs": [
              "A ticket has been bought!"
            ],
            "args": [
              "[U8; 32]",
              "Tuple:U8U8"
            ],
            "args_type_name": [
              "AccountId",
              "CallIndex"
            ]
          }
        ],
        "events_value": {
          "type": 102
        },
        "constants": [
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 540,
            "constants_value": "70792f6c6f74746f",
            "docs": [
              " The Lottery's pallet id"
            ]
          },
          {
            "name": "MaxCalls",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The max number of calls available in a single lottery."
            ]
          },
          {
            "name": "MaxGenerateRandom",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " Number of time we should try to generate a random number that has no modulo bias.",
              " The larger this number, the more potential computation is used for picking the winner,",
              " but also the more likely that the chosen winner is done fairly."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotConfigured",
            "doc": [
              "A lottery has not been configured."
            ]
          },
          {
            "name": "InProgress",
            "doc": [
              "A lottery is already in progress."
            ]
          },
          {
            "name": "AlreadyEnded",
            "doc": [
              "A lottery has already ended."
            ]
          },
          {
            "name": "InvalidCall",
            "doc": [
              "The call is not valid for an open lottery."
            ]
          },
          {
            "name": "AlreadyParticipating",
            "doc": [
              "You are already participating in the lottery with this call."
            ]
          },
          {
            "name": "TooManyCalls",
            "doc": [
              "Too many calls for a single lottery."
            ]
          },
          {
            "name": "EncodingFailed",
            "doc": [
              "Failed to encode calls"
            ]
          }
        ],
        "errors_value": {
          "type": 640
        },
        "index": 40
      },
      {
        "name": "Nis",
        "prefix": "Nis",
        "storage": [
          {
            "name": "QueueTotals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U32U128\u003e",
              "PlainTypeValue": 641
            },
            "fallback": "
            "docs": [
              " The totals of items and balances within each queue. Saves a lot of storage reads in the",
              " case of sparsely packed queues.",
              "",
              " The vector is indexed by duration in `Period`s, offset by one, so information on the queue",
              " whose duration is one `Period` would be storage `0`."
            ]
          },
          {
            "name": "Queues",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cpallet_nis:pallet:Bid\u003e",
                "keys_id": 4,
                "value_id": 642
              }
            },
            "fallback": "0x00",
            "docs": [
              " The queues of bids. Indexed by duration (in `Period`s)."
            ]
          },
          {
            "name": "Summary",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_nis:pallet:SummaryRecord",
              "PlainTypeValue": 645
            },
            "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Summary information over the general state."
            ]
          },
          {
            "name": "Receipts",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nis:pallet:ReceiptRecord",
                "keys_id": 4,
                "value_id": 646
              }
            },
            "fallback": "0x00",
            "docs": [
              " The currently outstanding receipts, indexed according to the order of creation."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2900",
            "name": "place_bid",
            "docs": [
              "Place a bid.",
              "",
              "Origin must be Signed, and account must have at least `amount` in free balance.",
              "",
              "- `amount`: The amount of the bid; these funds will be reserved, and if/when",
              "  consolidated, removed. Must be at least `MinBid`.",
              "- `duration`: The number of periods before which the newly consolidated bid may be",
              "  thawed. Must be greater than 1 and no more than `QueueCount`.",
              "",
              "Complexities:",
              "- `Queues[duration].len()` (just take max)."
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "duration",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2901",
            "name": "retract_bid",
            "docs": [
              "Retract a previously placed bid.",
              "",
              "Origin must be Signed, and the account should have previously issued a still-active bid",
              "of `amount` for `duration`.",
              "",
              "- `amount`: The amount of the previous bid.",
              "- `duration`: The duration of the previous bid."
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "duration",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2902",
            "name": "fund_deficit",
            "docs": [
              "Ensure we have sufficient funding for all potential payouts.",
              "",
              "- `origin`: Must be accepted by `FundOrigin`."
            ],
            "args": null
          },
          {
            "lookup": "2903",
            "name": "thaw_private",
            "docs": [
              "Reduce or remove an outstanding receipt, placing the according proportion of funds into",
              "the account of the owner.",
              "",
              "- `origin`: Must be Signed and the account must be the owner of the receipt `index` as",
              "  well as any fungible counterpart.",
              "- `index`: The index of the receipt.",
              "- `portion`: If `Some`, then only the given portion of the receipt should be thawed. If",
              "  `None`, then all of it should be."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReceiptIndex"
              },
              {
                "name": "maybe_proportion",
                "type": "option\u003cU64\u003e",
                "type_name": "Option\u003cPerquintill\u003e"
              }
            ]
          },
          {
            "lookup": "2904",
            "name": "thaw_communal",
            "docs": [
              "Reduce or remove an outstanding receipt, placing the according proportion of funds into",
              "the account of the owner.",
              "",
              "- `origin`: Must be Signed and the account must be the owner of the fungible counterpart",
              "  for receipt `index`.",
              "- `index`: The index of the receipt."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReceiptIndex"
              }
            ]
          },
          {
            "lookup": "2905",
            "name": "communify",
            "docs": [
              "Make a private receipt communal and create fungible counterparts for its owner."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReceiptIndex"
              }
            ]
          },
          {
            "lookup": "2906",
            "name": "privatize",
            "docs": [
              "Make a communal receipt private and burn fungible counterparts from its owner."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReceiptIndex"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 323
        },
        "events": [
          {
            "lookup": "2900",
            "name": "BidPlaced",
            "docs": [
              "A bid was successfully placed."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "u32"
            ]
          },
          {
            "lookup": "2901",
            "name": "BidRetracted",
            "docs": [
              "A bid was successfully removed (before being accepted)."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "u32"
            ]
          },
          {
            "lookup": "2902",
            "name": "BidDropped",
            "docs": [
              "A bid was dropped from a queue because of another, more substantial, bid was present."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "u32"
            ]
          },
          {
            "lookup": "2903",
            "name": "Issued",
            "docs": [
              "A bid was accepted. The balance may not be released until expiry."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "U64",
              "U128"
            ],
            "args_type_name": [
              "ReceiptIndex",
              "BlockNumber",
              "AccountId",
              "Perquintill",
              "BalanceOf"
            ]
          },
          {
            "lookup": "2904",
            "name": "Thawed",
            "docs": [
              "An receipt has been (at least partially) thawed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U64",
              "U128",
              "Bool"
            ],
            "args_type_name": [
              "ReceiptIndex",
              "AccountId",
              "Perquintill",
              "BalanceOf",
              "bool"
            ]
          },
          {
            "lookup": "2905",
            "name": "Funded",
            "docs": [
              "An automatic funding of the deficit was made."
            ],
            "args": [
              "U128"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "2906",
            "name": "Transferred",
            "docs": [
              "A receipt was transfered."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "ReceiptIndex"
            ]
          }
        ],
        "events_value": {
          "type": 104
        },
        "constants": [
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 540,
            "constants_value": "70792f6e69732020",
            "docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "name": "HoldReason",
            "type": "kitchensink_runtime:HoldReason",
            "type_value": 461,
            "constants_value": "00",
            "docs": [
              " The identifier of the hold reason."
            ]
          },
          {
            "name": "QueueCount",
            "type": "U32",
            "type_value": 4,
            "constants_value": "2c010000",
            "docs": [
              " Number of duration queues in total. This sets the maximum duration supported, which is",
              " this value multiplied by `Period`."
            ]
          },
          {
            "name": "MaxQueueLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "e8030000",
            "docs": [
              " Maximum number of items that may be in each duration queue.",
              "",
              " Must be larger than zero."
            ]
          },
          {
            "name": "FifoQueueLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "f4010000",
            "docs": [
              " Portion of the queue which is free from ordering and just a FIFO.",
              "",
              " Must be no greater than `MaxQueueLen`."
            ]
          },
          {
            "name": "BasePeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "002f0d00",
            "docs": [
              " The base period for the duration queues. This is the common multiple across all",
              " supported freezing durations that can be bid upon."
            ]
          },
          {
            "name": "MinBid",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The minimum amount of funds that may be placed in a bid. Note that this",
              " does not actually limit the amount which may be represented in a receipt since bids may",
              " be split up by the system.",
              "",
              " It should be at least big enough to ensure that there is no possible storage spam attack",
              " or queue-filling attack."
            ]
          },
          {
            "name": "MinReceipt",
            "type": "U64",
            "type_value": 105,
            "constants_value": "0000c16ff2862300",
            "docs": [
              " The minimum amount of funds which may intentionally be left remaining under a single",
              " receipt."
            ]
          },
          {
            "name": "IntakePeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The number of blocks between consecutive attempts to dequeue bids and create receipts.",
              "",
              " A larger value results in fewer storage hits each block, but a slower period to get to",
              " the target."
            ]
          },
          {
            "name": "MaxIntakeWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "0700d0ed902e139999999999999919",
            "docs": [
              " The maximum amount of bids that can consolidated into receipts in a single intake. A",
              " larger value here means less of the block available for transactions should there be a",
              " glut of bids."
            ]
          },
          {
            "name": "ThawThrottle",
            "type": "Tuple:U64U32",
            "type_value": 647,
            "constants_value": "0000d9e9ac2d780305000000",
            "docs": [
              " The maximum proportion which may be thawed and the period over which it is reset."
            ]
          }
        ],
        "errors": [
          {
            "name": "DurationTooSmall",
            "doc": [
              "The duration of the bid is less than one."
            ]
          },
          {
            "name": "DurationTooBig",
            "doc": [
              "The duration is the bid is greater than the number of queues."
            ]
          },
          {
            "name": "AmountTooSmall",
            "doc": [
              "The amount of the bid is less than the minimum allowed."
            ]
          },
          {
            "name": "BidTooLow",
            "doc": [
              "The queue for the bid's duration is full and the amount bid is too low to get in",
              "through replacing an existing bid."
            ]
          },
          {
            "name": "UnknownReceipt",
            "doc": [
              "Receipt index is unknown."
            ]
          },
          {
            "name": "NotOwner",
            "doc": [
              "Not the owner of the receipt."
            ]
          },
          {
            "name": "NotExpired",
            "doc": [
              "Bond not yet at expiry date."
            ]
          },
          {
            "name": "UnknownBid",
            "doc": [
              "The given bid for retraction is not found."
            ]
          },
          {
            "name": "PortionTooBig",
            "doc": [
              "The portion supplied is beyond the value of the receipt."
            ]
          },
          {
            "name": "Unfunded",
            "doc": [
              "Not enough funds are held to pay out."
            ]
          },
          {
            "name": "AlreadyFunded",
            "doc": [
              "There are enough funds for what is required."
            ]
          },
          {
            "name": "Throttled",
            "doc": [
              "The thaw throttle has been reached for this period."
            ]
          },
          {
            "name": "MakesDust",
            "doc": [
              "The operation would result in a receipt worth an insignficant value."
            ]
          },
          {
            "name": "AlreadyCommunal",
            "doc": [
              "The receipt is already communal."
            ]
          },
          {
            "name": "AlreadyPrivate",
            "doc": [
              "The receipt is already private."
            ]
          }
        ],
        "errors_value": {
          "type": 648
        },
        "index": 41
      },
      {
        "name": "Uniques",
        "prefix": "Uniques",
        "storage": [
          {
            "name": "Class",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_uniques:types:CollectionDetails",
                "keys_id": 4,
                "value_id": 649
              }
            },
            "fallback": "0x00",
            "docs": [
              " Details of a collection."
            ]
          },
          {
            "name": "OwnershipAcceptance",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 0,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " The collection, if any, of which an account is willing to take ownership."
            ]
          },
          {
            "name": "Account",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U32",
                  "U32"
                ],
                "value": "NULL",
                "keys_id": 650,
                "value_id": 32
              }
            },
            "fallback": "0x00",
            "docs": [
              " The items held by any given account; set out this way so that items owned by a single",
              " account can be enumerated."
            ]
          },
          {
            "name": "ClassAccount",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U32"
                ],
                "value": "NULL",
                "keys_id": 491,
                "value_id": 32
              }
            },
            "fallback": "0x00",
            "docs": [
              " The collections owned by any given account; set out this way so that collections owned by",
              " a single account can be enumerated."
            ]
          },
          {
            "name": "Asset",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_uniques:types:ItemDetails",
                "keys_id": 90,
                "value_id": 651
              }
            },
            "fallback": "0x00",
            "docs": [
              " The items in existence and their ownership details."
            ]
          },
          {
            "name": "ClassMetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_uniques:types:CollectionMetadata",
                "keys_id": 4,
                "value_id": 652
              }
            },
            "fallback": "0x00",
            "docs": [
              " Metadata of a collection."
            ]
          },
          {
            "name": "InstanceMetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_uniques:types:ItemMetadata",
                "keys_id": 90,
                "value_id": 653
              }
            },
            "fallback": "0x00",
            "docs": [
              " Metadata of an item."
            ]
          },
          {
            "name": "Attribute",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "option\u003cU32\u003e",
                  "Vec\u003cU8\u003e"
                ],
                "value": "Tuple:Vec\u003cU8\u003eU128",
                "keys_id": 654,
                "value_id": 655
              }
            },
            "fallback": "0x00",
            "docs": [
              " Attributes of a collection."
            ]
          },
          {
            "name": "ItemPriceOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "Tuple:U128option\u003c[U8; 32]\u003e",
                "keys_id": 90,
                "value_id": 656
              }
            },
            "fallback": "0x00",
            "docs": [
              " Price of an asset instance."
            ]
          },
          {
            "name": "CollectionMaxSupply",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " Keeps track of the number of items a collection might have."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2a00",
            "name": "create",
            "docs": [
              "Issue a new collection of non-fungible items from a public origin.",
              "",
              "This new collection has no items initially and its owner is the origin.",
              "",
              "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
              "",
              "`ItemDeposit` funds of sender are reserved.",
              "",
              "Parameters:",
              "- `collection`: The identifier of the new collection. This must not be currently in use.",
              "- `admin`: The admin of this collection. The admin is the initial address of each",
              "member of the collection's admin team.",
              "",
              "Emits `Created` event when successful.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2a01",
            "name": "force_create",
            "docs": [
              "Issue a new collection of non-fungible items from a privileged origin.",
              "",
              "This new collection has no items initially.",
              "",
              "The origin must conform to `ForceOrigin`.",
              "",
              "Unlike `create`, no funds are reserved.",
              "",
              "- `collection`: The identifier of the new item. This must not be currently in use.",
              "- `owner`: The owner of this collection of items. The owner has full superuser",
              "  permissions",
              "over this item, but may later change and configure the permissions using",
              "`transfer_ownership` and `set_team`.",
              "",
              "Emits `ForceCreated` event when successful.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "free_holding",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2a02",
            "name": "destroy",
            "docs": [
              "Destroy a collection of fungible items.",
              "",
              "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
              "owner of the `collection`.",
              "",
              "- `collection`: The identifier of the collection to be destroyed.",
              "- `witness`: Information on the items minted in the collection. This must be",
              "correct.",
              "",
              "Emits `Destroyed` event when successful.",
              "",
              "Weight: `O(n + m)` where:",
              "- `n = witness.items`",
              "- `m = witness.item_metadatas`",
              "- `a = witness.attributes`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "witness",
                "type": "pallet_uniques:types:DestroyWitness",
                "type_name": "DestroyWitness"
              }
            ]
          },
          {
            "lookup": "2a03",
            "name": "mint",
            "docs": [
              "Mint an item of a particular collection.",
              "",
              "The origin must be Signed and the sender must be the Issuer of the `collection`.",
              "",
              "- `collection`: The collection of the item to be minted.",
              "- `item`: The item value of the item to be minted.",
              "- `beneficiary`: The initial owner of the minted item.",
              "",
              "Emits `Issued` event when successful.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2a04",
            "name": "burn",
            "docs": [
              "Destroy a single item.",
              "",
              "Origin must be Signed and the signing account must be either:",
              "- the Admin of the `collection`;",
              "- the Owner of the `item`;",
              "",
              "- `collection`: The collection of the item to be burned.",
              "- `item`: The item of the item to be burned.",
              "- `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the",
              "  item is owned by this value.",
              "",
              "Emits `Burned` with the actual amount burned.",
              "",
              "Weight: `O(1)`",
              "Modes: `check_owner.is_some()`."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "check_owner",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "2a05",
            "name": "transfer",
            "docs": [
              "Move an item from the sender account to another.",
              "",
              "This resets the approved account of the item.",
              "",
              "Origin must be Signed and the signing account must be either:",
              "- the Admin of the `collection`;",
              "- the Owner of the `item`;",
              "- the approved delegate for the `item` (in this case, the approval is reset).",
              "",
              "Arguments:",
              "- `collection`: The collection of the item to be transferred.",
              "- `item`: The item of the item to be transferred.",
              "- `dest`: The account to receive ownership of the item.",
              "",
              "Emits `Transferred`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2a06",
            "name": "redeposit",
            "docs": [
              "Reevaluate the deposits on some items.",
              "",
              "Origin must be Signed and the sender should be the Owner of the `collection`.",
              "",
              "- `collection`: The collection to be frozen.",
              "- `items`: The items of the collection whose deposits will be reevaluated.",
              "",
              "NOTE: This exists as a best-effort function. Any items which are unknown or",
              "in the case that the owner account does not have reservable funds to pay for a",
              "deposit increase are ignored. Generally the owner isn't going to call this on items",
              "whose existing deposit is less than the refreshed deposit as it would only cost them,",
              "so it's of little consequence.",
              "",
              "It will still return an error in the case that the collection is unknown of the signer",
              "is not permitted to call it.",
              "",
              "Weight: `O(items.len())`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "items",
                "type": "Vec\u003cU32\u003e",
                "type_name": "Vec\u003cItemId\u003e"
              }
            ]
          },
          {
            "lookup": "2a07",
            "name": "freeze",
            "docs": [
              "Disallow further unprivileged transfer of an item.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the `collection`.",
              "",
              "- `collection`: The collection of the item to be frozen.",
              "- `item`: The item of the item to be frozen.",
              "",
              "Emits `Frozen`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2a08",
            "name": "thaw",
            "docs": [
              "Re-allow unprivileged transfer of an item.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the `collection`.",
              "",
              "- `collection`: The collection of the item to be thawed.",
              "- `item`: The item of the item to be thawed.",
              "",
              "Emits `Thawed`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2a09",
            "name": "freeze_collection",
            "docs": [
              "Disallow further unprivileged transfers for a whole collection.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the `collection`.",
              "",
              "- `collection`: The collection to be frozen.",
              "",
              "Emits `CollectionFrozen`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              }
            ]
          },
          {
            "lookup": "2a0a",
            "name": "thaw_collection",
            "docs": [
              "Re-allow unprivileged transfers for a whole collection.",
              "",
              "Origin must be Signed and the sender should be the Admin of the `collection`.",
              "",
              "- `collection`: The collection to be thawed.",
              "",
              "Emits `CollectionThawed`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              }
            ]
          },
          {
            "lookup": "2a0b",
            "name": "transfer_ownership",
            "docs": [
              "Change the Owner of a collection.",
              "",
              "Origin must be Signed and the sender should be the Owner of the `collection`.",
              "",
              "- `collection`: The collection whose owner should be changed.",
              "- `owner`: The new Owner of this collection. They must have called",
              "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
              "",
              "Emits `OwnerChanged`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2a0c",
            "name": "set_team",
            "docs": [
              "Change the Issuer, Admin and Freezer of a collection.",
              "",
              "Origin must be Signed and the sender should be the Owner of the `collection`.",
              "",
              "- `collection`: The collection whose team should be changed.",
              "- `issuer`: The new Issuer of this collection.",
              "- `admin`: The new Admin of this collection.",
              "- `freezer`: The new Freezer of this collection.",
              "",
              "Emits `TeamChanged`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "issuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "freezer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2a0d",
            "name": "approve_transfer",
            "docs": [
              "Approve an item to be transferred by a delegated third-party account.",
              "",
              "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be",
              "either the owner of the `item` or the admin of the collection.",
              "",
              "- `collection`: The collection of the item to be approved for delegated transfer.",
              "- `item`: The item of the item to be approved for delegated transfer.",
              "- `delegate`: The account to delegate permission to transfer the item.",
              "",
              "Important NOTE: The `approved` account gets reset after each transfer.",
              "",
              "Emits `ApprovedTransfer` on success.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2a0e",
            "name": "cancel_approval",
            "docs": [
              "Cancel the prior approval for the transfer of an item by a delegate.",
              "",
              "Origin must be either:",
              "- the `Force` origin;",
              "- `Signed` with the signer being the Admin of the `collection`;",
              "- `Signed` with the signer being the Owner of the `item`;",
              "",
              "Arguments:",
              "- `collection`: The collection of the item of whose approval will be cancelled.",
              "- `item`: The item of the item of whose approval will be cancelled.",
              "- `maybe_check_delegate`: If `Some` will ensure that the given account is the one to",
              "  which permission of transfer is delegated.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "maybe_check_delegate",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "2a0f",
            "name": "force_item_status",
            "docs": [
              "Alter the attributes of a given item.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "- `collection`: The identifier of the item.",
              "- `owner`: The new Owner of this item.",
              "- `issuer`: The new Issuer of this item.",
              "- `admin`: The new Admin of this item.",
              "- `freezer`: The new Freezer of this item.",
              "- `free_holding`: Whether a deposit is taken for holding an item of this collection.",
              "- `is_frozen`: Whether this collection is frozen except for permissioned/admin",
              "instructions.",
              "",
              "Emits `ItemStatusChanged` with the identity of the item.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "issuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "freezer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "free_holding",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2a10",
            "name": "set_attribute",
            "docs": [
              "Set an attribute for a collection or item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
              "`collection`.",
              "",
              "If the origin is Signed, then funds of signer are reserved according to the formula:",
              "`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into",
              "account any already reserved funds.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to set.",
              "- `maybe_item`: The identifier of the item whose metadata to set.",
              "- `key`: The key of the attribute.",
              "- `value`: The value to which to set the attribute.",
              "",
              "Emits `AttributeSet`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "key",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, KeyLimit\u003e"
              },
              {
                "name": "value",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, ValueLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2a11",
            "name": "clear_attribute",
            "docs": [
              "Clear an attribute for a collection or item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
              "`collection`.",
              "",
              "Any deposit is freed for the collection's owner.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to clear.",
              "- `maybe_item`: The identifier of the item whose metadata to clear.",
              "- `key`: The key of the attribute.",
              "",
              "Emits `AttributeCleared`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "key",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, KeyLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2a12",
            "name": "set_metadata",
            "docs": [
              "Set the metadata for an item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
              "`collection`.",
              "",
              "If the origin is Signed, then funds of signer are reserved according to the formula:",
              "`MetadataDepositBase + DepositPerByte * data.len` taking into",
              "account any already reserved funds.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to set.",
              "- `item`: The identifier of the item whose metadata to set.",
              "- `data`: The general information of this item. Limited in length by `StringLimit`.",
              "- `is_frozen`: Whether the metadata should be frozen against further changes.",
              "",
              "Emits `MetadataSet`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, StringLimit\u003e"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2a13",
            "name": "clear_metadata",
            "docs": [
              "Clear the metadata for an item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
              "`item`.",
              "",
              "Any deposit is freed for the collection's owner.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to clear.",
              "- `item`: The identifier of the item whose metadata to clear.",
              "",
              "Emits `MetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2a14",
            "name": "set_collection_metadata",
            "docs": [
              "Set the metadata for a collection.",
              "",
              "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
              "the `collection`.",
              "",
              "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
              "`MetadataDepositBase + DepositPerByte * data.len` taking into",
              "account any already reserved funds.",
              "",
              "- `collection`: The identifier of the item whose metadata to update.",
              "- `data`: The general information of this item. Limited in length by `StringLimit`.",
              "- `is_frozen`: Whether the metadata should be frozen against further changes.",
              "",
              "Emits `CollectionMetadataSet`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, StringLimit\u003e"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2a15",
            "name": "clear_collection_metadata",
            "docs": [
              "Clear the metadata for a collection.",
              "",
              "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
              "the `collection`.",
              "",
              "Any deposit is freed for the collection's owner.",
              "",
              "- `collection`: The identifier of the collection whose metadata to clear.",
              "",
              "Emits `CollectionMetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              }
            ]
          },
          {
            "lookup": "2a16",
            "name": "set_accept_ownership",
            "docs": [
              "Set (or reset) the acceptance of ownership for a particular account.",
              "",
              "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
              "provider reference.",
              "",
              "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
              "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
              "  ownership transferal.",
              "",
              "Emits `OwnershipAcceptanceChanged`."
            ],
            "args": [
              {
                "name": "maybe_collection",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cCollectionId\u003e"
              }
            ]
          },
          {
            "lookup": "2a17",
            "name": "set_collection_max_supply",
            "docs": [
              "Set the maximum amount of items a collection could have.",
              "",
              "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
              "the `collection`.",
              "",
              "Note: This function can only succeed once per collection.",
              "",
              "- `collection`: The identifier of the collection to change.",
              "- `max_supply`: The maximum amount of items a collection could have.",
              "",
              "Emits `CollectionMaxSupplySet` event when successful."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "max_supply",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2a18",
            "name": "set_price",
            "docs": [
              "Set (or reset) the price for an item.",
              "",
              "Origin must be Signed and must be the owner of the asset `item`.",
              "",
              "- `collection`: The collection of the item.",
              "- `item`: The item to set the price for.",
              "- `price`: The price for the item. Pass `None`, to reset the price.",
              "- `buyer`: Restricts the buy operation to a specific account.",
              "",
              "Emits `ItemPriceSet` on success if the price is not `None`.",
              "Emits `ItemPriceRemoved` on success if the price is `None`."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "price",
                "type": "option\u003cU128\u003e",
                "type_name": "Option\u003cItemPrice\u003e"
              },
              {
                "name": "whitelisted_buyer",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "2a19",
            "name": "buy_item",
            "docs": [
              "Allows to buy an item if it's up for sale.",
              "",
              "Origin must be Signed and must not be the owner of the `item`.",
              "",
              "- `collection`: The collection of the item.",
              "- `item`: The item the sender wants to buy.",
              "- `bid_price`: The price the sender is willing to pay.",
              "",
              "Emits `ItemBought` on success."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "bid_price",
                "type": "U128",
                "type_name": "ItemPrice"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 325
        },
        "events": [
          {
            "lookup": "2a00",
            "name": "Created",
            "docs": [
              "A `collection` was created."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2a01",
            "name": "ForceCreated",
            "docs": [
              "A `collection` was force-created."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId"
            ]
          },
          {
            "lookup": "2a02",
            "name": "Destroyed",
            "docs": [
              "A `collection` was destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2a03",
            "name": "Issued",
            "docs": [
              "An `item` was issued."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2a04",
            "name": "Transferred",
            "docs": [
              "An `item` was transferred."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2a05",
            "name": "Burned",
            "docs": [
              "An `item` was destroyed."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2a06",
            "name": "Frozen",
            "docs": [
              "Some `item` was frozen."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2a07",
            "name": "Thawed",
            "docs": [
              "Some `item` was thawed."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2a08",
            "name": "CollectionFrozen",
            "docs": [
              "Some `collection` was frozen."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2a09",
            "name": "CollectionThawed",
            "docs": [
              "Some `collection` was thawed."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2a0a",
            "name": "OwnerChanged",
            "docs": [
              "The owner changed."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId"
            ]
          },
          {
            "lookup": "2a0b",
            "name": "TeamChanged",
            "docs": [
              "The management team changed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2a0c",
            "name": "ApprovedTransfer",
            "docs": [
              "An `item` of a `collection` has been approved by the `owner` for transfer by",
              "a `delegate`."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2a0d",
            "name": "ApprovalCancelled",
            "docs": [
              "An approval for a `delegate` account to transfer the `item` of an item",
              "`collection` was cancelled by its `owner`."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2a0e",
            "name": "ItemStatusChanged",
            "docs": [
              "A `collection` has had its attributes changed by the `Force` origin."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2a0f",
            "name": "CollectionMetadataSet",
            "docs": [
              "New metadata has been set for a `collection`."
            ],
            "args": [
              "U32",
              "Vec\u003cU8\u003e",
              "Bool"
            ],
            "args_type_name": [
              "CollectionId",
              "BoundedVec\u003cu8, StringLimit\u003e",
              "bool"
            ]
          },
          {
            "lookup": "2a10",
            "name": "CollectionMetadataCleared",
            "docs": [
              "Metadata has been cleared for a `collection`."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2a11",
            "name": "MetadataSet",
            "docs": [
              "New metadata has been set for an item."
            ],
            "args": [
              "U32",
              "U32",
              "Vec\u003cU8\u003e",
              "Bool"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "BoundedVec\u003cu8, StringLimit\u003e",
              "bool"
            ]
          },
          {
            "lookup": "2a12",
            "name": "MetadataCleared",
            "docs": [
              "Metadata has been cleared for an item."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2a13",
            "name": "Redeposited",
            "docs": [
              "Metadata has been cleared for an item."
            ],
            "args": [
              "U32",
              "Vec\u003cU32\u003e"
            ],
            "args_type_name": [
              "CollectionId",
              "Vec\u003cItemId\u003e"
            ]
          },
          {
            "lookup": "2a14",
            "name": "AttributeSet",
            "docs": [
              "New attribute metadata has been set for a `collection` or `item`."
            ],
            "args": [
              "U32",
              "option\u003cU32\u003e",
              "Vec\u003cU8\u003e",
              "Vec\u003cU8\u003e"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cItemId\u003e",
              "BoundedVec\u003cu8, KeyLimit\u003e",
              "BoundedVec\u003cu8, ValueLimit\u003e"
            ]
          },
          {
            "lookup": "2a15",
            "name": "AttributeCleared",
            "docs": [
              "Attribute metadata has been cleared for a `collection` or `item`."
            ],
            "args": [
              "U32",
              "option\u003cU32\u003e",
              "Vec\u003cU8\u003e"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cItemId\u003e",
              "BoundedVec\u003cu8, KeyLimit\u003e"
            ]
          },
          {
            "lookup": "2a16",
            "name": "OwnershipAcceptanceChanged",
            "docs": [
              "Ownership acceptance has changed for an account."
            ],
            "args": [
              "[U8; 32]",
              "option\u003cU32\u003e"
            ],
            "args_type_name": [
              "AccountId",
              "Option\u003cCollectionId\u003e"
            ]
          },
          {
            "lookup": "2a17",
            "name": "CollectionMaxSupplySet",
            "docs": [
              "Max supply has been set for a collection."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "u32"
            ]
          },
          {
            "lookup": "2a18",
            "name": "ItemPriceSet",
            "docs": [
              "The price was set for the instance."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "ItemPrice",
              "Option\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2a19",
            "name": "ItemPriceRemoved",
            "docs": [
              "The price for the instance was removed."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2a1a",
            "name": "ItemBought",
            "docs": [
              "An item was bought."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "ItemPrice",
              "AccountId",
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 106
        },
        "constants": [
          {
            "name": "CollectionDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved for collection."
            ]
          },
          {
            "name": "ItemDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved for an item."
            ]
          },
          {
            "name": "MetadataDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved when adding metadata to your item."
            ]
          },
          {
            "name": "AttributeDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved when adding an attribute to an item."
            ]
          },
          {
            "name": "DepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The additional funds that must be reserved for the number of bytes store in metadata,",
              " either \"normal\" metadata or attribute metadata."
            ]
          },
          {
            "name": "StringLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum length of data stored on-chain."
            ]
          },
          {
            "name": "KeyLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "20000000",
            "docs": [
              " The maximum length of an attribute key."
            ]
          },
          {
            "name": "ValueLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00010000",
            "docs": [
              " The maximum length of an attribute value."
            ]
          }
        ],
        "errors": [
          {
            "name": "NoPermission",
            "doc": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "name": "UnknownCollection",
            "doc": [
              "The given item ID is unknown."
            ]
          },
          {
            "name": "AlreadyExists",
            "doc": [
              "The item ID has already been used for an item."
            ]
          },
          {
            "name": "WrongOwner",
            "doc": [
              "The owner turned out to be different to what was expected."
            ]
          },
          {
            "name": "BadWitness",
            "doc": [
              "Invalid witness data given."
            ]
          },
          {
            "name": "InUse",
            "doc": [
              "The item ID is already taken."
            ]
          },
          {
            "name": "Frozen",
            "doc": [
              "The item or collection is frozen."
            ]
          },
          {
            "name": "WrongDelegate",
            "doc": [
              "The delegate turned out to be different to what was expected."
            ]
          },
          {
            "name": "NoDelegate",
            "doc": [
              "There is no delegate approved."
            ]
          },
          {
            "name": "Unapproved",
            "doc": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "name": "Unaccepted",
            "doc": [
              "The named owner has not signed ownership of the collection is acceptable."
            ]
          },
          {
            "name": "Locked",
            "doc": [
              "The item is locked."
            ]
          },
          {
            "name": "MaxSupplyReached",
            "doc": [
              "All items have been minted."
            ]
          },
          {
            "name": "MaxSupplyAlreadySet",
            "doc": [
              "The max supply has already been set."
            ]
          },
          {
            "name": "MaxSupplyTooSmall",
            "doc": [
              "The provided max supply is less to the amount of items a collection already has."
            ]
          },
          {
            "name": "UnknownItem",
            "doc": [
              "The given item ID is unknown."
            ]
          },
          {
            "name": "NotForSale",
            "doc": [
              "Item is not for sale."
            ]
          },
          {
            "name": "BidTooLow",
            "doc": [
              "The provided bid is too low."
            ]
          }
        ],
        "errors_value": {
          "type": 657
        },
        "index": 42
      },
      {
        "name": "Nfts",
        "prefix": "Nfts",
        "storage": [
          {
            "name": "Collection",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nfts:types:CollectionDetails",
                "keys_id": 4,
                "value_id": 658
              }
            },
            "fallback": "0x00",
            "docs": [
              " Details of a collection."
            ]
          },
          {
            "name": "OwnershipAcceptance",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 0,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " The collection, if any, of which an account is willing to take ownership."
            ]
          },
          {
            "name": "Account",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U32",
                  "U32"
                ],
                "value": "NULL",
                "keys_id": 650,
                "value_id": 32
              }
            },
            "fallback": "0x00",
            "docs": [
              " The items held by any given account; set out this way so that items owned by a single",
              " account can be enumerated."
            ]
          },
          {
            "name": "CollectionAccount",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U32"
                ],
                "value": "NULL",
                "keys_id": 491,
                "value_id": 32
              }
            },
            "fallback": "0x00",
            "docs": [
              " The collections owned by any given account; set out this way so that collections owned by",
              " a single account can be enumerated."
            ]
          },
          {
            "name": "CollectionRoleOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "U8",
                "keys_id": 487,
                "value_id": 659
              }
            },
            "fallback": "0x00",
            "docs": [
              " The items in existence and their ownership details.",
              " Stores collection roles as per account."
            ]
          },
          {
            "name": "Item",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_nfts:types:ItemDetails",
                "keys_id": 90,
                "value_id": 661
              }
            },
            "fallback": "0x00",
            "docs": [
              " The items in existence and their ownership details."
            ]
          },
          {
            "name": "CollectionMetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nfts:types:CollectionMetadata",
                "keys_id": 4,
                "value_id": 667
              }
            },
            "fallback": "0x00",
            "docs": [
              " Metadata of a collection."
            ]
          },
          {
            "name": "ItemMetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_nfts:types:ItemMetadata",
                "keys_id": 90,
                "value_id": 668
              }
            },
            "fallback": "0x00",
            "docs": [
              " Metadata of an item."
            ]
          },
          {
            "name": "Attribute",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "option\u003cU32\u003e",
                  "pallet_nfts:types:AttributeNamespace",
                  "Vec\u003cU8\u003e"
                ],
                "value": "Tuple:Vec\u003cU8\u003epallet_nfts:types:AttributeDeposit",
                "keys_id": 670,
                "value_id": 671
              }
            },
            "fallback": "0x00",
            "docs": [
              " Attributes of a collection."
            ]
          },
          {
            "name": "ItemPriceOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "Tuple:U128option\u003c[U8; 32]\u003e",
                "keys_id": 90,
                "value_id": 656
              }
            },
            "fallback": "0x00",
            "docs": [
              " A price of an item."
            ]
          },
          {
            "name": "ItemAttributesApprovalsOf",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "Vec\u003c[U8; 32]\u003e",
                "keys_id": 90,
                "value_id": 673
              }
            },
            "fallback": "0x00",
            "docs": [
              " Item attribute approvals."
            ]
          },
          {
            "name": "NextCollectionId",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Stores the `CollectionId` that is going to be used for the next collection.",
              " This gets incremented whenever a new collection is created."
            ]
          },
          {
            "name": "PendingSwapOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_nfts:types:PendingSwap",
                "keys_id": 90,
                "value_id": 675
              }
            },
            "fallback": "0x00",
            "docs": [
              " Handles all the pending swaps."
            ]
          },
          {
            "name": "CollectionConfigOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nfts:types:CollectionConfig",
                "keys_id": 4,
                "value_id": 330
              }
            },
            "fallback": "0x00",
            "docs": [
              " Config of a collection."
            ]
          },
          {
            "name": "ItemConfigOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "U64",
                "keys_id": 90,
                "value_id": 340
              }
            },
            "fallback": "0x00",
            "docs": [
              " Config of an item."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2b00",
            "name": "create",
            "docs": [
              "Issue a new collection of non-fungible items from a public origin.",
              "",
              "This new collection has no items initially and its owner is the origin.",
              "",
              "The origin must be Signed and the sender must have sufficient funds free.",
              "",
              "`ItemDeposit` funds of sender are reserved.",
              "",
              "Parameters:",
              "- `admin`: The admin of this collection. The admin is the initial address of each",
              "member of the collection's admin team.",
              "",
              "Emits `Created` event when successful.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "config",
                "type": "pallet_nfts:types:CollectionConfig",
                "type_name": "CollectionConfigFor"
              }
            ]
          },
          {
            "lookup": "2b01",
            "name": "force_create",
            "docs": [
              "Issue a new collection of non-fungible items from a privileged origin.",
              "",
              "This new collection has no items initially.",
              "",
              "The origin must conform to `ForceOrigin`.",
              "",
              "Unlike `create`, no funds are reserved.",
              "",
              "- `owner`: The owner of this collection of items. The owner has full superuser",
              "  permissions over this item, but may later change and configure the permissions using",
              "  `transfer_ownership` and `set_team`.",
              "",
              "Emits `ForceCreated` event when successful.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "config",
                "type": "pallet_nfts:types:CollectionConfig",
                "type_name": "CollectionConfigFor"
              }
            ]
          },
          {
            "lookup": "2b02",
            "name": "destroy",
            "docs": [
              "Destroy a collection of fungible items.",
              "",
              "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
              "owner of the `collection`.",
              "",
              "NOTE: The collection must have 0 items to be destroyed.",
              "",
              "- `collection`: The identifier of the collection to be destroyed.",
              "- `witness`: Information on the items minted in the collection. This must be",
              "correct.",
              "",
              "Emits `Destroyed` event when successful.",
              "",
              "Weight: `O(m + c + a)` where:",
              "- `m = witness.item_metadatas`",
              "- `c = witness.item_configs`",
              "- `a = witness.attributes`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "witness",
                "type": "pallet_nfts:types:DestroyWitness",
                "type_name": "DestroyWitness"
              }
            ]
          },
          {
            "lookup": "2b03",
            "name": "mint",
            "docs": [
              "Mint an item of a particular collection.",
              "",
              "The origin must be Signed and the sender must comply with the `mint_settings` rules.",
              "",
              "- `collection`: The collection of the item to be minted.",
              "- `item`: An identifier of the new item.",
              "- `mint_to`: Account into which the item will be minted.",
              "- `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned",
              "  item_id from that collection needs to be provided within the witness data object.",
              "",
              "Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.",
              "",
              "Emits `Issued` event when successful.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "mint_to",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "witness_data",
                "type": "option\u003cpallet_nfts:types:MintWitness\u003e",
                "type_name": "Option\u003cMintWitness\u003cItemId\u003e\u003e"
              }
            ]
          },
          {
            "lookup": "2b04",
            "name": "force_mint",
            "docs": [
              "Mint an item of a particular collection from a privileged origin.",
              "",
              "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
              "Issuer of the `collection`.",
              "",
              "- `collection`: The collection of the item to be minted.",
              "- `item`: An identifier of the new item.",
              "- `mint_to`: Account into which the item will be minted.",
              "- `item_config`: A config of the new item.",
              "",
              "Emits `Issued` event when successful.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "mint_to",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "item_config",
                "type": "U64",
                "type_name": "ItemConfig"
              }
            ]
          },
          {
            "lookup": "2b05",
            "name": "burn",
            "docs": [
              "Destroy a single item.",
              "",
              "The origin must conform to `ForceOrigin` or must be Signed and the signing account must",
              "be the owner of the `item`.",
              "",
              "- `collection`: The collection of the item to be burned.",
              "- `item`: The item to be burned.",
              "",
              "Emits `Burned`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2b06",
            "name": "transfer",
            "docs": [
              "Move an item from the sender account to another.",
              "",
              "Origin must be Signed and the signing account must be either:",
              "- the Owner of the `item`;",
              "- the approved delegate for the `item` (in this case, the approval is reset).",
              "",
              "Arguments:",
              "- `collection`: The collection of the item to be transferred.",
              "- `item`: The item to be transferred.",
              "- `dest`: The account to receive ownership of the item.",
              "",
              "Emits `Transferred`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2b07",
            "name": "redeposit",
            "docs": [
              "Re-evaluate the deposits on some items.",
              "",
              "Origin must be Signed and the sender should be the Owner of the `collection`.",
              "",
              "- `collection`: The collection of the items to be reevaluated.",
              "- `items`: The items of the collection whose deposits will be reevaluated.",
              "",
              "NOTE: This exists as a best-effort function. Any items which are unknown or",
              "in the case that the owner account does not have reservable funds to pay for a",
              "deposit increase are ignored. Generally the owner isn't going to call this on items",
              "whose existing deposit is less than the refreshed deposit as it would only cost them,",
              "so it's of little consequence.",
              "",
              "It will still return an error in the case that the collection is unknown or the signer",
              "is not permitted to call it.",
              "",
              "Weight: `O(items.len())`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "items",
                "type": "Vec\u003cU32\u003e",
                "type_name": "Vec\u003cItemId\u003e"
              }
            ]
          },
          {
            "lookup": "2b08",
            "name": "lock_item_transfer",
            "docs": [
              "Disallow further unprivileged transfer of an item.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the `collection`.",
              "",
              "- `collection`: The collection of the item to be changed.",
              "- `item`: The item to become non-transferable.",
              "",
              "Emits `ItemTransferLocked`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2b09",
            "name": "unlock_item_transfer",
            "docs": [
              "Re-allow unprivileged transfer of an item.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the `collection`.",
              "",
              "- `collection`: The collection of the item to be changed.",
              "- `item`: The item to become transferable.",
              "",
              "Emits `ItemTransferUnlocked`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2b0a",
            "name": "lock_collection",
            "docs": [
              "Disallows specified settings for the whole collection.",
              "",
              "Origin must be Signed and the sender should be the Owner of the `collection`.",
              "",
              "- `collection`: The collection to be locked.",
              "- `lock_settings`: The settings to be locked.",
              "",
              "Note: it's possible to only lock(set) the setting, but not to unset it.",
              "",
              "Emits `CollectionLocked`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "lock_settings",
                "type": "U64",
                "type_name": "CollectionSettings"
              }
            ]
          },
          {
            "lookup": "2b0b",
            "name": "transfer_ownership",
            "docs": [
              "Change the Owner of a collection.",
              "",
              "Origin must be Signed and the sender should be the Owner of the `collection`.",
              "",
              "- `collection`: The collection whose owner should be changed.",
              "- `owner`: The new Owner of this collection. They must have called",
              "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
              "",
              "Emits `OwnerChanged`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2b0c",
            "name": "set_team",
            "docs": [
              "Change the Issuer, Admin and Freezer of a collection.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
              "`collection`.",
              "",
              "Note: by setting the role to `None` only the `ForceOrigin` will be able to change it",
              "after to `Some(account)`.",
              "",
              "- `collection`: The collection whose team should be changed.",
              "- `issuer`: The new Issuer of this collection.",
              "- `admin`: The new Admin of this collection.",
              "- `freezer`: The new Freezer of this collection.",
              "",
              "Emits `TeamChanged`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "issuer",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              },
              {
                "name": "admin",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              },
              {
                "name": "freezer",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "2b0d",
            "name": "force_collection_owner",
            "docs": [
              "Change the Owner of a collection.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "- `collection`: The identifier of the collection.",
              "- `owner`: The new Owner of this collection.",
              "",
              "Emits `OwnerChanged`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2b0e",
            "name": "force_collection_config",
            "docs": [
              "Change the config of a collection.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "- `collection`: The identifier of the collection.",
              "- `config`: The new config of this collection.",
              "",
              "Emits `CollectionConfigChanged`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "config",
                "type": "pallet_nfts:types:CollectionConfig",
                "type_name": "CollectionConfigFor"
              }
            ]
          },
          {
            "lookup": "2b0f",
            "name": "approve_transfer",
            "docs": [
              "Approve an item to be transferred by a delegated third-party account.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
              "`item`.",
              "",
              "- `collection`: The collection of the item to be approved for delegated transfer.",
              "- `item`: The item to be approved for delegated transfer.",
              "- `delegate`: The account to delegate permission to transfer the item.",
              "- `maybe_deadline`: Optional deadline for the approval. Specified by providing the",
              "\tnumber of blocks after which the approval will expire",
              "",
              "Emits `TransferApproved` on success.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "maybe_deadline",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003c\u003cT as SystemConfig\u003e::BlockNumber\u003e"
              }
            ]
          },
          {
            "lookup": "2b10",
            "name": "cancel_approval",
            "docs": [
              "Cancel one of the transfer approvals for a specific item.",
              "",
              "Origin must be either:",
              "- the `Force` origin;",
              "- `Signed` with the signer being the Owner of the `item`;",
              "",
              "Arguments:",
              "- `collection`: The collection of the item of whose approval will be cancelled.",
              "- `item`: The item of the collection of whose approval will be cancelled.",
              "- `delegate`: The account that is going to loose their approval.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2b11",
            "name": "clear_all_transfer_approvals",
            "docs": [
              "Cancel all the approvals of a specific item.",
              "",
              "Origin must be either:",
              "- the `Force` origin;",
              "- `Signed` with the signer being the Owner of the `item`;",
              "",
              "Arguments:",
              "- `collection`: The collection of the item of whose approvals will be cleared.",
              "- `item`: The item of the collection of whose approvals will be cleared.",
              "",
              "Emits `AllApprovalsCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2b12",
            "name": "lock_item_properties",
            "docs": [
              "Disallows changing the metadata or attributes of the item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin",
              "of the `collection`.",
              "",
              "- `collection`: The collection if the `item`.",
              "- `item`: An item to be locked.",
              "- `lock_metadata`: Specifies whether the metadata should be locked.",
              "- `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace",
              "  should be locked.",
              "",
              "Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.",
              "When the metadata or attributes are locked, it won't be possible the unlock them.",
              "",
              "Emits `ItemPropertiesLocked`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "lock_metadata",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "lock_attributes",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2b13",
            "name": "set_attribute",
            "docs": [
              "Set an attribute for a collection or item.",
              "",
              "Origin must be Signed and must conform to the namespace ruleset:",
              "- `CollectionOwner` namespace could be modified by the `collection` Admin only;",
              "- `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`",
              "  should be set in that case;",
              "- `Account(AccountId)` namespace could be modified only when the `origin` was given a",
              "  permission to do so;",
              "",
              "The funds of `origin` are reserved according to the formula:",
              "`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into",
              "account any already reserved funds.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to set.",
              "- `maybe_item`: The identifier of the item whose metadata to set.",
              "- `namespace`: Attribute's namespace.",
              "- `key`: The key of the attribute.",
              "- `value`: The value to which to set the attribute.",
              "",
              "Emits `AttributeSet`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "namespace",
                "type": "pallet_nfts:types:AttributeNamespace",
                "type_name": "AttributeNamespace\u003cAccountId\u003e"
              },
              {
                "name": "key",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, KeyLimit\u003e"
              },
              {
                "name": "value",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, ValueLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2b14",
            "name": "force_set_attribute",
            "docs": [
              "Force-set an attribute for a collection or item.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "If the attribute already exists and it was set by another account, the deposit",
              "will be returned to the previous owner.",
              "",
              "- `set_as`: An optional owner of the attribute.",
              "- `collection`: The identifier of the collection whose item's metadata to set.",
              "- `maybe_item`: The identifier of the item whose metadata to set.",
              "- `namespace`: Attribute's namespace.",
              "- `key`: The key of the attribute.",
              "- `value`: The value to which to set the attribute.",
              "",
              "Emits `AttributeSet`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "set_as",
                "type": "option\u003c[U8; 32]\u003e",
                "type_name": "Option\u003cAccountId\u003e"
              },
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "namespace",
                "type": "pallet_nfts:types:AttributeNamespace",
                "type_name": "AttributeNamespace\u003cAccountId\u003e"
              },
              {
                "name": "key",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, KeyLimit\u003e"
              },
              {
                "name": "value",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, ValueLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2b15",
            "name": "clear_attribute",
            "docs": [
              "Clear an attribute for a collection or item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
              "attribute.",
              "",
              "Any deposit is freed for the collection's owner.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to clear.",
              "- `maybe_item`: The identifier of the item whose metadata to clear.",
              "- `namespace`: Attribute's namespace.",
              "- `key`: The key of the attribute.",
              "",
              "Emits `AttributeCleared`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "namespace",
                "type": "pallet_nfts:types:AttributeNamespace",
                "type_name": "AttributeNamespace\u003cAccountId\u003e"
              },
              {
                "name": "key",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, KeyLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2b16",
            "name": "approve_item_attributes",
            "docs": [
              "Approve item's attributes to be changed by a delegated third-party account.",
              "",
              "Origin must be Signed and must be an owner of the `item`.",
              "",
              "- `collection`: A collection of the item.",
              "- `item`: The item that holds attributes.",
              "- `delegate`: The account to delegate permission to change attributes of the item.",
              "",
              "Emits `ItemAttributesApprovalAdded` on success."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2b17",
            "name": "cancel_item_attributes_approval",
            "docs": [
              "Cancel the previously provided approval to change item's attributes.",
              "All the previously set attributes by the `delegate` will be removed.",
              "",
              "Origin must be Signed and must be an owner of the `item`.",
              "",
              "- `collection`: Collection that the item is contained within.",
              "- `item`: The item that holds attributes.",
              "- `delegate`: The previously approved account to remove.",
              "",
              "Emits `ItemAttributesApprovalRemoved` on success."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "witness",
                "type": "U32",
                "type_name": "CancelAttributesApprovalWitness"
              }
            ]
          },
          {
            "lookup": "2b18",
            "name": "set_metadata",
            "docs": [
              "Set the metadata for an item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
              "`collection`.",
              "",
              "If the origin is Signed, then funds of signer are reserved according to the formula:",
              "`MetadataDepositBase + DepositPerByte * data.len` taking into",
              "account any already reserved funds.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to set.",
              "- `item`: The identifier of the item whose metadata to set.",
              "- `data`: The general information of this item. Limited in length by `StringLimit`.",
              "",
              "Emits `ItemMetadataSet`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, StringLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2b19",
            "name": "clear_metadata",
            "docs": [
              "Clear the metadata for an item.",
              "",
              "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
              "`collection`.",
              "",
              "Any deposit is freed for the collection's owner.",
              "",
              "- `collection`: The identifier of the collection whose item's metadata to clear.",
              "- `item`: The identifier of the item whose metadata to clear.",
              "",
              "Emits `ItemMetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2b1a",
            "name": "set_collection_metadata",
            "docs": [
              "Set the metadata for a collection.",
              "",
              "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
              "the `collection`.",
              "",
              "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
              "`MetadataDepositBase + DepositPerByte * data.len` taking into",
              "account any already reserved funds.",
              "",
              "- `collection`: The identifier of the item whose metadata to update.",
              "- `data`: The general information of this item. Limited in length by `StringLimit`.",
              "",
              "Emits `CollectionMetadataSet`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, StringLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2b1b",
            "name": "clear_collection_metadata",
            "docs": [
              "Clear the metadata for a collection.",
              "",
              "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
              "the `collection`.",
              "",
              "Any deposit is freed for the collection's owner.",
              "",
              "- `collection`: The identifier of the collection whose metadata to clear.",
              "",
              "Emits `CollectionMetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              }
            ]
          },
          {
            "lookup": "2b1c",
            "name": "set_accept_ownership",
            "docs": [
              "Set (or reset) the acceptance of ownership for a particular account.",
              "",
              "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
              "provider reference.",
              "",
              "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
              "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
              "  ownership transferal.",
              "",
              "Emits `OwnershipAcceptanceChanged`."
            ],
            "args": [
              {
                "name": "maybe_collection",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cCollectionId\u003e"
              }
            ]
          },
          {
            "lookup": "2b1d",
            "name": "set_collection_max_supply",
            "docs": [
              "Set the maximum number of items a collection could have.",
              "",
              "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
              "the `collection`.",
              "",
              "- `collection`: The identifier of the collection to change.",
              "- `max_supply`: The maximum number of items a collection could have.",
              "",
              "Emits `CollectionMaxSupplySet` event when successful."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "max_supply",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2b1e",
            "name": "update_mint_settings",
            "docs": [
              "Update mint settings.",
              "",
              "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer",
              "of the `collection`.",
              "",
              "- `collection`: The identifier of the collection to change.",
              "- `mint_settings`: The new mint settings.",
              "",
              "Emits `CollectionMintSettingsUpdated` event when successful."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "mint_settings",
                "type": "pallet_nfts:types:MintSettings",
                "type_name": "MintSettings\u003cBalanceOf,\u003cT as SystemConfig\u003e::BlockNumber,  CollectionId,\u003e"
              }
            ]
          },
          {
            "lookup": "2b1f",
            "name": "set_price",
            "docs": [
              "Set (or reset) the price for an item.",
              "",
              "Origin must be Signed and must be the owner of the `item`.",
              "",
              "- `collection`: The collection of the item.",
              "- `item`: The item to set the price for.",
              "- `price`: The price for the item. Pass `None`, to reset the price.",
              "- `buyer`: Restricts the buy operation to a specific account.",
              "",
              "Emits `ItemPriceSet` on success if the price is not `None`.",
              "Emits `ItemPriceRemoved` on success if the price is `None`."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "price",
                "type": "option\u003cU128\u003e",
                "type_name": "Option\u003cItemPrice\u003e"
              },
              {
                "name": "whitelisted_buyer",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "2b20",
            "name": "buy_item",
            "docs": [
              "Allows to buy an item if it's up for sale.",
              "",
              "Origin must be Signed and must not be the owner of the `item`.",
              "",
              "- `collection`: The collection of the item.",
              "- `item`: The item the sender wants to buy.",
              "- `bid_price`: The price the sender is willing to pay.",
              "",
              "Emits `ItemBought` on success."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "bid_price",
                "type": "U128",
                "type_name": "ItemPrice"
              }
            ]
          },
          {
            "lookup": "2b21",
            "name": "pay_tips",
            "docs": [
              "Allows to pay the tips.",
              "",
              "Origin must be Signed.",
              "",
              "- `tips`: Tips array.",
              "",
              "Emits `TipSent` on every tip transfer."
            ],
            "args": [
              {
                "name": "tips",
                "type": "Vec\u003cpallet_nfts:types:ItemTip\u003e",
                "type_name": "BoundedVec\u003cItemTipOf, MaxTips\u003e"
              }
            ]
          },
          {
            "lookup": "2b22",
            "name": "create_swap",
            "docs": [
              "Register a new atomic swap, declaring an intention to send an `item` in exchange for",
              "`desired_item` from origin to target on the current blockchain.",
              "The target can execute the swap during the specified `duration` of blocks (if set).",
              "Additionally, the price could be set for the desired `item`.",
              "",
              "Origin must be Signed and must be an owner of the `item`.",
              "",
              "- `collection`: The collection of the item.",
              "- `item`: The item an owner wants to give.",
              "- `desired_collection`: The collection of the desired item.",
              "- `desired_item`: The desired item an owner wants to receive.",
              "- `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.",
              "- `duration`: A deadline for the swap. Specified by providing the number of blocks",
              "\tafter which the swap will expire.",
              "",
              "Emits `SwapCreated` on success."
            ],
            "args": [
              {
                "name": "offered_collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "offered_item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "desired_collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_desired_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "maybe_price",
                "type": "option\u003cpallet_nfts:types:PriceWithDirection\u003e",
                "type_name": "Option\u003cPriceWithDirection\u003cItemPrice\u003e\u003e"
              },
              {
                "name": "duration",
                "type": "U32",
                "type_name": "\u003cT as SystemConfig\u003e::BlockNumber"
              }
            ]
          },
          {
            "lookup": "2b23",
            "name": "cancel_swap",
            "docs": [
              "Cancel an atomic swap.",
              "",
              "Origin must be Signed.",
              "Origin must be an owner of the `item` if the deadline hasn't expired.",
              "",
              "- `collection`: The collection of the item.",
              "- `item`: The item an owner wants to give.",
              "",
              "Emits `SwapCancelled` on success."
            ],
            "args": [
              {
                "name": "offered_collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "offered_item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2b24",
            "name": "claim_swap",
            "docs": [
              "Claim an atomic swap.",
              "This method executes a pending swap, that was created by a counterpart before.",
              "",
              "Origin must be Signed and must be an owner of the `item`.",
              "",
              "- `send_collection`: The collection of the item to be sent.",
              "- `send_item`: The item to be sent.",
              "- `receive_collection`: The collection of the item to be received.",
              "- `receive_item`: The item to be received.",
              "- `witness_price`: A price that was previously agreed on.",
              "",
              "Emits `SwapClaimed` on success."
            ],
            "args": [
              {
                "name": "send_collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "send_item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "receive_collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "receive_item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "witness_price",
                "type": "option\u003cpallet_nfts:types:PriceWithDirection\u003e",
                "type_name": "Option\u003cPriceWithDirection\u003cItemPrice\u003e\u003e"
              }
            ]
          },
          {
            "lookup": "2b25",
            "name": "mint_pre_signed",
            "docs": [
              "Mint an item by providing the pre-signed approval.",
              "",
              "Origin must be Signed.",
              "",
              "- `mint_data`: The pre-signed approval that consists of the information about the item,",
              "  its metadata, attributes, who can mint it (`None` for anyone) and until what block",
              "  number.",
              "- `signature`: The signature of the `data` object.",
              "- `signer`: The `data` object's signer. Should be an Issuer of the collection.",
              "",
              "Emits `Issued` on success.",
              "Emits `AttributeSet` if the attributes were provided.",
              "Emits `ItemMetadataSet` if the metadata was not empty."
            ],
            "args": [
              {
                "name": "mint_data",
                "type": "pallet_nfts:types:PreSignedMint",
                "type_name": "PreSignedMintOf"
              },
              {
                "name": "signature",
                "type": "sp_runtime:MultiSignature",
                "type_name": "OffchainSignature"
              },
              {
                "name": "signer",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "2b26",
            "name": "set_attributes_pre_signed",
            "docs": [
              "Set attributes for an item by providing the pre-signed approval.",
              "",
              "Origin must be Signed and must be an owner of the `data.item`.",
              "",
              "- `data`: The pre-signed approval that consists of the information about the item,",
              "  attributes to update and until what block number.",
              "- `signature`: The signature of the `data` object.",
              "- `signer`: The `data` object's signer. Should be an Admin of the collection for the",
              "  `CollectionOwner` namespace.",
              "",
              "Emits `AttributeSet` for each provided attribute.",
              "Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.",
              "Emits `PreSignedAttributesSet` on success."
            ],
            "args": [
              {
                "name": "data",
                "type": "pallet_nfts:types:PreSignedAttributes",
                "type_name": "PreSignedAttributesOf"
              },
              {
                "name": "signature",
                "type": "sp_runtime:MultiSignature",
                "type_name": "OffchainSignature"
              },
              {
                "name": "signer",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 329
        },
        "events": [
          {
            "lookup": "2b00",
            "name": "Created",
            "docs": [
              "A `collection` was created."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2b01",
            "name": "ForceCreated",
            "docs": [
              "A `collection` was force-created."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId"
            ]
          },
          {
            "lookup": "2b02",
            "name": "Destroyed",
            "docs": [
              "A `collection` was destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2b03",
            "name": "Issued",
            "docs": [
              "An `item` was issued."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2b04",
            "name": "Transferred",
            "docs": [
              "An `item` was transferred."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2b05",
            "name": "Burned",
            "docs": [
              "An `item` was destroyed."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2b06",
            "name": "ItemTransferLocked",
            "docs": [
              "An `item` became non-transferable."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2b07",
            "name": "ItemTransferUnlocked",
            "docs": [
              "An `item` became transferable."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2b08",
            "name": "ItemPropertiesLocked",
            "docs": [
              "`item` metadata or attributes were locked."
            ],
            "args": [
              "U32",
              "U32",
              "Bool",
              "Bool"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "bool",
              "bool"
            ]
          },
          {
            "lookup": "2b09",
            "name": "CollectionLocked",
            "docs": [
              "Some `collection` was locked."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2b0a",
            "name": "OwnerChanged",
            "docs": [
              "The owner changed."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId"
            ]
          },
          {
            "lookup": "2b0b",
            "name": "TeamChanged",
            "docs": [
              "The management team changed."
            ],
            "args": [
              "U32",
              "option\u003c[U8; 32]\u003e",
              "option\u003c[U8; 32]\u003e",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cAccountId\u003e",
              "Option\u003cAccountId\u003e",
              "Option\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2b0c",
            "name": "TransferApproved",
            "docs": [
              "An `item` of a `collection` has been approved by the `owner` for transfer by",
              "a `delegate`."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "option\u003cU32\u003e"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId",
              "Option\u003c\u003cT as SystemConfig\u003e::BlockNumber\u003e"
            ]
          },
          {
            "lookup": "2b0d",
            "name": "ApprovalCancelled",
            "docs": [
              "An approval for a `delegate` account to transfer the `item` of an item",
              "`collection` was cancelled by its `owner`."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2b0e",
            "name": "AllApprovalsCancelled",
            "docs": [
              "All approvals of an item got cancelled."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2b0f",
            "name": "CollectionConfigChanged",
            "docs": [
              "A `collection` has had its config changed by the `Force` origin."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2b10",
            "name": "CollectionMetadataSet",
            "docs": [
              "New metadata has been set for a `collection`."
            ],
            "args": [
              "U32",
              "Vec\u003cU8\u003e"
            ],
            "args_type_name": [
              "CollectionId",
              "BoundedVec\u003cu8, StringLimit\u003e"
            ]
          },
          {
            "lookup": "2b11",
            "name": "CollectionMetadataCleared",
            "docs": [
              "Metadata has been cleared for a `collection`."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2b12",
            "name": "ItemMetadataSet",
            "docs": [
              "New metadata has been set for an item."
            ],
            "args": [
              "U32",
              "U32",
              "Vec\u003cU8\u003e"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "BoundedVec\u003cu8, StringLimit\u003e"
            ]
          },
          {
            "lookup": "2b13",
            "name": "ItemMetadataCleared",
            "docs": [
              "Metadata has been cleared for an item."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2b14",
            "name": "Redeposited",
            "docs": [
              "The deposit for a set of `item`s within a `collection` has been updated."
            ],
            "args": [
              "U32",
              "Vec\u003cU32\u003e"
            ],
            "args_type_name": [
              "CollectionId",
              "Vec\u003cItemId\u003e"
            ]
          },
          {
            "lookup": "2b15",
            "name": "AttributeSet",
            "docs": [
              "New attribute metadata has been set for a `collection` or `item`."
            ],
            "args": [
              "U32",
              "option\u003cU32\u003e",
              "Vec\u003cU8\u003e",
              "Vec\u003cU8\u003e",
              "pallet_nfts:types:AttributeNamespace"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cItemId\u003e",
              "BoundedVec\u003cu8, KeyLimit\u003e",
              "BoundedVec\u003cu8, ValueLimit\u003e",
              "AttributeNamespace\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2b16",
            "name": "AttributeCleared",
            "docs": [
              "Attribute metadata has been cleared for a `collection` or `item`."
            ],
            "args": [
              "U32",
              "option\u003cU32\u003e",
              "Vec\u003cU8\u003e",
              "pallet_nfts:types:AttributeNamespace"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cItemId\u003e",
              "BoundedVec\u003cu8, KeyLimit\u003e",
              "AttributeNamespace\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2b17",
            "name": "ItemAttributesApprovalAdded",
            "docs": [
              "A new approval to modify item attributes was added."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2b18",
            "name": "ItemAttributesApprovalRemoved",
            "docs": [
              "A new approval to modify item attributes was removed."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2b19",
            "name": "OwnershipAcceptanceChanged",
            "docs": [
              "Ownership acceptance has changed for an account."
            ],
            "args": [
              "[U8; 32]",
              "option\u003cU32\u003e"
            ],
            "args_type_name": [
              "AccountId",
              "Option\u003cCollectionId\u003e"
            ]
          },
          {
            "lookup": "2b1a",
            "name": "CollectionMaxSupplySet",
            "docs": [
              "Max supply has been set for a collection."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "u32"
            ]
          },
          {
            "lookup": "2b1b",
            "name": "CollectionMintSettingsUpdated",
            "docs": [
              "Mint settings for a collection had changed."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2b1c",
            "name": "NextCollectionIdIncremented",
            "docs": [
              "Event gets emitted when the `NextCollectionId` gets incremented."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2b1d",
            "name": "ItemPriceSet",
            "docs": [
              "The price was set for the item."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "ItemPrice",
              "Option\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2b1e",
            "name": "ItemPriceRemoved",
            "docs": [
              "The price for the item was removed."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2b1f",
            "name": "ItemBought",
            "docs": [
              "An item was bought."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "ItemPrice",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2b20",
            "name": "TipSent",
            "docs": [
              "A tip was sent."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId",
              "DepositBalanceOf"
            ]
          },
          {
            "lookup": "2b21",
            "name": "SwapCreated",
            "docs": [
              "An `item` swap intent was created."
            ],
            "args": [
              "U32",
              "U32",
              "U32",
              "option\u003cU32\u003e",
              "option\u003cpallet_nfts:types:PriceWithDirection\u003e",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "CollectionId",
              "Option\u003cItemId\u003e",
              "Option\u003cPriceWithDirection\u003cItemPrice\u003e\u003e",
              "\u003cT as SystemConfig\u003e::BlockNumber"
            ]
          },
          {
            "lookup": "2b22",
            "name": "SwapCancelled",
            "docs": [
              "The swap was cancelled."
            ],
            "args": [
              "U32",
              "U32",
              "U32",
              "option\u003cU32\u003e",
              "option\u003cpallet_nfts:types:PriceWithDirection\u003e",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "CollectionId",
              "Option\u003cItemId\u003e",
              "Option\u003cPriceWithDirection\u003cItemPrice\u003e\u003e",
              "\u003cT as SystemConfig\u003e::BlockNumber"
            ]
          },
          {
            "lookup": "2b23",
            "name": "SwapClaimed",
            "docs": [
              "The swap has been claimed."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "U32",
              "U32",
              "[U8; 32]",
              "option\u003cpallet_nfts:types:PriceWithDirection\u003e",
              "U32"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "CollectionId",
              "ItemId",
              "AccountId",
              "Option\u003cPriceWithDirection\u003cItemPrice\u003e\u003e",
              "\u003cT as SystemConfig\u003e::BlockNumber"
            ]
          },
          {
            "lookup": "2b24",
            "name": "PreSignedAttributesSet",
            "docs": [
              "New attributes have been set for an `item` of the `collection`."
            ],
            "args": [
              "U32",
              "U32",
              "pallet_nfts:types:AttributeNamespace"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AttributeNamespace\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2b25",
            "name": "PalletAttributeSet",
            "docs": [
              "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`",
              "within that `collection`."
            ],
            "args": [
              "U32",
              "option\u003cU32\u003e",
              "pallet_nfts:types:PalletAttributes",
              "Vec\u003cU8\u003e"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cItemId\u003e",
              "PalletAttributes\u003cCollectionId\u003e",
              "BoundedVec\u003cu8, ValueLimit\u003e"
            ]
          }
        ],
        "events_value": {
          "type": 111
        },
        "constants": [
          {
            "name": "CollectionDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved for collection."
            ]
          },
          {
            "name": "ItemDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved for an item."
            ]
          },
          {
            "name": "MetadataDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved when adding metadata to your item."
            ]
          },
          {
            "name": "AttributeDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved when adding an attribute to an item."
            ]
          },
          {
            "name": "DepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The additional funds that must be reserved for the number of bytes store in metadata,",
              " either \"normal\" metadata or attribute metadata."
            ]
          },
          {
            "name": "StringLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum length of data stored on-chain."
            ]
          },
          {
            "name": "KeyLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "20000000",
            "docs": [
              " The maximum length of an attribute key."
            ]
          },
          {
            "name": "ValueLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00010000",
            "docs": [
              " The maximum length of an attribute value."
            ]
          },
          {
            "name": "ApprovalsLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "14000000",
            "docs": [
              " The maximum approvals an item could have."
            ]
          },
          {
            "name": "ItemAttributesApprovalsLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "14000000",
            "docs": [
              " The maximum attributes approvals an item could have."
            ]
          },
          {
            "name": "MaxTips",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The max number of tips a user could send."
            ]
          },
          {
            "name": "MaxDeadlineDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00349e00",
            "docs": [
              " The max duration in blocks for deadlines."
            ]
          },
          {
            "name": "MaxAttributesPerCall",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The max number of attributes a user could set per call."
            ]
          },
          {
            "name": "Features",
            "type": "U64",
            "type_value": 676,
            "constants_value": "0000000000000000",
            "docs": [
              " Disables some of pallet's features."
            ]
          }
        ],
        "errors": [
          {
            "name": "NoPermission",
            "doc": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "name": "UnknownCollection",
            "doc": [
              "The given item ID is unknown."
            ]
          },
          {
            "name": "AlreadyExists",
            "doc": [
              "The item ID has already been used for an item."
            ]
          },
          {
            "name": "ApprovalExpired",
            "doc": [
              "The approval had a deadline that expired, so the approval isn't valid anymore."
            ]
          },
          {
            "name": "WrongOwner",
            "doc": [
              "The owner turned out to be different to what was expected."
            ]
          },
          {
            "name": "BadWitness",
            "doc": [
              "The witness data given does not match the current state of the chain."
            ]
          },
          {
            "name": "CollectionIdInUse",
            "doc": [
              "Collection ID is already taken."
            ]
          },
          {
            "name": "ItemsNonTransferable",
            "doc": [
              "Items within that collection are non-transferable."
            ]
          },
          {
            "name": "NotDelegate",
            "doc": [
              "The provided account is not a delegate."
            ]
          },
          {
            "name": "WrongDelegate",
            "doc": [
              "The delegate turned out to be different to what was expected."
            ]
          },
          {
            "name": "Unapproved",
            "doc": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "name": "Unaccepted",
            "doc": [
              "The named owner has not signed ownership acceptance of the collection."
            ]
          },
          {
            "name": "ItemLocked",
            "doc": [
              "The item is locked (non-transferable)."
            ]
          },
          {
            "name": "LockedItemAttributes",
            "doc": [
              "Item's attributes are locked."
            ]
          },
          {
            "name": "LockedCollectionAttributes",
            "doc": [
              "Collection's attributes are locked."
            ]
          },
          {
            "name": "LockedItemMetadata",
            "doc": [
              "Item's metadata is locked."
            ]
          },
          {
            "name": "LockedCollectionMetadata",
            "doc": [
              "Collection's metadata is locked."
            ]
          },
          {
            "name": "MaxSupplyReached",
            "doc": [
              "All items have been minted."
            ]
          },
          {
            "name": "MaxSupplyLocked",
            "doc": [
              "The max supply is locked and can't be changed."
            ]
          },
          {
            "name": "MaxSupplyTooSmall",
            "doc": [
              "The provided max supply is less than the number of items a collection already has."
            ]
          },
          {
            "name": "UnknownItem",
            "doc": [
              "The given item ID is unknown."
            ]
          },
          {
            "name": "UnknownSwap",
            "doc": [
              "Swap doesn't exist."
            ]
          },
          {
            "name": "MetadataNotFound",
            "doc": [
              "The given item has no metadata set."
            ]
          },
          {
            "name": "AttributeNotFound",
            "doc": [
              "The provided attribute can't be found."
            ]
          },
          {
            "name": "NotForSale",
            "doc": [
              "Item is not for sale."
            ]
          },
          {
            "name": "BidTooLow",
            "doc": [
              "The provided bid is too low."
            ]
          },
          {
            "name": "ReachedApprovalLimit",
            "doc": [
              "The item has reached its approval limit."
            ]
          },
          {
            "name": "DeadlineExpired",
            "doc": [
              "The deadline has already expired."
            ]
          },
          {
            "name": "WrongDuration",
            "doc": [
              "The duration provided should be less than or equal to `MaxDeadlineDuration`."
            ]
          },
          {
            "name": "MethodDisabled",
            "doc": [
              "The method is disabled by system settings."
            ]
          },
          {
            "name": "WrongSetting",
            "doc": [
              "The provided setting can't be set."
            ]
          },
          {
            "name": "InconsistentItemConfig",
            "doc": [
              "Item's config already exists and should be equal to the provided one."
            ]
          },
          {
            "name": "NoConfig",
            "doc": [
              "Config for a collection or an item can't be found."
            ]
          },
          {
            "name": "RolesNotCleared",
            "doc": [
              "Some roles were not cleared."
            ]
          },
          {
            "name": "MintNotStarted",
            "doc": [
              "Mint has not started yet."
            ]
          },
          {
            "name": "MintEnded",
            "doc": [
              "Mint has already ended."
            ]
          },
          {
            "name": "AlreadyClaimed",
            "doc": [
              "The provided Item was already used for claiming."
            ]
          },
          {
            "name": "IncorrectData",
            "doc": [
              "The provided data is incorrect."
            ]
          },
          {
            "name": "WrongOrigin",
            "doc": [
              "The extrinsic was sent by the wrong origin."
            ]
          },
          {
            "name": "WrongSignature",
            "doc": [
              "The provided signature is incorrect."
            ]
          },
          {
            "name": "IncorrectMetadata",
            "doc": [
              "The provided metadata might be too long."
            ]
          },
          {
            "name": "MaxAttributesLimitReached",
            "doc": [
              "Can't set more attributes per one call."
            ]
          },
          {
            "name": "WrongNamespace",
            "doc": [
              "The provided namespace isn't supported in this call."
            ]
          },
          {
            "name": "CollectionNotEmpty",
            "doc": [
              "Can't delete non-empty collections."
            ]
          }
        ],
        "errors_value": {
          "type": 678
        },
        "index": 43
      },
      {
        "name": "Salary",
        "prefix": "Salary",
        "storage": [
          {
            "name": "Status",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_salary:StatusType",
              "PlainTypeValue": 679
            },
            "fallback": "0x00",
            "docs": [
              " The overall status of the system."
            ]
          },
          {
            "name": "Claimant",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_salary:ClaimantStatus",
                "keys_id": 0,
                "value_id": 680
              }
            },
            "fallback": "0x00",
            "docs": [
              " The status of a claimant."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2c00",
            "name": "init",
            "docs": [
              "Start the first payout cycle.",
              "",
              "- `origin`: A `Signed` origin of an account."
            ],
            "args": null
          },
          {
            "lookup": "2c01",
            "name": "bump",
            "docs": [
              "Move to next payout cycle, assuming that the present block is now within that cycle.",
              "",
              "- `origin`: A `Signed` origin of an account."
            ],
            "args": null
          },
          {
            "lookup": "2c02",
            "name": "induct",
            "docs": [
              "Induct oneself into the payout system."
            ],
            "args": null
          },
          {
            "lookup": "2c03",
            "name": "register",
            "docs": [
              "Register for a payout.",
              "",
              "Will only work if we are in the first `RegistrationPeriod` blocks since the cycle",
              "started.",
              "",
              "- `origin`: A `Signed` origin of an account which is a member of `Members`."
            ],
            "args": null
          },
          {
            "lookup": "2c04",
            "name": "payout",
            "docs": [
              "Request a payout.",
              "",
              "Will only work if we are after the first `RegistrationPeriod` blocks since the cycle",
              "started but by no more than `PayoutPeriod` blocks.",
              "",
              "- `origin`: A `Signed` origin of an account which is a member of `Members`."
            ],
            "args": null
          },
          {
            "lookup": "2c05",
            "name": "payout_other",
            "docs": [
              "Request a payout to a secondary account.",
              "",
              "Will only work if we are after the first `RegistrationPeriod` blocks since the cycle",
              "started but by no more than `PayoutPeriod` blocks.",
              "",
              "- `origin`: A `Signed` origin of an account which is a member of `Members`.",
              "- `beneficiary`: The account to receive payment."
            ],
            "args": [
              {
                "name": "beneficiary",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "2c06",
            "name": "check_payment",
            "docs": [
              "Update a payment's status; if it failed, alter the state so the payment can be retried.",
              "",
              "This must be called within the same cycle as the failed payment. It will fail with",
              "`Event::NotCurrent` otherwise.",
              "",
              "- `origin`: A `Signed` origin of an account which is a member of `Members` who has",
              "  received a payment this cycle."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 350
        },
        "events": [
          {
            "lookup": "2c00",
            "name": "Inducted",
            "docs": [
              "A member is inducted into the payroll."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "2c01",
            "name": "Registered",
            "docs": [
              "A member registered for a payout."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "2c02",
            "name": "Paid",
            "docs": [
              "A payment happened."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128",
              "NULL"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "BalanceOf",
              "\u003cPaymaster as Pay\u003e::Id"
            ]
          },
          {
            "lookup": "2c03",
            "name": "CycleStarted",
            "docs": [
              "The next cycle begins."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "CycleIndexOf"
            ]
          }
        ],
        "events_value": {
          "type": 117
        },
        "constants": [
          {
            "name": "RegistrationPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "c8000000",
            "docs": [
              " The number of blocks within a cycle which accounts have to register their intent to",
              " claim.",
              "",
              " The number of blocks between sequential payout cycles is the sum of this and",
              " `PayoutPeriod`."
            ]
          },
          {
            "name": "PayoutPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "c8000000",
            "docs": [
              " The number of blocks within a cycle which accounts have to claim the payout.",
              "",
              " The number of blocks between sequential payout cycles is the sum of this and",
              " `RegistrationPeriod`."
            ]
          },
          {
            "name": "Budget",
            "type": "U128",
            "type_value": 6,
            "constants_value": "000064a7b3b6e00d0000000000000000",
            "docs": [
              " The total budget per cycle.",
              "",
              " This may change over the course of a cycle without any problem."
            ]
          }
        ],
        "errors": [
          {
            "name": "AlreadyStarted",
            "doc": [
              "The salary system has already been started."
            ]
          },
          {
            "name": "NotMember",
            "doc": [
              "The account is not a ranked member."
            ]
          },
          {
            "name": "AlreadyInducted",
            "doc": [
              "The account is already inducted."
            ]
          },
          {
            "name": "NotInducted",
            "doc": null
          },
          {
            "name": "NoClaim",
            "doc": [
              "The member does not have a current valid claim."
            ]
          },
          {
            "name": "ClaimZero",
            "doc": [
              "The member's claim is zero."
            ]
          },
          {
            "name": "TooLate",
            "doc": [
              "Current cycle's registration period is over."
            ]
          },
          {
            "name": "TooEarly",
            "doc": [
              "Current cycle's payment period is not yet begun."
            ]
          },
          {
            "name": "NotYet",
            "doc": [
              "Cycle is not yet over."
            ]
          },
          {
            "name": "NotStarted",
            "doc": [
              "The payout cycles have not yet started."
            ]
          },
          {
            "name": "Bankrupt",
            "doc": [
              "There is no budget left for the payout."
            ]
          },
          {
            "name": "PayError",
            "doc": [
              "There was some issue with the mechanism of payment."
            ]
          },
          {
            "name": "Inconclusive",
            "doc": [
              "The payment has neither failed nor succeeded yet."
            ]
          },
          {
            "name": "NotCurrent",
            "doc": [
              "The cycle is after that in which the payment was made."
            ]
          }
        ],
        "errors_value": {
          "type": 682
        },
        "index": 44
      },
      {
        "name": "CoreFellowship",
        "prefix": "CoreFellowship",
        "storage": [
          {
            "name": "Params",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_core_fellowship:ParamsType",
              "PlainTypeValue": 119
            },
            "fallback": "0x
            "docs": [
              " The overall status of the system."
            ]
          },
          {
            "name": "Member",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_core_fellowship:MemberStatus",
                "keys_id": 0,
                "value_id": 683
              }
            },
            "fallback": "0x00",
            "docs": [
              " The status of a claimant."
            ]
          },
          {
            "name": "MemberEvidence",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:pallet_core_fellowship:WishVec\u003cU8\u003e",
                "keys_id": 0,
                "value_id": 684
              }
            },
            "fallback": "0x00",
            "docs": [
              " Some evidence together with the desired outcome for which it was presented."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2d00",
            "name": "bump",
            "docs": [
              "Bump the state of a member.",
              "",
              "This will demote a member whose `last_proof` is now beyond their rank's",
              "`demotion_period`.",
              "",
              "- `origin`: A `Signed` origin of an account.",
              "- `who`: A member account whose state is to be updated."
            ],
            "args": [
              {
                "name": "who",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "2d01",
            "name": "set_params",
            "docs": [
              "Set the parameters.",
              "",
              "- `origin`: A origin complying with `ParamsOrigin` or root.",
              "- `params`: The new parameters for the pallet."
            ],
            "args": [
              {
                "name": "params",
                "type": "pallet_core_fellowship:ParamsType",
                "type_name": "Box\u003cParamsOf\u003e"
              }
            ]
          },
          {
            "lookup": "2d02",
            "name": "set_active",
            "docs": [
              "Set whether a member is active or not.",
              "",
              "- `origin`: A `Signed` origin of a member's account.",
              "- `is_active`: `true` iff the member is active."
            ],
            "args": [
              {
                "name": "is_active",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2d03",
            "name": "approve",
            "docs": [
              "Approve a member to continue at their rank.",
              "",
              "This resets `last_proof` to the current block, thereby delaying any automatic demotion.",
              "",
              "If `who` is not already tracked by this pallet, then it will become tracked.",
              "`last_promotion` will be set to zero.",
              "",
              "- `origin`: An origin which satisfies `ApproveOrigin` or root.",
              "- `who`: A member (i.e. of non-zero rank).",
              "- `at_rank`: The rank of member."
            ],
            "args": [
              {
                "name": "who",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "at_rank",
                "type": "U16",
                "type_name": "RankOf"
              }
            ]
          },
          {
            "lookup": "2d04",
            "name": "induct",
            "docs": [
              "Introduce a new and unranked candidate (rank zero).",
              "",
              "- `origin`: An origin which satisfies `InductOrigin` or root.",
              "- `who`: The account ID of the candidate to be inducted and become a member."
            ],
            "args": [
              {
                "name": "who",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "2d05",
            "name": "promote",
            "docs": [
              "Increment the rank of a ranked and tracked account.",
              "",
              "- `origin`: An origin which satisfies `PromoteOrigin` with a `Success` result of",
              "  `to_rank` or more or root.",
              "- `who`: The account ID of the member to be promoted to `to_rank`.",
              "- `to_rank`: One more than the current rank of `who`."
            ],
            "args": [
              {
                "name": "who",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "to_rank",
                "type": "U16",
                "type_name": "RankOf"
              }
            ]
          },
          {
            "lookup": "2d06",
            "name": "offboard",
            "docs": [
              "Stop tracking a prior member who is now not a ranked member of the collective.",
              "",
              "- `origin`: A `Signed` origin of an account.",
              "- `who`: The ID of an account which was tracked in this pallet but which is now not a",
              "  ranked member of the collective."
            ],
            "args": [
              {
                "name": "who",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "2d07",
            "name": "submit_evidence",
            "docs": [
              "Provide evidence that a rank is deserved.",
              "",
              "This is free as long as no evidence for the forthcoming judgement is already submitted.",
              "Evidence is cleared after an outcome (either demotion, promotion of approval).",
              "",
              "- `origin`: A `Signed` origin of an inducted and ranked account.",
              "- `wish`: The stated desire of the member.",
              "- `evidence`: A dump of evidence to be considered. This should generally be either a",
              "  Markdown-encoded document or a series of 32-byte hashes which can be found on a",
              "  decentralised content-based-indexing system such as IPFS."
            ],
            "args": [
              {
                "name": "wish",
                "type": "pallet_core_fellowship:Wish",
                "type_name": "Wish"
              },
              {
                "name": "evidence",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Evidence"
              }
            ]
          },
          {
            "lookup": "2d08",
            "name": "import",
            "docs": [
              "Introduce an already-ranked individual of the collective into this pallet. The rank may",
              "still be zero.",
              "",
              "This resets `last_proof` to the current block and `last_promotion` will be set to zero,",
              "thereby delaying any automatic demotion but allowing immediate promotion.",
              "",
              "- `origin`: A signed origin of a ranked, but not tracked, account."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 351
        },
        "events": [
          {
            "lookup": "2d00",
            "name": "ParamsChanged",
            "docs": [
              "Parameters for the pallet have changed."
            ],
            "args": [
              "pallet_core_fellowship:ParamsType"
            ],
            "args_type_name": [
              "ParamsOf"
            ]
          },
          {
            "lookup": "2d01",
            "name": "ActiveChanged",
            "docs": [
              "Member activity flag has been set."
            ],
            "args": [
              "[U8; 32]",
              "Bool"
            ],
            "args_type_name": [
              "AccountId",
              "bool"
            ]
          },
          {
            "lookup": "2d02",
            "name": "Inducted",
            "docs": [
              "Member has begun being tracked in this pallet."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "2d03",
            "name": "Offboarded",
            "docs": [
              "Member has been removed from being tracked in this pallet (i.e. because rank is now",
              "zero)."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "2d04",
            "name": "Promoted",
            "docs": [
              "Member has been promoted to the given rank."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_type_name": [
              "AccountId",
              "RankOf"
            ]
          },
          {
            "lookup": "2d05",
            "name": "Demoted",
            "docs": [
              "Member has been demoted to the given (non-zero) rank."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_type_name": [
              "AccountId",
              "RankOf"
            ]
          },
          {
            "lookup": "2d06",
            "name": "Proven",
            "docs": [
              "Member has been proven at their current rank, postponing auto-demotion."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_type_name": [
              "AccountId",
              "RankOf"
            ]
          },
          {
            "lookup": "2d07",
            "name": "Requested",
            "docs": [
              "Member has stated evidence of their efforts their request for rank."
            ],
            "args": [
              "[U8; 32]",
              "pallet_core_fellowship:Wish"
            ],
            "args_type_name": [
              "AccountId",
              "Wish"
            ]
          },
          {
            "lookup": "2d08",
            "name": "EvidenceJudged",
            "docs": [
              "Some submitted evidence was judged and removed. There may or may not have been a change",
              "to the rank, but in any case, `last_proof` is reset."
            ],
            "args": [
              "[U8; 32]",
              "pallet_core_fellowship:Wish",
              "Vec\u003cU8\u003e",
              "U16",
              "option\u003cU16\u003e"
            ],
            "args_type_name": [
              "AccountId",
              "Wish",
              "Evidence",
              "u16",
              "Option\u003cu16\u003e"
            ]
          },
          {
            "lookup": "2d09",
            "name": "Imported",
            "docs": [
              "Pre-ranked account has been inducted at their current rank."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_type_name": [
              "AccountId",
              "RankOf"
            ]
          }
        ],
        "events_value": {
          "type": 118
        },
        "constants": [
          {
            "name": "EvidenceSize",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00400000",
            "docs": [
              " The maximum size in bytes submitted evidence is allowed to be."
            ]
          }
        ],
        "errors": [
          {
            "name": "Unranked",
            "doc": [
              "Member's rank is too low."
            ]
          },
          {
            "name": "Ranked",
            "doc": [
              "Member's rank is not zero."
            ]
          },
          {
            "name": "UnexpectedRank",
            "doc": [
              "Member's rank is not as expected - generally means that the rank provided to the call",
              "does not agree with the state of the system."
            ]
          },
          {
            "name": "InvalidRank",
            "doc": [
              "The given rank is invalid - this generally means it's not between 1 and `RANK_COUNT`."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The origin does not have enough permission to do this operation."
            ]
          },
          {
            "name": "NothingDoing",
            "doc": [
              "No work needs to be done at present for this member."
            ]
          },
          {
            "name": "AlreadyInducted",
            "doc": [
              "The candidate has already been inducted. This should never happen since it would",
              "require a candidate (rank 0) to already be tracked in the pallet."
            ]
          },
          {
            "name": "NotTracked",
            "doc": [
              "The candidate has not been inducted, so cannot be offboarded from this pallet."
            ]
          },
          {
            "name": "TooSoon",
            "doc": [
              "Operation cannot be done yet since not enough time has passed."
            ]
          }
        ],
        "errors_value": {
          "type": 685
        },
        "index": 45
      },
      {
        "name": "TransactionStorage",
        "prefix": "TransactionStorage",
        "storage": [
          {
            "name": "Transactions",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cpallet_transaction_storage:TransactionInfo\u003e",
                "keys_id": 4,
                "value_id": 686
              }
            },
            "fallback": "0x00",
            "docs": [
              " Collection of transaction metadata by block number."
            ]
          },
          {
            "name": "ChunkCount",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " Count indexed chunks for each block."
            ]
          },
          {
            "name": "ByteFee",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00",
            "docs": [
              " Storage fee per byte."
            ]
          },
          {
            "name": "EntryFee",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00",
            "docs": [
              " Storage fee per transaction."
            ]
          },
          {
            "name": "StoragePeriod",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Storage period for data in blocks. Should match `sp_storage_proof::DEFAULT_STORAGE_PERIOD`",
              " for block authoring."
            ]
          },
          {
            "name": "BlockTransactions",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_transaction_storage:TransactionInfo\u003e",
              "PlainTypeValue": 686
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "ProofChecked",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 42
            },
            "fallback": "0x00",
            "docs": [
              " Was the proof checked in this block?"
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2e00",
            "name": "store",
            "docs": [
              "Index and store data off chain. Minimum data size is 1 bytes, maximum is",
              "`MaxTransactionSize`. Data will be removed after `STORAGE_PERIOD` blocks, unless `renew`",
              "is called.",
              "## Complexity",
              "- O(n*log(n)) of data size, as all data is pushed to an in-memory trie."
            ],
            "args": [
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "2e01",
            "name": "renew",
            "docs": [
              "Renew previously stored data. Parameters are the block number that contains",
              "previous `store` or `renew` call and transaction index within that block.",
              "Transaction index is emitted in the `Stored` or `Renewed` event.",
              "Applies same fees as `store`.",
              "## Complexity",
              "- O(1)."
            ],
            "args": [
              {
                "name": "block",
                "type": "U32",
                "type_name": "BlockNumber"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2e02",
            "name": "check_proof",
            "docs": [
              "Check storage proof for block number `block_number() - StoragePeriod`.",
              "If such block does not exist the proof is expected to be `None`.",
              "## Complexity",
              "- Linear w.r.t the number of indexed transactions in the proved block for random",
              "  probing.",
              "There's a DB read for each transaction."
            ],
            "args": [
              {
                "name": "proof",
                "type": "sp_transaction_storage_proof:TransactionStorageProof",
                "type_name": "TransactionStorageProof"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 352
        },
        "events": [
          {
            "lookup": "2e00",
            "name": "Stored",
            "docs": [
              "Stored data under specified index."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "u32"
            ]
          },
          {
            "lookup": "2e01",
            "name": "Renewed",
            "docs": [
              "Renewed data under specified index."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "u32"
            ]
          },
          {
            "lookup": "2e02",
            "name": "ProofChecked",
            "docs": [
              "Storage proof was successfully checked."
            ],
            "args": null
          }
        ],
        "events_value": {
          "type": 125
        },
        "errors": [
          {
            "name": "InsufficientFunds",
            "doc": [
              "Insufficient account balance."
            ]
          },
          {
            "name": "NotConfigured",
            "doc": [
              "Invalid configuration."
            ]
          },
          {
            "name": "RenewedNotFound",
            "doc": [
              "Renewed extrinsic is not found."
            ]
          },
          {
            "name": "EmptyTransaction",
            "doc": [
              "Attempting to store empty transaction"
            ]
          },
          {
            "name": "UnexpectedProof",
            "doc": [
              "Proof was not expected in this block."
            ]
          },
          {
            "name": "InvalidProof",
            "doc": [
              "Proof failed verification."
            ]
          },
          {
            "name": "MissingProof",
            "doc": [
              "Missing storage proof."
            ]
          },
          {
            "name": "MissingStateData",
            "doc": [
              "Unable to verify proof becasue state data is missing."
            ]
          },
          {
            "name": "DoubleCheck",
            "doc": [
              "Double proof check in the block."
            ]
          },
          {
            "name": "ProofNotChecked",
            "doc": [
              "Storage proof was not checked in the block."
            ]
          },
          {
            "name": "TransactionTooLarge",
            "doc": [
              "Transaction is too large."
            ]
          },
          {
            "name": "TooManyTransactions",
            "doc": [
              "Too many transactions in the block."
            ]
          },
          {
            "name": "BadContext",
            "doc": [
              "Attempted to call `store` outside of block execution."
            ]
          }
        ],
        "errors_value": {
          "type": 689
        },
        "index": 46
      },
      {
        "name": "VoterList",
        "prefix": "VoterList",
        "storage": [
          {
            "name": "ListNodes",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_bags_list:list:Node",
                "keys_id": 0,
                "value_id": 690
              }
            },
            "fallback": "0x00",
            "docs": [
              " A single node, within some bag.",
              "",
              " Nodes store links forward and back within their respective bags."
            ]
          },
          {
            "name": "CounterForListNodes",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "ListBags",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U64"
                ],
                "value": "pallet_bags_list:list:Bag",
                "keys_id": 11,
                "value_id": 691
              }
            },
            "fallback": "0x00",
            "docs": [
              " A bag stored in storage.",
              "",
              " Stores a `Bag` struct, which stores head and tail pointers to itself."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2f00",
            "name": "rebag",
            "docs": [
              "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
              "changed its score that it should properly fall into a different bag than its current",
              "one.",
              "",
              "Anyone can call this function about any potentially dislocated account.",
              "",
              "Will always update the stored score of `dislocated` to the correct score, based on",
              "`ScoreProvider`.",
              "",
              "If `dislocated` does not exists, it returns an error."
            ],
            "args": [
              {
                "name": "dislocated",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2f01",
            "name": "put_in_front_of",
            "docs": [
              "Move the caller's Id directly in front of `lighter`.",
              "",
              "The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
              "the account going in front of `lighter`.",
              "",
              "Only works if",
              "- both nodes are within the same bag,",
              "- and `origin` has a greater `Score` than `lighter`."
            ],
            "args": [
              {
                "name": "lighter",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 354
        },
        "events": [
          {
            "lookup": "2f00",
            "name": "Rebagged",
            "docs": [
              "Moved an account from one bag to another."
            ],
            "args": [
              "[U8; 32]",
              "U64",
              "U64"
            ],
            "args_type_name": [
              "AccountId",
              "Score",
              "Score"
            ]
          },
          {
            "lookup": "2f01",
            "name": "ScoreUpdated",
            "docs": [
              "Updated the score of some account to the given amount."
            ],
            "args": [
              "[U8; 32]",
              "U64"
            ],
            "args_type_name": [
              "AccountId",
              "Score"
            ]
          }
        ],
        "events_value": {
          "type": 126
        },
        "constants": [
          {
            "name": "BagThresholds",
            "type": "Vec\u003cU64\u003e",
            "type_value": 692,
            "constants_value": "210300407a10f35a00006a70ccd4a96000009ef3397fbc660000a907ccd5306d00003d9a67fb0c740000a9bfa275577b0000a6fdf73217830000034f5d91538b0000132445651494000078081001629d00000302f63c45a70000392e6f7fc7b10000f59c23c6f2bc00004ae76aafd1c80000598a64846fd50000129fb243d8e200003f22e1ac18f1000033a4844c3e000100e2e51b895710010076a2c0b0732101006789b407a3330100793ed8d7f646010078131b81815b01000c1cf38a567101004437eeb68a8801009eb56d1434a10100335e9f156abb010067c3c7a545d701003218f340e1f40100de0b230d59140200699c11f5ca350200ad50a2c4565902009ae41c471e7f0200d0244e6745a70200f984ad51f2d10200ace7a7984dff0200a118325b822f0300ffa4c76dbe620300580bfd8532990300a9afce6812d30300109ad81b95100400d9caa519f551040038df488970970400bee1727949e10400cc73401fc62f0500b304f91831830500828bffb4d9db05001235383d143a0600a5b42a473a9e060036662d09ab080700f73aeab4cb790700b87e93d707f20700ffec23c0d1710800b84b0beca2f90800c9dcae7afc89090091752ba867230a0064f1cd4f76c60a003609be76c3730b0078655fdff32b0c00a407f5a5b6ef0c0052f61be7c5bf0d00da71bb70e79c0e000de9127eed870f001477987fb7811000ebee65ef328b11001269fe325ca5120033f8428b3fd113008ba57a13fa0f15001b2b60d0ba6216000d1d37d0c3ca17006c64fa5c6b4919002622c7411de01a00045bb9245c901c00233d83f6c25b1e00c8771c79064420003013fddef64a2200aa8b6e848172240082c096c4b2bc260016a3faebb72b29008296524ae1c12b00a636a865a4812e00d0e2d4509e6d31009c0a9a2796883400e4faafb27fd53700e6e64d367e573b000e4bd66de7113f0088b17db746084300b07def72603e470034de249635b84b00d48bd57b077a5000d0bd20ef5b885500b8f0467801e85a0010f88aee139e60003892925301b066009c95e4fc8e236d00b4126d10dffe730028b43e5976487b00a08a1c7a42078300b09ab083a0428b002846b2f463029400c861a42ade4e9d0050d23d4ae630a700805101a7e1b1b10038e501b2ccdbbc002016527844b9c800388924ba9055d50070ca35a4aebce200805fb1355cfbf0008035685d241f0001a0c3dcd96b361001d07862e87e50210160e852d09f7d330190662c5816cf460110274c3340575b01804be277a22971013082b92dfc5a880180d276075a01a101b0f511592b34bb014031745f580cd701802f6cee59a4f40140ff799b521814026075607d2986350260fde999a60d590200e5e71c91d07e02c0df2575cff2a602a07fd975899ad102a067009d4cf0fe0220dc29a1321f2f0320ff526b0a5562038088caa383c29803e05683fb5c9bd203401dd75d9516100400317e39a06e5104c0b071129de1960480b48c9192b1e00480e8124aad242f05c007ca7082858205007c13c45623db0540836fe869523906c0700f81466c9d0640f09c5017d00707c0e624b301e37807c0332ac78510f10780074ca1e4ca700800d5a9eb8c8bf80800a849588ed3880900804254142c220a80a25170e826c50a00e8d5fafc5e720b801df64e00792a0c80d4fe64f923ee0c006dd038ee19be0d001e90a494209b0e0010bf570e0a860f00da6a9db0b57f1000bf64afd810891100bb5b60cd17a31200f963f3aed6ce1300d5f004766a0d1500e099770202601600103d663bdfc71700de3e2d4158461900ecdbadb2d8dc1a0045c70007e38c1c00b8bde0fc11581e00ba5c2a211a402000407de46dcb462200dea55b03136e2400aaf1f3fcfcb7260014226f63b62629006492803e8fbc2b008486a6c7fc7b2e002cf05fc09b673100da63f7ed32823400f0b13fbdb5ce3700f291c41047503b00422a1a3c3c0a3f002c24212f20004300ac9342d4b6354700cc6ed7a400af4b00c4d022773e70500020017d89f57d5500f86387cef3dc5a008c4c7f7e54926000206207f284a36600cc1e05cb49166d00b42a7a70c4f07300d43a90e278397b0038f461ec53f78200a07264b9b1318b0048c9b3d464f09300007fe998bd3b9d0010058f17921ca70000dfaf7f469cb100e80c880bd6c4bc0058bdcb7ddca0c80038d18d37a03bd50030d55bf01ca1e200704ac01a0fdef0ffffffffffffffff",
            "docs": [
              " The list of thresholds separating the various bags.",
              "",
              " Ids are separated into unsorted bags according to their score. This specifies the",
              " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
              " is less than or equal to its upper threshold.",
              "",
              " When ids are iterated, higher bags are iterated completely before lower bags. This means",
              " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
              " score, but peer ids within a particular bag are sorted in insertion order.",
              "",
              " # Expressing the constant",
              "",
              " This constant must be sorted in strictly increasing order. Duplicate items are not",
              " permitted.",
              "",
              " There is an implied upper limit of `Score::MAX`; that value does not need to be",
              " specified within the bag. For any two threshold lists, if one ends with",
              " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
              " lists will behave identically.",
              "",
              " # Calculation",
              "",
              " It is recommended to generate the set of thresholds in a geometric series, such that",
              " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
              " constant_ratio).max(threshold[k] + 1)` for all `k`.",
              "",
              " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
              "",
              " # Examples",
              "",
              " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
              "   iteration is strictly in insertion order.",
              " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
              "   the procedure given above, then the constant ratio is equal to 2.",
              " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
              "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
              " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
              "   into bag 0, an id with score 2 will fall into bag 1, etc.",
              "",
              " # Migration",
              "",
              " In the event that this list ever changes, a copy of the old bags list must be retained.",
              " With that `List::migrate` can be called, which will perform the appropriate migration."
            ]
          }
        ],
        "errors": [
          {
            "name": "List",
            "doc": [
              "A error in the list interface implementation."
            ]
          }
        ],
        "errors_value": {
          "type": 693
        },
        "index": 47
      },
      {
        "name": "StateTrieMigration",
        "prefix": "StateTrieMigration",
        "storage": [
          {
            "name": "MigrationProcess",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_state_trie_migration:pallet:MigrationTask",
              "PlainTypeValue": 358
            },
            "fallback": "0x0000000000000000000000000000",
            "docs": [
              " Migration progress.",
              "",
              " This stores the snapshot of the last migrated keys. It can be set into motion and move",
              " forward by any of the means provided by this pallet."
            ]
          },
          {
            "name": "AutoLimits",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "option\u003cpallet_state_trie_migration:pallet:MigrationLimits\u003e",
              "PlainTypeValue": 356
            },
            "fallback": "0x00",
            "docs": [
              " The limits that are imposed on automatic migrations.",
              "",
              " If set to None, then no automatic migration happens."
            ]
          },
          {
            "name": "SignedMigrationMaxLimits",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_state_trie_migration:pallet:MigrationLimits",
              "PlainTypeValue": 357
            },
            "fallback": "0x00",
            "docs": [
              " The maximum limits that the signed migration could use.",
              "",
              " If not set, no signed submission is allowed."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3000",
            "name": "control_auto_migration",
            "docs": [
              "Control the automatic migration.",
              "",
              "The dispatch origin of this call must be [`Config::ControlOrigin`]."
            ],
            "args": [
              {
                "name": "maybe_config",
                "type": "option\u003cpallet_state_trie_migration:pallet:MigrationLimits\u003e",
                "type_name": "Option\u003cMigrationLimits\u003e"
              }
            ]
          },
          {
            "lookup": "3001",
            "name": "continue_migrate",
            "docs": [
              "Continue the migration for the given `limits`.",
              "",
              "The dispatch origin of this call can be any signed account.",
              "",
              "This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,",
              "Upon successful execution, the transaction fee is returned.",
              "",
              "The (potentially over-estimated) of the byte length of all the data read must be",
              "provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing",
              "that executing the current `MigrationTask` with the given `limits` will not exceed",
              "`real_size_upper` bytes of read data.",
              "",
              "The `witness_task` is merely a helper to prevent the caller from being slashed or",
              "generally trigger a migration that they do not intend. This parameter is just a message",
              "from caller, saying that they believed `witness_task` was the last state of the",
              "migration, and they only wish for their transaction to do anything, if this assumption",
              "holds. In case `witness_task` does not match, the transaction fails.",
              "",
              "Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the",
              "recommended way of doing this is to pass a `limit` that only bounds `count`, as the",
              "`size` limit can always be overwritten."
            ],
            "args": [
              {
                "name": "limits",
                "type": "pallet_state_trie_migration:pallet:MigrationLimits",
                "type_name": "MigrationLimits"
              },
              {
                "name": "real_size_upper",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "witness_task",
                "type": "pallet_state_trie_migration:pallet:MigrationTask",
                "type_name": "MigrationTask"
              }
            ]
          },
          {
            "lookup": "3002",
            "name": "migrate_custom_top",
            "docs": [
              "Migrate the list of top keys by iterating each of them one by one.",
              "",
              "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
              "should only be used in case any keys are leftover due to a bug."
            ],
            "args": [
              {
                "name": "keys",
                "type": "Vec\u003cVec\u003cU8\u003e\u003e",
                "type_name": "Vec\u003cVec\u003cu8\u003e\u003e"
              },
              {
                "name": "witness_size",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3003",
            "name": "migrate_custom_child",
            "docs": [
              "Migrate the list of child keys by iterating each of them one by one.",
              "",
              "All of the given child keys must be present under one `child_root`.",
              "",
              "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
              "should only be used in case any keys are leftover due to a bug."
            ],
            "args": [
              {
                "name": "root",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "child_keys",
                "type": "Vec\u003cVec\u003cU8\u003e\u003e",
                "type_name": "Vec\u003cVec\u003cu8\u003e\u003e"
              },
              {
                "name": "total_size",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3004",
            "name": "set_signed_max_limits",
            "docs": [
              "Set the maximum limit of the signed migration."
            ],
            "args": [
              {
                "name": "limits",
                "type": "pallet_state_trie_migration:pallet:MigrationLimits",
                "type_name": "MigrationLimits"
              }
            ]
          },
          {
            "lookup": "3005",
            "name": "force_set_progress",
            "docs": [
              "Forcefully set the progress the running migration.",
              "",
              "This is only useful in one case: the next key to migrate is too big to be migrated with",
              "a signed account, in a parachain context, and we simply want to skip it. A reasonable",
              "example of this would be `:code:`, which is both very expensive to migrate, and commonly",
              "used, so probably it is already migrated.",
              "",
              "In case you mess things up, you can also, in principle, use this to reset the migration",
              "process."
            ],
            "args": [
              {
                "name": "progress_top",
                "type": "pallet_state_trie_migration:pallet:Progress",
                "type_name": "ProgressOf"
              },
              {
                "name": "progress_child",
                "type": "pallet_state_trie_migration:pallet:Progress",
                "type_name": "ProgressOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 355
        },
        "events": [
          {
            "lookup": "3000",
            "name": "Migrated",
            "docs": [
              "Given number of `(top, child)` keys were migrated respectively, with the given",
              "`compute`."
            ],
            "args": [
              "U32",
              "U32",
              "pallet_state_trie_migration:pallet:MigrationCompute"
            ],
            "args_type_name": [
              "u32",
              "u32",
              "MigrationCompute"
            ]
          },
          {
            "lookup": "3001",
            "name": "Slashed",
            "docs": [
              "Some account got slashed by the given amount."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3002",
            "name": "AutoMigrationFinished",
            "docs": [
              "The auto migration task finished."
            ],
            "args": null
          },
          {
            "lookup": "3003",
            "name": "Halted",
            "docs": [
              "Migration got halted due to an error or miss-configuration."
            ],
            "args": [
              "pallet_state_trie_migration:pallet:Error"
            ],
            "args_type_name": [
              "Error"
            ]
          }
        ],
        "events_value": {
          "type": 127
        },
        "constants": [
          {
            "name": "MaxKeyLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00020000",
            "docs": [
              " Maximal number of bytes that a key can have.",
              "",
              " FRAME itself does not limit the key length.",
              " The concrete value must therefore depend on your storage usage.",
              " A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number of",
              " keys which are then hashed and concatenated, resulting in arbitrarily long keys.",
              "",
              " Use the *state migration RPC* to retrieve the length of the longest key in your",
              " storage: \u003chttps://github.com/paritytech/substrate/issues/11642\u003e",
              "",
              " The migration will halt with a `Halted` event if this value is too small.",
              " Since there is no real penalty from over-estimating, it is advised to use a large",
              " value. The default is 512 byte.",
              "",
              " Some key lengths for reference:",
              " - [`frame_support::storage::StorageValue`]: 32 byte",
              " - [`frame_support::storage::StorageMap`]: 64 byte",
              " - [`frame_support::storage::StorageDoubleMap`]: 96 byte",
              "",
              " For more info see",
              " \u003chttps://www.shawntabrizi.com/substrate/querying-substrate-storage-via-rpc/\u003e"
            ]
          }
        ],
        "errors": [
          {
            "name": "MaxSignedLimits",
            "doc": [
              "Max signed limits not respected."
            ]
          },
          {
            "name": "KeyTooLong",
            "doc": [
              "A key was longer than the configured maximum.",
              "",
              "This means that the migration halted at the current [`Progress`] and",
              "can be resumed with a larger [`crate::Config::MaxKeyLen`] value.",
              "Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.",
              "The value should only be increased to avoid a storage migration for the currently",
              "stored [`crate::Progress::LastKey`]."
            ]
          },
          {
            "name": "NotEnoughFunds",
            "doc": [
              "submitter does not have enough funds."
            ]
          },
          {
            "name": "BadWitness",
            "doc": [
              "Bad witness data provided."
            ]
          },
          {
            "name": "SignedMigrationNotAllowed",
            "doc": [
              "Signed migration is not allowed because the maximum limit is not set yet."
            ]
          },
          {
            "name": "BadChildRoot",
            "doc": [
              "Bad child root provided."
            ]
          }
        ],
        "errors_value": {
          "type": 129
        },
        "index": 48
      },
      {
        "name": "ChildBounties",
        "prefix": "ChildBounties",
        "storage": [
          {
            "name": "ChildBountyCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Number of total child bounties."
            ]
          },
          {
            "name": "ParentChildBounties",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " Number of child bounties per parent bounty.",
              " Map of parent bounty index to number of child bounties."
            ]
          },
          {
            "name": "ChildBounties",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_child_bounties:ChildBounty",
                "keys_id": 90,
                "value_id": 695
              }
            },
            "fallback": "0x00",
            "docs": [
              " Child bounties that have been added."
            ]
          },
          {
            "name": "ChildBountyDescriptions",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 624
              }
            },
            "fallback": "0x00",
            "docs": [
              " The description of each child-bounty."
            ]
          },
          {
            "name": "ChildrenCuratorFees",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U128",
                "keys_id": 4,
                "value_id": 6
              }
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The cumulative child-bounty curator fee for each parent bounty."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3100",
            "name": "add_child_bounty",
            "docs": [
              "Add a new child-bounty.",
              "",
              "The dispatch origin for this call must be the curator of parent",
              "bounty and the parent bounty must be in \"active\" state.",
              "",
              "Child-bounty gets added successfully \u0026 fund gets transferred from",
              "parent bounty to child-bounty account, if parent bounty has enough",
              "funds, else the call fails.",
              "",
              "Upper bound to maximum number of active  child bounties that can be",
              "added are managed via runtime trait config",
              "[`Config::MaxActiveChildBountyCount`].",
              "",
              "If the call is success, the status of child-bounty is updated to",
              "\"Added\".",
              "",
              "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.",
              "- `value`: Value for executing the proposal.",
              "- `description`: Text description for the child-bounty."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "description",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "3101",
            "name": "propose_curator",
            "docs": [
              "Propose curator for funded child-bounty.",
              "",
              "The dispatch origin for this call must be curator of parent bounty.",
              "",
              "Parent bounty must be in active state, for this child-bounty call to",
              "work.",
              "",
              "Child-bounty must be in \"Added\" state, for processing the call. And",
              "state of child-bounty is moved to \"CuratorProposed\" on successful",
              "call completion.",
              "",
              "- `parent_bounty_id`: Index of parent bounty.",
              "- `child_bounty_id`: Index of child bounty.",
              "- `curator`: Address of child-bounty curator.",
              "- `fee`: payment fee to child-bounty curator for execution."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "curator",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "fee",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "3102",
            "name": "accept_curator",
            "docs": [
              "Accept the curator role for the child-bounty.",
              "",
              "The dispatch origin for this call must be the curator of this",
              "child-bounty.",
              "",
              "A deposit will be reserved from the curator and refund upon",
              "successful payout or cancellation.",
              "",
              "Fee for curator is deducted from curator fee of parent bounty.",
              "",
              "Parent bounty must be in active state, for this child-bounty call to",
              "work.",
              "",
              "Child-bounty must be in \"CuratorProposed\" state, for processing the",
              "call. And state of child-bounty is moved to \"Active\" on successful",
              "call completion.",
              "",
              "- `parent_bounty_id`: Index of parent bounty.",
              "- `child_bounty_id`: Index of child bounty."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "3103",
            "name": "unassign_curator",
            "docs": [
              "Unassign curator from a child-bounty.",
              "",
              "The dispatch origin for this call can be either `RejectOrigin`, or",
              "the curator of the parent bounty, or any signed origin.",
              "",
              "For the origin other than T::RejectOrigin and the child-bounty",
              "curator, parent bounty must be in active state, for this call to",
              "work. We allow child-bounty curator and T::RejectOrigin to execute",
              "this call irrespective of the parent bounty state.",
              "",
              "If this function is called by the `RejectOrigin` or the",
              "parent bounty curator, we assume that the child-bounty curator is",
              "malicious or inactive. As a result, child-bounty curator deposit is",
              "slashed.",
              "",
              "If the origin is the child-bounty curator, we take this as a sign",
              "that they are unable to do their job, and are willingly giving up.",
              "We could slash the deposit, but for now we allow them to unreserve",
              "their deposit and exit without issue. (We may want to change this if",
              "it is abused.)",
              "",
              "Finally, the origin can be anyone iff the child-bounty curator is",
              "\"inactive\". Expiry update due of parent bounty is used to estimate",
              "inactive state of child-bounty curator.",
              "",
              "This allows anyone in the community to call out that a child-bounty",
              "curator is not doing their due diligence, and we should pick a new",
              "one. In this case the child-bounty curator deposit is slashed.",
              "",
              "State of child-bounty is moved to Added state on successful call",
              "completion.",
              "",
              "- `parent_bounty_id`: Index of parent bounty.",
              "- `child_bounty_id`: Index of child bounty."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "3104",
            "name": "award_child_bounty",
            "docs": [
              "Award child-bounty to a beneficiary.",
              "",
              "The beneficiary will be able to claim the funds after a delay.",
              "",
              "The dispatch origin for this call must be the parent curator or",
              "curator of this child-bounty.",
              "",
              "Parent bounty must be in active state, for this child-bounty call to",
              "work.",
              "",
              "Child-bounty must be in active state, for processing the call. And",
              "state of child-bounty is moved to \"PendingPayout\" on successful call",
              "completion.",
              "",
              "- `parent_bounty_id`: Index of parent bounty.",
              "- `child_bounty_id`: Index of child bounty.",
              "- `beneficiary`: Beneficiary account."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3105",
            "name": "claim_child_bounty",
            "docs": [
              "Claim the payout from an awarded child-bounty after payout delay.",
              "",
              "The dispatch origin for this call may be any signed origin.",
              "",
              "Call works independent of parent bounty state, No need for parent",
              "bounty to be in active state.",
              "",
              "The Beneficiary is paid out with agreed bounty value. Curator fee is",
              "paid \u0026 curator deposit is unreserved.",
              "",
              "Child-bounty must be in \"PendingPayout\" state, for processing the",
              "call. And instance of child-bounty is removed from the state on",
              "successful call completion.",
              "",
              "- `parent_bounty_id`: Index of parent bounty.",
              "- `child_bounty_id`: Index of child bounty."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "3106",
            "name": "close_child_bounty",
            "docs": [
              "Cancel a proposed or active child-bounty. Child-bounty account funds",
              "are transferred to parent bounty account. The child-bounty curator",
              "deposit may be unreserved if possible.",
              "",
              "The dispatch origin for this call must be either parent curator or",
              "`T::RejectOrigin`.",
              "",
              "If the state of child-bounty is `Active`, curator deposit is",
              "unreserved.",
              "",
              "If the state of child-bounty is `PendingPayout`, call fails \u0026",
              "returns `PendingPayout` error.",
              "",
              "For the origin other than T::RejectOrigin, parent bounty must be in",
              "active state, for this child-bounty call to work. For origin",
              "T::RejectOrigin execution is forced.",
              "",
              "Instance of child-bounty is removed from the state on successful",
              "call completion.",
              "",
              "- `parent_bounty_id`: Index of parent bounty.",
              "- `child_bounty_id`: Index of child bounty."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 361
        },
        "events": [
          {
            "lookup": "3100",
            "name": "Added",
            "docs": [
              "A child-bounty is added."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "BountyIndex",
              "BountyIndex"
            ]
          },
          {
            "lookup": "3101",
            "name": "Awarded",
            "docs": [
              "A child-bounty is awarded to a beneficiary."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "BountyIndex",
              "BountyIndex",
              "AccountId"
            ]
          },
          {
            "lookup": "3102",
            "name": "Claimed",
            "docs": [
              "A child-bounty is claimed by beneficiary."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "[U8; 32]"
            ],
            "args_type_name": [
              "BountyIndex",
              "BountyIndex",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "3103",
            "name": "Canceled",
            "docs": [
              "A child-bounty is cancelled."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "BountyIndex",
              "BountyIndex"
            ]
          }
        ],
        "events_value": {
          "type": 130
        },
        "constants": [
          {
            "name": "MaxActiveChildBountyCount",
            "type": "U32",
            "type_value": 4,
            "constants_value": "05000000",
            "docs": [
              " Maximum number of child bounties that can be added to a parent bounty."
            ]
          },
          {
            "name": "ChildBountyValueMinimum",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " Minimum value for a child-bounty."
            ]
          }
        ],
        "errors": [
          {
            "name": "ParentBountyNotActive",
            "doc": [
              "The parent bounty is not in active state."
            ]
          },
          {
            "name": "InsufficientBountyBalance",
            "doc": [
              "The bounty balance is not enough to add new child-bounty."
            ]
          },
          {
            "name": "TooManyChildBounties",
            "doc": [
              "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."
            ]
          }
        ],
        "errors_value": {
          "type": 697
        },
        "index": 49
      },
      {
        "name": "Referenda",
        "prefix": "Referenda",
        "storage": [
          {
            "name": "ReferendumCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The next free referendum index, aka the number of referenda started so far."
            ]
          },
          {
            "name": "ReferendumInfoFor",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_referenda:types:ReferendumInfo@698",
                "keys_id": 4,
                "value_id": 698
              }
            },
            "fallback": "0x00",
            "docs": [
              " Information concerning any given referendum."
            ]
          },
          {
            "name": "TrackQueue",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16"
                ],
                "value": "Vec\u003cTuple:U32U128\u003e",
                "keys_id": 96,
                "value_id": 706
              }
            },
            "fallback": "0x00",
            "docs": [
              " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
              " conviction-weighted approvals.",
              "",
              " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
            ]
          },
          {
            "name": "DecidingCount",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16"
                ],
                "value": "U32",
                "keys_id": 96,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of referenda being decided currently."
            ]
          },
          {
            "name": "MetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "H256",
                "keys_id": 4,
                "value_id": 12
              }
            },
            "fallback": "0x00",
            "docs": [
              " The metadata is a general information concerning the referendum.",
              " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
              " dump or IPFS hash of a JSON file.",
              "",
              " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
              " large preimages."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3200",
            "name": "submit",
            "docs": [
              "Propose a referendum on a privileged action.",
              "",
              "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
              "  available.",
              "- `proposal_origin`: The origin from which the proposal should be executed.",
              "- `proposal`: The proposal.",
              "- `enactment_moment`: The moment that the proposal should be enacted.",
              "",
              "Emits `Submitted`."
            ],
            "args": [
              {
                "name": "proposal_origin",
                "type": "kitchensink_runtime:OriginCaller",
                "type_name": "Box\u003cPalletsOriginOf\u003e"
              },
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              },
              {
                "name": "enactment_moment",
                "type": "frame_support:traits:schedule:DispatchTime",
                "type_name": "DispatchTime\u003cBlockNumber\u003e"
              }
            ]
          },
          {
            "lookup": "3201",
            "name": "place_decision_deposit",
            "docs": [
              "Post the Decision Deposit for a referendum.",
              "",
              "- `origin`: must be `Signed` and the account must have funds available for the",
              "  referendum's track's Decision Deposit.",
              "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
              "  posted.",
              "",
              "Emits `DecisionDepositPlaced`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3202",
            "name": "refund_decision_deposit",
            "docs": [
              "Refund the Decision Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `DecisionDepositRefunded`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3203",
            "name": "cancel",
            "docs": [
              "Cancel an ongoing referendum.",
              "",
              "- `origin`: must be the `CancelOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Cancelled`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3204",
            "name": "kill",
            "docs": [
              "Cancel an ongoing referendum and slash the deposits.",
              "",
              "- `origin`: must be the `KillOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Killed` and `DepositSlashed`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3205",
            "name": "nudge_referendum",
            "docs": [
              "Advance a referendum onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `index`: the referendum to be advanced."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3206",
            "name": "one_fewer_deciding",
            "docs": [
              "Advance a track onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `track`: the track to be advanced.",
              "",
              "Action item for when there is now one fewer referendum in the deciding phase and the",
              "`DecidingCount` is not yet updated. This means that we should either:",
              "- begin deciding another referendum (and leave `DecidingCount` alone); or",
              "- decrement `DecidingCount`."
            ],
            "args": [
              {
                "name": "track",
                "type": "U16",
                "type_name": "TrackIdOf"
              }
            ]
          },
          {
            "lookup": "3207",
            "name": "refund_submission_deposit",
            "docs": [
              "Refund the Submission Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `SubmissionDepositRefunded`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3208",
            "name": "set_metadata",
            "docs": [
              "Set or clear metadata of a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
              "  metadata of a finished referendum.",
              "- `index`:  The index of a referendum to set or clear metadata for.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              },
              {
                "name": "maybe_hash",
                "type": "option\u003cH256\u003e",
                "type_name": "Option\u003cPreimageHash\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 362
        },
        "events": [
          {
            "lookup": "3200",
            "name": "Submitted",
            "docs": [
              "A referendum has been submitted."
            ],
            "args": [
              "U32",
              "U16",
              "frame_support:traits:preimages:Bounded"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "TrackIdOf",
              "BoundedCallOf"
            ]
          },
          {
            "lookup": "3201",
            "name": "DecisionDepositPlaced",
            "docs": [
              "The decision deposit has been placed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3202",
            "name": "DecisionDepositRefunded",
            "docs": [
              "The decision deposit has been refunded."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3203",
            "name": "DepositSlashed",
            "docs": [
              "A deposit has been slashaed."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3204",
            "name": "DecisionStarted",
            "docs": [
              "A referendum has moved into the deciding phase."
            ],
            "args": [
              "U32",
              "U16",
              "frame_support:traits:preimages:Bounded",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "TrackIdOf",
              "BoundedCallOf",
              "Tally"
            ]
          },
          {
            "lookup": "3205",
            "name": "ConfirmStarted",
            "docs": null,
            "args": [
              "U32"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3206",
            "name": "ConfirmAborted",
            "docs": null,
            "args": [
              "U32"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3207",
            "name": "Confirmed",
            "docs": [
              "A referendum has ended its confirmation phase and is ready for approval."
            ],
            "args": [
              "U32",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3208",
            "name": "Approved",
            "docs": [
              "A referendum has been approved and its proposal has been scheduled."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3209",
            "name": "Rejected",
            "docs": [
              "A proposal has been rejected by referendum."
            ],
            "args": [
              "U32",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "320a",
            "name": "TimedOut",
            "docs": [
              "A referendum has been timed out without being decided."
            ],
            "args": [
              "U32",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "320b",
            "name": "Cancelled",
            "docs": [
              "A referendum has been cancelled."
            ],
            "args": [
              "U32",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "320c",
            "name": "Killed",
            "docs": [
              "A referendum has been killed."
            ],
            "args": [
              "U32",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "320d",
            "name": "SubmissionDepositRefunded",
            "docs": [
              "The submission deposit has been refunded."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "320e",
            "name": "MetadataSet",
            "docs": [
              "Metadata for a referendum has been set."
            ],
            "args": [
              "U32",
              "H256"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "PreimageHash"
            ]
          },
          {
            "lookup": "320f",
            "name": "MetadataCleared",
            "docs": [
              "Metadata for a referendum has been cleared."
            ],
            "args": [
              "U32",
              "H256"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "PreimageHash"
            ]
          }
        ],
        "events_value": {
          "type": 131
        },
        "constants": [
          {
            "name": "SubmissionDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "name": "MaxQueued",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " Maximum size of the referendum queue for a single track."
            ]
          },
          {
            "name": "UndecidingTimeout",
            "type": "U32",
            "type_value": 4,
            "constants_value": "004e0c00",
            "docs": [
              " The number of blocks after submission that a referendum must begin being decided by.",
              " Once this passes, then anyone may cancel the referendum."
            ]
          },
          {
            "name": "AlarmInterval",
            "type": "U32",
            "type_value": 4,
            "constants_value": "01000000",
            "docs": [
              " Quantization level for the referendum wakeup scheduler. A higher number will result in",
              " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
              " automatic referendum status changes. Explicit servicing instructions are unaffected."
            ]
          },
          {
            "name": "Tracks",
            "type": "Vec\u003cTuple:U16pallet_referenda:types:TrackInfo\u003e",
            "type_value": 707,
            "constants_value": "04000010726f6f74010000000a000000000000000000000000000000040000000400000002000000040000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b0000000000ca9a3b",
            "docs": [
              " Information concerning the different referendum tracks."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotOngoing",
            "doc": [
              "Referendum is not ongoing."
            ]
          },
          {
            "name": "HasDeposit",
            "doc": [
              "Referendum's decision deposit is already paid."
            ]
          },
          {
            "name": "BadTrack",
            "doc": [
              "The track identifier given was invalid."
            ]
          },
          {
            "name": "Full",
            "doc": [
              "There are already a full complement of referenda in progress for this track."
            ]
          },
          {
            "name": "QueueEmpty",
            "doc": [
              "The queue of the track is empty."
            ]
          },
          {
            "name": "BadReferendum",
            "doc": [
              "The referendum index provided is invalid in this context."
            ]
          },
          {
            "name": "NothingToDo",
            "doc": [
              "There was nothing to do in the advancement."
            ]
          },
          {
            "name": "NoTrack",
            "doc": [
              "No track exists for the proposal origin."
            ]
          },
          {
            "name": "Unfinished",
            "doc": [
              "Any deposit cannot be refunded until after the decision is over."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The deposit refunder is not the depositor."
            ]
          },
          {
            "name": "NoDeposit",
            "doc": [
              "The deposit cannot be refunded since none was made."
            ]
          },
          {
            "name": "BadStatus",
            "doc": [
              "The referendum status is invalid for this operation."
            ]
          },
          {
            "name": "PreimageNotExist",
            "doc": [
              "The preimage does not exist."
            ]
          }
        ],
        "errors_value": {
          "type": 713
        },
        "index": 50
      },
      {
        "name": "Remark",
        "prefix": "",
        "storage": null,
        "calls": [
          {
            "lookup": "3300",
            "name": "store",
            "docs": [
              "Index and store data off chain."
            ],
            "args": [
              {
                "name": "remark",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 364
        },
        "events": [
          {
            "lookup": "3300",
            "name": "Stored",
            "docs": [
              "Stored data off chain."
            ],
            "args": [
              "[U8; 32]",
              "H256"
            ],
            "args_type_name": [
              "AccountId",
              "sp_core::H256"
            ]
          }
        ],
        "events_value": {
          "type": 399
        },
        "errors": [
          {
            "name": "Empty",
            "doc": [
              "Attempting to store empty data."
            ]
          },
          {
            "name": "BadContext",
            "doc": [
              "Attempted to call `store` outside of block execution."
            ]
          }
        ],
        "errors_value": {
          "type": 714
        },
        "index": 51
      },
      {
        "name": "RootTesting",
        "prefix": "",
        "storage": null,
        "calls": [
          {
            "lookup": "3400",
            "name": "fill_block",
            "docs": [
              "A dispatch that will fill the block weight up to the given ratio."
            ],
            "args": [
              {
                "name": "ratio",
                "type": "U32",
                "type_name": "Perbill"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 365
        },
        "errors": null,
        "errors_value": null,
        "index": 52
      },
      {
        "name": "ConvictionVoting",
        "prefix": "ConvictionVoting",
        "storage": [
          {
            "name": "VotingFor",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U16"
                ],
                "value": "pallet_conviction_voting:vote:Voting",
                "keys_id": 715,
                "value_id": 716
              }
            },
            "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " All voting for a particular voter in a particular voting class. We store the balance for the",
              " number of votes that we have recorded."
            ]
          },
          {
            "name": "ClassLocksFor",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cTuple:U16U128\u003e",
                "keys_id": 0,
                "value_id": 724
              }
            },
            "fallback": "0x00",
            "docs": [
              " The voting classes which have a non-zero lock requirement and the lock amounts which they",
              " require. The actual amount locked on behalf of this pallet should always be the maximum of",
              " this list."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3500",
            "name": "vote",
            "docs": [
              "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
              "otherwise it is a vote to keep the status quo.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `poll_index`: The index of the poll to vote for.",
              "- `vote`: The vote configuration.",
              "",
              "Weight: `O(R)` where R is the number of polls the voter has voted on."
            ],
            "args": [
              {
                "name": "poll_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "PollIndexOf"
              },
              {
                "name": "vote",
                "type": "pallet_conviction_voting:vote:AccountVote",
                "type_name": "AccountVote\u003cBalanceOf\u003e"
              }
            ]
          },
          {
            "lookup": "3501",
            "name": "delegate",
            "docs": [
              "Delegate the voting power (with some given conviction) of the sending account for a",
              "particular class of polls.",
              "",
              "The balance delegated is locked for as long as it's delegated, and thereafter for the",
              "time appropriate for the conviction's lock period.",
              "",
              "The dispatch origin of this call must be _Signed_, and the signing account must either:",
              "  - be delegating already; or",
              "  - have no voting activity (if there is, then it will need to be removed/consolidated",
              "    through `reap_vote` or `unvote`).",
              "",
              "- `to`: The account whose voting the `target` account's voting power will follow.",
              "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
              "  to this function are required.",
              "- `conviction`: The conviction that will be attached to the delegated votes. When the",
              "  account is undelegated, the funds will be locked for the corresponding period.",
              "- `balance`: The amount of the account's balance to be used in delegating. This must not",
              "  be more than the account's current balance.",
              "",
              "Emits `Delegated`.",
              "",
              "Weight: `O(R)` where R is the number of polls the voter delegating to has",
              "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
            ],
            "args": [
              {
                "name": "class",
                "type": "U16",
                "type_name": "ClassOf"
              },
              {
                "name": "to",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "conviction",
                "type": "pallet_conviction_voting:conviction:Conviction",
                "type_name": "Conviction"
              },
              {
                "name": "balance",
                "type": "U128",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "3502",
            "name": "undelegate",
            "docs": [
              "Undelegate the voting power of the sending account for a particular class of polls.",
              "",
              "Tokens may be unlocked following once an amount of time consistent with the lock period",
              "of the conviction with which the delegation was issued has passed.",
              "",
              "The dispatch origin of this call must be _Signed_ and the signing account must be",
              "currently delegating.",
              "",
              "- `class`: The class of polls to remove the delegation from.",
              "",
              "Emits `Undelegated`.",
              "",
              "Weight: `O(R)` where R is the number of polls the voter delegating to has",
              "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
            ],
            "args": [
              {
                "name": "class",
                "type": "U16",
                "type_name": "ClassOf"
              }
            ]
          },
          {
            "lookup": "3503",
            "name": "unlock",
            "docs": [
              "Remove the lock caused by prior voting/delegating which has expired within a particular",
              "class.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `class`: The class of polls to unlock.",
              "- `target`: The account to remove the lock on.",
              "",
              "Weight: `O(R)` with R number of vote of target."
            ],
            "args": [
              {
                "name": "class",
                "type": "U16",
                "type_name": "ClassOf"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3504",
            "name": "remove_vote",
            "docs": [
              "Remove a vote for a poll.",
              "",
              "If:",
              "- the poll was cancelled, or",
              "- the poll is ongoing, or",
              "- the poll has ended such that",
              "  - the vote of the account was in opposition to the result; or",
              "  - there was no conviction to the account's vote; or",
              "  - the account made a split vote",
              "...then the vote is removed cleanly and a following call to `unlock` may result in more",
              "funds being available.",
              "",
              "If, however, the poll has ended and:",
              "- it finished corresponding to the vote of the account, and",
              "- the account made a standard vote with conviction, and",
              "- the lock period of the conviction is not over",
              "...then the lock will be aggregated into the overall account's lock, which may involve",
              "*overlocking* (where the two locks are combined into a single lock that is the maximum",
              "of both the amount locked and the time is it locked for).",
              "",
              "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
              "registered for poll `index`.",
              "",
              "- `index`: The index of poll of the vote to be removed.",
              "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
              "  which have finished or are cancelled, this must be `Some`.",
              "",
              "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ],
            "args": [
              {
                "name": "class",
                "type": "option\u003cU16\u003e",
                "type_name": "Option\u003cClassOf\u003e"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "PollIndexOf"
              }
            ]
          },
          {
            "lookup": "3505",
            "name": "remove_other_vote",
            "docs": [
              "Remove a vote for a poll.",
              "",
              "If the `target` is equal to the signer, then this function is exactly equivalent to",
              "`remove_vote`. If not equal to the signer, then the vote must have expired,",
              "either because the poll was cancelled, because the voter lost the poll or",
              "because the conviction period is over.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account of the vote to be removed; this account must have voted for poll",
              "  `index`.",
              "- `index`: The index of poll of the vote to be removed.",
              "- `class`: The class of the poll.",
              "",
              "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "class",
                "type": "U16",
                "type_name": "ClassOf"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "PollIndexOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 366
        },
        "events": [
          {
            "lookup": "3500",
            "name": "Delegated",
            "docs": [
              "An account has delegated their vote to another account. \\[who, target\\]"
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "3501",
            "name": "Undelegated",
            "docs": [
              "An \\[account\\] has cancelled a previous delegation operation."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 400
        },
        "constants": [
          {
            "name": "MaxVotes",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00020000",
            "docs": [
              " The maximum number of concurrent votes an account may have.",
              "",
              " Also used to compute weight, an overly large value can lead to extrinsics with large",
              " weight estimation: see `delegate` for instance."
            ]
          },
          {
            "name": "VoteLockingPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "002f0d00",
            "docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotOngoing",
            "doc": [
              "Poll is not ongoing."
            ]
          },
          {
            "name": "NotVoter",
            "doc": [
              "The given account did not vote on the poll."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "name": "NoPermissionYet",
            "doc": [
              "The actor has no permission to conduct the action right now but will do in the future."
            ]
          },
          {
            "name": "AlreadyDelegating",
            "doc": [
              "The account is already delegating."
            ]
          },
          {
            "name": "AlreadyVoting",
            "doc": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "name": "InsufficientFunds",
            "doc": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "name": "NotDelegating",
            "doc": [
              "The account is not currently delegating."
            ]
          },
          {
            "name": "Nonsense",
            "doc": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "name": "MaxVotesReached",
            "doc": [
              "Maximum number of votes reached."
            ]
          },
          {
            "name": "ClassNeeded",
            "doc": [
              "The class must be supplied since it is not easily determinable from the state."
            ]
          },
          {
            "name": "BadClass",
            "doc": [
              "The class ID supplied is invalid."
            ]
          }
        ],
        "errors_value": {
          "type": 727
        },
        "index": 53
      },
      {
        "name": "Whitelist",
        "prefix": "Whitelist",
        "storage": [
          {
            "name": "WhitelistedCall",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "NULL",
                "keys_id": 12,
                "value_id": 32
              }
            },
            "fallback": "0x00",
            "docs": null
          }
        ],
        "calls": [
          {
            "lookup": "3600",
            "name": "whitelist_call",
            "docs": null,
            "args": [
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "PreimageHash"
              }
            ]
          },
          {
            "lookup": "3601",
            "name": "remove_whitelisted_call",
            "docs": null,
            "args": [
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "PreimageHash"
              }
            ]
          },
          {
            "lookup": "3602",
            "name": "dispatch_whitelisted_call",
            "docs": null,
            "args": [
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "PreimageHash"
              },
              {
                "name": "call_encoded_len",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "call_weight_witness",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          },
          {
            "lookup": "3603",
            "name": "dispatch_whitelisted_call_with_preimage",
            "docs": null,
            "args": [
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 370
        },
        "events": [
          {
            "lookup": "3600",
            "name": "CallWhitelisted",
            "docs": null,
            "args": [
              "H256"
            ],
            "args_type_name": [
              "PreimageHash"
            ]
          },
          {
            "lookup": "3601",
            "name": "WhitelistedCallRemoved",
            "docs": null,
            "args": [
              "H256"
            ],
            "args_type_name": [
              "PreimageHash"
            ]
          },
          {
            "lookup": "3602",
            "name": "WhitelistedCallDispatched",
            "docs": null,
            "args": [
              "H256",
              "Result\u003cframe_support:dispatch:PostDispatchInfo,sp_runtime:DispatchErrorWithPostInfo\u003e"
            ],
            "args_type_name": [
              "PreimageHash",
              "DispatchResultWithPostInfo"
            ]
          }
        ],
        "events_value": {
          "type": 401
        },
        "errors": [
          {
            "name": "UnavailablePreImage",
            "doc": [
              "The preimage of the call hash could not be loaded."
            ]
          },
          {
            "name": "UndecodableCall",
            "doc": [
              "The call could not be decoded."
            ]
          },
          {
            "name": "InvalidCallWeightWitness",
            "doc": [
              "The weight of the decoded call was higher than the witness."
            ]
          },
          {
            "name": "CallIsNotWhitelisted",
            "doc": [
              "The call was not whitelisted."
            ]
          },
          {
            "name": "CallAlreadyWhitelisted",
            "doc": [
              "The call was already whitelisted; No-Op."
            ]
          }
        ],
        "errors_value": {
          "type": 728
        },
        "index": 54
      },
      {
        "name": "AllianceMotion",
        "prefix": "AllianceMotion",
        "storage": [
          {
            "name": "Proposals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cH256\u003e",
              "PlainTypeValue": 729
            },
            "fallback": "0x00",
            "docs": [
              " The hashes of the active proposals."
            ]
          },
          {
            "name": "ProposalOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Call",
                "keys_id": 12,
                "value_id": 133
              }
            },
            "fallback": "0x00",
            "docs": [
              " Actual proposal for a given hash, if it's current."
            ]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_collective:Votes",
                "keys_id": 12,
                "value_id": 523
              }
            },
            "fallback": "0x00",
            "docs": [
              " Votes on a given proposal, if it is ongoing."
            ]
          },
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Proposals so far."
            ]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 86
            },
            "fallback": "0x00",
            "docs": [
              " The current members of the collective. This is stored sorted (just by value)."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The prime member that helps determine the default vote behavior in case of absentations."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3700",
            "name": "set_members",
            "docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ],
            "args": [
              {
                "name": "new_members",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "prime",
                "type": "option\u003c[U8; 32]\u003e",
                "type_name": "Option\u003cAccountId\u003e"
              },
              {
                "name": "old_count",
                "type": "U32",
                "type_name": "MemberCount"
              }
            ]
          },
          {
            "lookup": "3701",
            "name": "execute",
            "docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ],
            "args": [
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3702",
            "name": "propose",
            "docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold \u003c 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold \u003c 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold \u003e= 2`)"
            ],
            "args": [
              {
                "name": "threshold",
                "type": "compact\u003cU32\u003e",
                "type_name": "MemberCount"
              },
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3703",
            "name": "vote",
            "docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ],
            "args": [
              {
                "name": "proposal",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "3705",
            "name": "disapprove_proposal",
            "docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "3706",
            "name": "close",
            "docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::\u003cu32\u003e() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "proposal_weight_bound",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 371
        },
        "events": [
          {
            "lookup": "3700",
            "name": "Proposed",
            "docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "H256",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "ProposalIndex",
              "Hash",
              "MemberCount"
            ]
          },
          {
            "lookup": "3701",
            "name": "Voted",
            "docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "H256",
              "Bool",
              "U32",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "Hash",
              "bool",
              "MemberCount",
              "MemberCount"
            ]
          },
          {
            "lookup": "3702",
            "name": "Approved",
            "docs": [
              "A motion was approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "3703",
            "name": "Disapproved",
            "docs": [
              "A motion was not approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "3704",
            "name": "Executed",
            "docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "3705",
            "name": "MemberExecuted",
            "docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "3706",
            "name": "Closed",
            "docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ],
            "args": [
              "H256",
              "U32",
              "U32"
            ],
            "args_type_name": [
              "Hash",
              "MemberCount",
              "MemberCount"
            ]
          }
        ],
        "events_value": {
          "type": 406
        },
        "constants": [
          {
            "name": "MaxProposalWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "070010a5d4e813ffffffffffffff7f",
            "docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotMember",
            "doc": [
              "Account is not a member"
            ]
          },
          {
            "name": "DuplicateProposal",
            "doc": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "name": "ProposalMissing",
            "doc": [
              "Proposal must exist"
            ]
          },
          {
            "name": "WrongIndex",
            "doc": [
              "Mismatched index"
            ]
          },
          {
            "name": "DuplicateVote",
            "doc": [
              "Duplicate vote ignored"
            ]
          },
          {
            "name": "AlreadyInitialized",
            "doc": [
              "Members are already initialized!"
            ]
          },
          {
            "name": "TooEarly",
            "doc": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "name": "TooManyProposals",
            "doc": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "name": "WrongProposalWeight",
            "doc": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "name": "WrongProposalLength",
            "doc": [
              "The given length bound for the proposal was too low."
            ]
          }
        ],
        "errors_value": {
          "type": 730
        },
        "index": 55
      },
      {
        "name": "Alliance",
        "prefix": "Alliance",
        "storage": [
          {
            "name": "Rule",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_alliance:types:Cid",
              "PlainTypeValue": 374
            },
            "fallback": "0x00",
            "docs": [
              " The IPFS CID of the alliance rule.",
              " Fellows can propose a new rule with a super-majority."
            ]
          },
          {
            "name": "Announcements",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_alliance:types:Cid\u003e",
              "PlainTypeValue": 731
            },
            "fallback": "0x00",
            "docs": [
              " The current IPFS CIDs of any announcements."
            ]
          },
          {
            "name": "DepositOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U128",
                "keys_id": 0,
                "value_id": 6
              }
            },
            "fallback": "0x00",
            "docs": [
              " Maps members to their candidacy deposit."
            ]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "pallet_alliance:MemberRole"
                ],
                "value": "Vec\u003c[U8; 32]\u003e",
                "keys_id": 733,
                "value_id": 734
              }
            },
            "fallback": "0x00",
            "docs": [
              " Maps member type to members of each type."
            ]
          },
          {
            "name": "RetiringMembers",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 0,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " A set of members who gave a retirement notice. They can retire after the end of retirement",
              " period stored as a future block number."
            ]
          },
          {
            "name": "UnscrupulousAccounts",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 509
            },
            "fallback": "0x00",
            "docs": [
              " The current list of accounts deemed unscrupulous. These accounts non grata cannot submit",
              " candidacy."
            ]
          },
          {
            "name": "UnscrupulousWebsites",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cVec\u003cU8\u003e\u003e",
              "PlainTypeValue": 735
            },
            "fallback": "0x00",
            "docs": [
              " The current list of websites deemed unscrupulous."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3800",
            "name": "propose",
            "docs": [
              "Add a new proposal to be voted on.",
              "",
              "Must be called by a Fellow."
            ],
            "args": [
              {
                "name": "threshold",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              },
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3801",
            "name": "vote",
            "docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Must be called by a Fellow."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "3803",
            "name": "init_members",
            "docs": [
              "Initialize the Alliance, onboard fellows and allies.",
              "",
              "The Alliance must be empty, and the call must provide some founding members.",
              "",
              "Must be called by the Root origin."
            ],
            "args": [
              {
                "name": "fellows",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "allies",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "3804",
            "name": "disband",
            "docs": [
              "Disband the Alliance, remove all active members and unreserve deposits.",
              "",
              "Witness data must be set."
            ],
            "args": [
              {
                "name": "witness",
                "type": "pallet_alliance:types:DisbandWitness",
                "type_name": "DisbandWitness"
              }
            ]
          },
          {
            "lookup": "3805",
            "name": "set_rule",
            "docs": [
              "Set a new IPFS CID to the alliance rule."
            ],
            "args": [
              {
                "name": "rule",
                "type": "pallet_alliance:types:Cid",
                "type_name": "Cid"
              }
            ]
          },
          {
            "lookup": "3806",
            "name": "announce",
            "docs": [
              "Make an announcement of a new IPFS CID about alliance issues."
            ],
            "args": [
              {
                "name": "announcement",
                "type": "pallet_alliance:types:Cid",
                "type_name": "Cid"
              }
            ]
          },
          {
            "lookup": "3807",
            "name": "remove_announcement",
            "docs": [
              "Remove an announcement."
            ],
            "args": [
              {
                "name": "announcement",
                "type": "pallet_alliance:types:Cid",
                "type_name": "Cid"
              }
            ]
          },
          {
            "lookup": "3808",
            "name": "join_alliance",
            "docs": [
              "Submit oneself for candidacy. A fixed deposit is reserved."
            ],
            "args": null
          },
          {
            "lookup": "3809",
            "name": "nominate_ally",
            "docs": [
              "A Fellow can nominate someone to join the alliance as an Ally. There is no deposit",
              "required from the nominator or nominee."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "380a",
            "name": "elevate_ally",
            "docs": [
              "Elevate an Ally to Fellow."
            ],
            "args": [
              {
                "name": "ally",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "380b",
            "name": "give_retirement_notice",
            "docs": [
              "As a member, give a retirement notice and start a retirement period required to pass in",
              "order to retire."
            ],
            "args": null
          },
          {
            "lookup": "380c",
            "name": "retire",
            "docs": [
              "As a member, retire from the Alliance and unreserve the deposit.",
              "",
              "This can only be done once you have called `give_retirement_notice` and the",
              "`RetirementPeriod` has passed."
            ],
            "args": null
          },
          {
            "lookup": "380d",
            "name": "kick_member",
            "docs": [
              "Kick a member from the Alliance and slash its deposit."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "380e",
            "name": "add_unscrupulous_items",
            "docs": [
              "Add accounts or websites to the list of unscrupulous items."
            ],
            "args": [
              {
                "name": "items",
                "type": "Vec\u003cpallet_alliance:UnscrupulousItem\u003e",
                "type_name": "Vec\u003cUnscrupulousItemOf\u003e"
              }
            ]
          },
          {
            "lookup": "380f",
            "name": "remove_unscrupulous_items",
            "docs": [
              "Deem some items no longer unscrupulous."
            ],
            "args": [
              {
                "name": "items",
                "type": "Vec\u003cpallet_alliance:UnscrupulousItem\u003e",
                "type_name": "Vec\u003cUnscrupulousItemOf\u003e"
              }
            ]
          },
          {
            "lookup": "3810",
            "name": "close",
            "docs": [
              "Close a vote that is either approved, disapproved, or whose voting period has ended.",
              "",
              "Must be called by a Fellow."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "proposal_weight_bound",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3811",
            "name": "abdicate_fellow_status",
            "docs": [
              "Abdicate one's position as a voting member and just be an Ally. May be used by Fellows",
              "who do not want to leave the Alliance but do not have the capacity to participate",
              "operationally for some time."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 372
        },
        "events": [
          {
            "lookup": "3800",
            "name": "NewRuleSet",
            "docs": [
              "A new rule has been set."
            ],
            "args": [
              "pallet_alliance:types:Cid"
            ],
            "args_type_name": [
              "Cid"
            ]
          },
          {
            "lookup": "3801",
            "name": "Announced",
            "docs": [
              "A new announcement has been proposed."
            ],
            "args": [
              "pallet_alliance:types:Cid"
            ],
            "args_type_name": [
              "Cid"
            ]
          },
          {
            "lookup": "3802",
            "name": "AnnouncementRemoved",
            "docs": [
              "An on-chain announcement has been removed."
            ],
            "args": [
              "pallet_alliance:types:Cid"
            ],
            "args_type_name": [
              "Cid"
            ]
          },
          {
            "lookup": "3803",
            "name": "MembersInitialized",
            "docs": [
              "Some accounts have been initialized as members (fellows/allies)."
            ],
            "args": [
              "Vec\u003c[U8; 32]\u003e",
              "Vec\u003c[U8; 32]\u003e"
            ],
            "args_type_name": [
              "Vec\u003cAccountId\u003e",
              "Vec\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "3804",
            "name": "NewAllyJoined",
            "docs": [
              "An account has been added as an Ally and reserved its deposit."
            ],
            "args": [
              "[U8; 32]",
              "option\u003c[U8; 32]\u003e",
              "option\u003cU128\u003e"
            ],
            "args_type_name": [
              "AccountId",
              "Option\u003cAccountId\u003e",
              "Option\u003cBalanceOf\u003e"
            ]
          },
          {
            "lookup": "3805",
            "name": "AllyElevated",
            "docs": [
              "An ally has been elevated to Fellow."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "3806",
            "name": "MemberRetirementPeriodStarted",
            "docs": [
              "A member gave retirement notice and their retirement period started."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "3807",
            "name": "MemberRetired",
            "docs": [
              "A member has retired with its deposit unreserved."
            ],
            "args": [
              "[U8; 32]",
              "option\u003cU128\u003e"
            ],
            "args_type_name": [
              "AccountId",
              "Option\u003cBalanceOf\u003e"
            ]
          },
          {
            "lookup": "3808",
            "name": "MemberKicked",
            "docs": [
              "A member has been kicked out with its deposit slashed."
            ],
            "args": [
              "[U8; 32]",
              "option\u003cU128\u003e"
            ],
            "args_type_name": [
              "AccountId",
              "Option\u003cBalanceOf\u003e"
            ]
          },
          {
            "lookup": "3809",
            "name": "UnscrupulousItemAdded",
            "docs": [
              "Accounts or websites have been added into the list of unscrupulous items."
            ],
            "args": [
              "Vec\u003cpallet_alliance:UnscrupulousItem\u003e"
            ],
            "args_type_name": [
              "Vec\u003cUnscrupulousItemOf\u003e"
            ]
          },
          {
            "lookup": "380a",
            "name": "UnscrupulousItemRemoved",
            "docs": [
              "Accounts or websites have been removed from the list of unscrupulous items."
            ],
            "args": [
              "Vec\u003cpallet_alliance:UnscrupulousItem\u003e"
            ],
            "args_type_name": [
              "Vec\u003cUnscrupulousItemOf\u003e"
            ]
          },
          {
            "lookup": "380b",
            "name": "AllianceDisbanded",
            "docs": [
              "Alliance disbanded. Includes number deleted members and unreserved deposits."
            ],
            "args": [
              "U32",
              "U32",
              "U32"
            ],
            "args_type_name": [
              "u32",
              "u32",
              "u32"
            ]
          },
          {
            "lookup": "380c",
            "name": "FellowAbdicated",
            "docs": [
              "A Fellow abdicated their voting rights. They are now an Ally."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 407
        },
        "constants": [
          {
            "name": "MaxUnscrupulousItems",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of the unscrupulous items supported by the pallet."
            ]
          },
          {
            "name": "MaxWebsiteUrlLength",
            "type": "U32",
            "type_value": 4,
            "constants_value": "ff000000",
            "docs": [
              " The maximum length of a website URL."
            ]
          },
          {
            "name": "AllyDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The deposit required for submitting candidacy."
            ]
          },
          {
            "name": "MaxAnnouncementsCount",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of announcements."
            ]
          },
          {
            "name": "MaxMembersCount",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of members per member role."
            ]
          }
        ],
        "errors": [
          {
            "name": "AllianceNotYetInitialized",
            "doc": [
              "The Alliance has not been initialized yet, therefore accounts cannot join it."
            ]
          },
          {
            "name": "AllianceAlreadyInitialized",
            "doc": [
              "The Alliance has been initialized, therefore cannot be initialized again."
            ]
          },
          {
            "name": "AlreadyMember",
            "doc": [
              "Account is already a member."
            ]
          },
          {
            "name": "NotMember",
            "doc": [
              "Account is not a member."
            ]
          },
          {
            "name": "NotAlly",
            "doc": [
              "Account is not an ally."
            ]
          },
          {
            "name": "NoVotingRights",
            "doc": [
              "Account does not have voting rights."
            ]
          },
          {
            "name": "AlreadyElevated",
            "doc": [
              "Account is already an elevated (fellow) member."
            ]
          },
          {
            "name": "AlreadyUnscrupulous",
            "doc": [
              "Item is already listed as unscrupulous."
            ]
          },
          {
            "name": "AccountNonGrata",
            "doc": [
              "Account has been deemed unscrupulous by the Alliance and is not welcome to join or be",
              "nominated."
            ]
          },
          {
            "name": "NotListedAsUnscrupulous",
            "doc": [
              "Item has not been deemed unscrupulous."
            ]
          },
          {
            "name": "TooManyUnscrupulousItems",
            "doc": [
              "The number of unscrupulous items exceeds `MaxUnscrupulousItems`."
            ]
          },
          {
            "name": "TooLongWebsiteUrl",
            "doc": [
              "Length of website URL exceeds `MaxWebsiteUrlLength`."
            ]
          },
          {
            "name": "InsufficientFunds",
            "doc": [
              "Balance is insufficient for the required deposit."
            ]
          },
          {
            "name": "WithoutIdentityDisplayAndWebsite",
            "doc": [
              "The account's identity does not have display field and website field."
            ]
          },
          {
            "name": "WithoutGoodIdentityJudgement",
            "doc": [
              "The account's identity has no good judgement."
            ]
          },
          {
            "name": "MissingProposalHash",
            "doc": [
              "The proposal hash is not found."
            ]
          },
          {
            "name": "MissingAnnouncement",
            "doc": [
              "The announcement is not found."
            ]
          },
          {
            "name": "TooManyMembers",
            "doc": [
              "Number of members exceeds `MaxMembersCount`."
            ]
          },
          {
            "name": "TooManyAnnouncements",
            "doc": [
              "Number of announcements exceeds `MaxAnnouncementsCount`."
            ]
          },
          {
            "name": "BadWitness",
            "doc": [
              "Invalid witness data given."
            ]
          },
          {
            "name": "AlreadyRetiring",
            "doc": [
              "Account already gave retirement notice"
            ]
          },
          {
            "name": "RetirementNoticeNotGiven",
            "doc": [
              "Account did not give a retirement notice required to retire."
            ]
          },
          {
            "name": "RetirementPeriodNotPassed",
            "doc": [
              "Retirement period has not passed."
            ]
          },
          {
            "name": "FellowsMissing",
            "doc": [
              "Fellows must be provided to initialize the Alliance."
            ]
          }
        ],
        "errors_value": {
          "type": 737
        },
        "index": 56
      },
      {
        "name": "NominationPools",
        "prefix": "NominationPools",
        "storage": [
          {
            "name": "MinJoinBond",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " Minimum amount to bond to join a pool."
            ]
          },
          {
            "name": "MinCreateBond",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " Minimum bond required to create a pool.",
              "",
              " This is the amount that the depositor must put as their initial stake in the pool, as an",
              " indication of \"skin in the game\".",
              "",
              " This is the value that will always exist in the staking ledger of the pool bonded account",
              " while all other accounts leave."
            ]
          },
          {
            "name": "MaxPools",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of",
              " pools can exist."
            ]
          },
          {
            "name": "MaxPoolMembers",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Maximum number of members that can exist in the system. If `None`, then the count",
              " members are not bound on a system wide basis."
            ]
          },
          {
            "name": "MaxPoolMembersPerPool",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Maximum number of members that may belong to pool. If `None`, then the count of",
              " members is not bound on a per pool basis."
            ]
          },
          {
            "name": "GlobalMaxCommission",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 47
            },
            "fallback": "0x00",
            "docs": [
              " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
              " pool commissions that are \u003e `GlobalMaxCommission`, necessary if a future",
              " `GlobalMaxCommission` is lower than some current pool commissions."
            ]
          },
          {
            "name": "PoolMembers",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_nomination_pools:PoolMember",
                "keys_id": 0,
                "value_id": 738
              }
            },
            "fallback": "0x00",
            "docs": [
              " Active members.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "CounterForPoolMembers",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "BondedPools",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nomination_pools:BondedPoolInner",
                "keys_id": 4,
                "value_id": 741
              }
            },
            "fallback": "0x00",
            "docs": [
              " Storage for bonded pools."
            ]
          },
          {
            "name": "CounterForBondedPools",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "RewardPools",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nomination_pools:RewardPool",
                "keys_id": 4,
                "value_id": 746
              }
            },
            "fallback": "0x00",
            "docs": [
              " Reward pools. This is where there rewards for each pool accumulate. When a members payout is",
              " claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."
            ]
          },
          {
            "name": "CounterForRewardPools",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "SubPoolsStorage",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nomination_pools:SubPools",
                "keys_id": 4,
                "value_id": 747
              }
            },
            "fallback": "0x00",
            "docs": [
              " Groups of unbonding pools. Each group of unbonding pools belongs to a",
              " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."
            ]
          },
          {
            "name": "CounterForSubPoolsStorage",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "Metadata",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 753
              }
            },
            "fallback": "0x00",
            "docs": [
              " Metadata for the pool."
            ]
          },
          {
            "name": "CounterForMetadata",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "LastPoolId",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Ever increasing number of all pools created so far."
            ]
          },
          {
            "name": "ReversePoolIdLookup",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 0,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " A reverse lookup from the pool's account id to its id.",
              "",
              " This is only used for slashing. In all other instances, the pool id is used, and the",
              " accounts are deterministically derived from it."
            ]
          },
          {
            "name": "CounterForReversePoolIdLookup",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "ClaimPermissions",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_nomination_pools:ClaimPermission",
                "keys_id": 0,
                "value_id": 388
              }
            },
            "fallback": "0x00",
            "docs": [
              " Map from a pool member account to their opted claim permission."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3900",
            "name": "join",
            "docs": [
              "Stake funds with a pool. The amount to bond is transferred from the member to the",
              "pools account and immediately increases the pools bond.",
              "",
              "# Note",
              "",
              "* An account can only be a member of a single pool.",
              "* An account cannot join the same pool multiple times.",
              "* This call will *not* dust the member account, so the member must have at least",
              "  `existential deposit + amount` in their account.",
              "* Only a pool with [`PoolState::Open`] can be joined"
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              }
            ]
          },
          {
            "lookup": "3901",
            "name": "bond_extra",
            "docs": [
              "Bond `extra` more funds from `origin` into the pool to which they already belong.",
              "",
              "Additional funds can come from either the free balance of the account, of from the",
              "accumulated rewards, see [`BondExtra`].",
              "",
              "Bonding extra funds implies an automatic payout of all pending rewards as well.",
              "See `bond_extra_other` to bond pending rewards of `other` members."
            ],
            "args": [
              {
                "name": "extra",
                "type": "pallet_nomination_pools:BondExtra",
                "type_name": "BondExtra\u003cBalanceOf\u003e"
              }
            ]
          },
          {
            "lookup": "3902",
            "name": "claim_payout",
            "docs": [
              "A bonded member can use this to claim their payout based on the rewards that the pool",
              "has accumulated since their last claimed payout (OR since joining if this is their first",
              "time claiming rewards). The payout will be transferred to the member's account.",
              "",
              "The member will earn rewards pro rata based on the members stake vs the sum of the",
              "members in the pools stake. Rewards do not \"expire\".",
              "",
              "See `claim_payout_other` to caim rewards on bahalf of some `other` pool member."
            ],
            "args": null
          },
          {
            "lookup": "3903",
            "name": "unbond",
            "docs": [
              "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It",
              "implicitly collects the rewards one last time, since not doing so would mean some",
              "rewards would be forfeited.",
              "",
              "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
              "account).",
              "",
              "# Conditions for a permissionless dispatch.",
              "",
              "* The pool is blocked and the caller is either the root or bouncer. This is refereed to",
              "  as a kick.",
              "* The pool is destroying and the member is not the depositor.",
              "* The pool is destroying, the member is the depositor and no other members are in the",
              "  pool.",
              "",
              "## Conditions for permissioned dispatch (i.e. the caller is also the",
              "`member_account`):",
              "",
              "* The caller is not the depositor.",
              "* The caller is the depositor, the pool is destroying and no other members are in the",
              "  pool.",
              "",
              "# Note",
              "",
              "If there are too many unlocking chunks to unbond with the pool account,",
              "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.",
              "The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]",
              "to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks",
              "are available). However, it may not be possible to release the current unlocking chunks,",
              "in which case, the result of this call will likely be the `NoMoreChunks` error from the",
              "staking system."
            ],
            "args": [
              {
                "name": "member_account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "unbonding_points",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "3904",
            "name": "pool_withdraw_unbonded",
            "docs": [
              "Call `withdraw_unbonded` for the pools account. This call can be made by any account.",
              "",
              "This is useful if their are too many unlocking chunks to call `unbond`, and some",
              "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user",
              "would probably see an error like `NoMoreChunks` emitted from the staking system when",
              "they attempt to unbond."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "num_slashing_spans",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3905",
            "name": "withdraw_unbonded",
            "docs": [
              "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an",
              "error is returned.",
              "",
              "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
              "account).",
              "",
              "# Conditions for a permissionless dispatch",
              "",
              "* The pool is in destroy mode and the target is not the depositor.",
              "* The target is the depositor and they are the only member in the sub pools.",
              "* The pool is blocked and the caller is either the root or bouncer.",
              "",
              "# Conditions for permissioned dispatch",
              "",
              "* The caller is the target and they are not the depositor.",
              "",
              "# Note",
              "",
              "If the target is the depositor, the pool will be destroyed."
            ],
            "args": [
              {
                "name": "member_account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "num_slashing_spans",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3906",
            "name": "create",
            "docs": [
              "Create a new delegation pool.",
              "",
              "# Arguments",
              "",
              "* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of",
              "  deposit since the pools creator cannot fully unbond funds until the pool is being",
              "  destroyed.",
              "* `index` - A disambiguation index for creating the account. Likely only useful when",
              "  creating multiple pools in the same extrinsic.",
              "* `root` - The account to set as [`PoolRoles::root`].",
              "* `nominator` - The account to set as the [`PoolRoles::nominator`].",
              "* `bouncer` - The account to set as the [`PoolRoles::bouncer`].",
              "",
              "# Note",
              "",
              "In addition to `amount`, the caller will transfer the existential deposit; so the caller",
              "needs at have at least `amount + existential_deposit` transferrable."
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "root",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "nominator",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "bouncer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3907",
            "name": "create_with_pool_id",
            "docs": [
              "Create a new delegation pool with a previously used pool id",
              "",
              "# Arguments",
              "",
              "same as `create` with the inclusion of",
              "* `pool_id` - `A valid PoolId."
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "root",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "nominator",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "bouncer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              }
            ]
          },
          {
            "lookup": "3908",
            "name": "nominate",
            "docs": [
              "Nominate on behalf of the pool.",
              "",
              "The dispatch origin of this call must be signed by the pool nominator or the pool",
              "root role.",
              "",
              "This directly forward the call to the staking pallet, on behalf of the pool bonded",
              "account."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "validators",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "3909",
            "name": "set_state",
            "docs": [
              "Set a new state for the pool.",
              "",
              "If a pool is already in the `Destroying` state, then under no condition can its state",
              "change again.",
              "",
              "The dispatch origin of this call must be either:",
              "",
              "1. signed by the bouncer, or the root role of the pool,",
              "2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and",
              "   then the state of the pool can be permissionlessly changed to `Destroying`."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "state",
                "type": "pallet_nomination_pools:PoolState",
                "type_name": "PoolState"
              }
            ]
          },
          {
            "lookup": "390a",
            "name": "set_metadata",
            "docs": [
              "Set a new metadata for the pool.",
              "",
              "The dispatch origin of this call must be signed by the bouncer, or the root role of the",
              "pool."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "metadata",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "390b",
            "name": "set_configs",
            "docs": [
              "Update configurations for the nomination pools. The origin for this call must be",
              "Root.",
              "",
              "# Arguments",
              "",
              "* `min_join_bond` - Set [`MinJoinBond`].",
              "* `min_create_bond` - Set [`MinCreateBond`].",
              "* `max_pools` - Set [`MaxPools`].",
              "* `max_members` - Set [`MaxPoolMembers`].",
              "* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].",
              "* `global_max_commission` - Set [`GlobalMaxCommission`]."
            ],
            "args": [
              {
                "name": "min_join_bond",
                "type": "pallet_nomination_pools:ConfigOp@384",
                "type_name": "ConfigOp\u003cBalanceOf\u003e"
              },
              {
                "name": "min_create_bond",
                "type": "pallet_nomination_pools:ConfigOp@384",
                "type_name": "ConfigOp\u003cBalanceOf\u003e"
              },
              {
                "name": "max_pools",
                "type": "pallet_nomination_pools:ConfigOp@385",
                "type_name": "ConfigOp\u003cu32\u003e"
              },
              {
                "name": "max_members",
                "type": "pallet_nomination_pools:ConfigOp@385",
                "type_name": "ConfigOp\u003cu32\u003e"
              },
              {
                "name": "max_members_per_pool",
                "type": "pallet_nomination_pools:ConfigOp@385",
                "type_name": "ConfigOp\u003cu32\u003e"
              },
              {
                "name": "global_max_commission",
                "type": "pallet_nomination_pools:ConfigOp@386",
                "type_name": "ConfigOp\u003cPerbill\u003e"
              }
            ]
          },
          {
            "lookup": "390c",
            "name": "update_roles",
            "docs": [
              "Update the roles of the pool.",
              "",
              "The root is the only entity that can change any of the roles, including itself,",
              "excluding the depositor, who can never change.",
              "",
              "It emits an event, notifying UIs of the role change. This event is quite relevant to",
              "most pool members and they should be informed of changes to pool roles."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "new_root",
                "type": "pallet_nomination_pools:ConfigOp@387",
                "type_name": "ConfigOp\u003cAccountId\u003e"
              },
              {
                "name": "new_nominator",
                "type": "pallet_nomination_pools:ConfigOp@387",
                "type_name": "ConfigOp\u003cAccountId\u003e"
              },
              {
                "name": "new_bouncer",
                "type": "pallet_nomination_pools:ConfigOp@387",
                "type_name": "ConfigOp\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "390d",
            "name": "chill",
            "docs": [
              "Chill on behalf of the pool.",
              "",
              "The dispatch origin of this call must be signed by the pool nominator or the pool",
              "root role, same as [`Pallet::nominate`].",
              "",
              "This directly forward the call to the staking pallet, on behalf of the pool bonded",
              "account."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              }
            ]
          },
          {
            "lookup": "390e",
            "name": "bond_extra_other",
            "docs": [
              "`origin` bonds funds from `extra` for some pool member `member` into their respective",
              "pools.",
              "",
              "`origin` can bond extra funds from free balance or pending rewards when `origin ==",
              "other`.",
              "",
              "In the case of `origin != other`, `origin` can only bond extra pending rewards of",
              "`other` members assuming set_claim_permission for the given member is",
              "`PermissionlessAll` or `PermissionlessCompound`."
            ],
            "args": [
              {
                "name": "member",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "extra",
                "type": "pallet_nomination_pools:BondExtra",
                "type_name": "BondExtra\u003cBalanceOf\u003e"
              }
            ]
          },
          {
            "lookup": "390f",
            "name": "set_claim_permission",
            "docs": [
              "Allows a pool member to set a claim permission to allow or disallow permissionless",
              "bonding and withdrawing.",
              "",
              "By default, this is `Permissioned`, which implies only the pool member themselves can",
              "claim their pending rewards. If a pool member wishes so, they can set this to",
              "`PermissionlessAll` to allow any account to claim their rewards and bond extra to the",
              "pool.",
              "",
              "# Arguments",
              "",
              "* `origin` - Member of a pool.",
              "* `actor` - Account to claim reward. // improve this"
            ],
            "args": [
              {
                "name": "permission",
                "type": "pallet_nomination_pools:ClaimPermission",
                "type_name": "ClaimPermission"
              }
            ]
          },
          {
            "lookup": "3910",
            "name": "claim_payout_other",
            "docs": [
              "`origin` can claim payouts on some pool member `other`'s behalf.",
              "",
              "Pool member `other` must have a `PermissionlessAll` or `PermissionlessWithdraw` in order",
              "for this call to be successful."
            ],
            "args": [
              {
                "name": "other",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "3911",
            "name": "set_commission",
            "docs": [
              "Set the commission of a pool.",
              "Both a commission percentage and a commission payee must be provided in the `current`",
              "tuple. Where a `current` of `None` is provided, any current commission will be removed.",
              "",
              "- If a `None` is supplied to `new_commission`, existing commission will be removed."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "new_commission",
                "type": "option\u003cTuple:U32[U8; 32]\u003e",
                "type_name": "Option\u003c(Perbill, AccountId)\u003e"
              }
            ]
          },
          {
            "lookup": "3912",
            "name": "set_commission_max",
            "docs": [
              "Set the maximum commission of a pool.",
              "",
              "- Initial max can be set to any `Perbill`, and only smaller values thereafter.",
              "- Current commission will be lowered in the event it is higher than a new max",
              "  commission."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "max_commission",
                "type": "U32",
                "type_name": "Perbill"
              }
            ]
          },
          {
            "lookup": "3913",
            "name": "set_commission_change_rate",
            "docs": [
              "Set the commission change rate for a pool.",
              "",
              "Initial change rate is not bounded, whereas subsequent updates can only be more",
              "restrictive than the current."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "change_rate",
                "type": "pallet_nomination_pools:CommissionChangeRate",
                "type_name": "CommissionChangeRate\u003cBlockNumber\u003e"
              }
            ]
          },
          {
            "lookup": "3914",
            "name": "claim_commission",
            "docs": [
              "Claim pending commission.",
              "",
              "The dispatch origin of this call must be signed by the `root` role of the pool. Pending",
              "commission is paid out and added to total claimed commission`. Total pending commission",
              "is reset to zero. the current."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 381
        },
        "events": [
          {
            "lookup": "3900",
            "name": "Created",
            "docs": [
              "A pool has been created."
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "PoolId"
            ]
          },
          {
            "lookup": "3901",
            "name": "Bonded",
            "docs": [
              "A member has became bonded in a pool."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "U128",
              "Bool"
            ],
            "args_type_name": [
              "AccountId",
              "PoolId",
              "BalanceOf",
              "bool"
            ]
          },
          {
            "lookup": "3902",
            "name": "PaidOut",
            "docs": [
              "A payout has been made to a member."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "PoolId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3903",
            "name": "Unbonded",
            "docs": [
              "A member has unbonded from their pool.",
              "",
              "- `balance` is the corresponding balance of the number of points that has been",
              "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded",
              "  pool.",
              "- `points` is the number of points that are issued as a result of `balance` being",
              "dissolved into the corresponding unbonding pool.",
              "- `era` is the era in which the balance will be unbonded.",
              "In the absence of slashing, these values will match. In the presence of slashing, the",
              "number of points that are issued in the unbonding pool will be less than the amount",
              "requested to be unbonded."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "U128",
              "U128",
              "U32"
            ],
            "args_type_name": [
              "AccountId",
              "PoolId",
              "BalanceOf",
              "BalanceOf",
              "EraIndex"
            ]
          },
          {
            "lookup": "3904",
            "name": "Withdrawn",
            "docs": [
              "A member has withdrawn from their pool.",
              "",
              "The given number of `points` have been dissolved in return of `balance`.",
              "",
              "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
              "will be 1."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "U128",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "PoolId",
              "BalanceOf",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3905",
            "name": "Destroyed",
            "docs": [
              "A pool has been destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "PoolId"
            ]
          },
          {
            "lookup": "3906",
            "name": "StateChanged",
            "docs": [
              "The state of a pool has changed"
            ],
            "args": [
              "U32",
              "pallet_nomination_pools:PoolState"
            ],
            "args_type_name": [
              "PoolId",
              "PoolState"
            ]
          },
          {
            "lookup": "3907",
            "name": "MemberRemoved",
            "docs": [
              "A member has been removed from a pool.",
              "",
              "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_type_name": [
              "PoolId",
              "AccountId"
            ]
          },
          {
            "lookup": "3908",
            "name": "RolesUpdated",
            "docs": [
              "The roles of a pool have been updated to the given new roles. Note that the depositor",
              "can never change."
            ],
            "args": [
              "option\u003c[U8; 32]\u003e",
              "option\u003c[U8; 32]\u003e",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_type_name": [
              "Option\u003cAccountId\u003e",
              "Option\u003cAccountId\u003e",
              "Option\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "3909",
            "name": "PoolSlashed",
            "docs": [
              "The active balance of pool `pool_id` has been slashed to `balance`."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_type_name": [
              "PoolId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "390a",
            "name": "UnbondingPoolSlashed",
            "docs": [
              "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
            ],
            "args": [
              "U32",
              "U32",
              "U128"
            ],
            "args_type_name": [
              "PoolId",
              "EraIndex",
              "BalanceOf"
            ]
          },
          {
            "lookup": "390b",
            "name": "PoolCommissionUpdated",
            "docs": [
              "A pool's commission setting has been changed."
            ],
            "args": [
              "U32",
              "option\u003cTuple:U32[U8; 32]\u003e"
            ],
            "args_type_name": [
              "PoolId",
              "Option\u003c(Perbill, AccountId)\u003e"
            ]
          },
          {
            "lookup": "390c",
            "name": "PoolMaxCommissionUpdated",
            "docs": [
              "A pool's maximum commission setting has been changed."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "PoolId",
              "Perbill"
            ]
          },
          {
            "lookup": "390d",
            "name": "PoolCommissionChangeRateUpdated",
            "docs": [
              "A pool's commission `change_rate` has been changed."
            ],
            "args": [
              "U32",
              "pallet_nomination_pools:CommissionChangeRate"
            ],
            "args_type_name": [
              "PoolId",
              "CommissionChangeRate\u003cBlockNumber\u003e"
            ]
          },
          {
            "lookup": "390e",
            "name": "PoolCommissionClaimed",
            "docs": [
              "Pool commission has been claimed."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_type_name": [
              "PoolId",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 408
        },
        "constants": [
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 540,
            "constants_value": "70792f6e6f706c73",
            "docs": [
              " The nomination pool's pallet id."
            ]
          },
          {
            "name": "MaxPointsToBalance",
            "type": "U8",
            "type_value": 2,
            "constants_value": "0a",
            "docs": [
              " The maximum pool points-to-balance ratio that an `open` pool can have.",
              "",
              " This is important in the event slashing takes place and the pool's points-to-balance",
              " ratio becomes disproportional.",
              "",
              " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
              " are a function of number of points, and by setting this value to e.g. 10, you ensure",
              " that the total number of points in the system are at most 10 times the total_issuance of",
              " the chain, in the absolute worse case.",
              "",
              " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
              " Such a scenario would also be the equivalent of the pool being 90% slashed."
            ]
          }
        ],
        "errors": [
          {
            "name": "PoolNotFound",
            "doc": [
              "A (bonded) pool id does not exist."
            ]
          },
          {
            "name": "PoolMemberNotFound",
            "doc": [
              "An account is not a member."
            ]
          },
          {
            "name": "RewardPoolNotFound",
            "doc": [
              "A reward pool does not exist. In all cases this is a system logic error."
            ]
          },
          {
            "name": "SubPoolsNotFound",
            "doc": [
              "A sub pool does not exist."
            ]
          },
          {
            "name": "AccountBelongsToOtherPool",
            "doc": [
              "An account is already delegating in another pool. An account may only belong to one",
              "pool at a time."
            ]
          },
          {
            "name": "FullyUnbonding",
            "doc": [
              "The member is fully unbonded (and thus cannot access the bonded and reward pool",
              "anymore to, for example, collect rewards)."
            ]
          },
          {
            "name": "MaxUnbondingLimit",
            "doc": [
              "The member cannot unbond further chunks due to reaching the limit."
            ]
          },
          {
            "name": "CannotWithdrawAny",
            "doc": [
              "None of the funds can be withdrawn yet because the bonding duration has not passed."
            ]
          },
          {
            "name": "MinimumBondNotMet",
            "doc": [
              "The amount does not meet the minimum bond to either join or create a pool.",
              "",
              "The depositor can never unbond to a value less than",
              "`Pallet::depositor_min_bond`. The caller does not have nominating",
              "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."
            ]
          },
          {
            "name": "OverflowRisk",
            "doc": [
              "The transaction could not be executed due to overflow risk for the pool."
            ]
          },
          {
            "name": "NotDestroying",
            "doc": [
              "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for",
              "other members to be permissionlessly unbonded."
            ]
          },
          {
            "name": "NotNominator",
            "doc": [
              "The caller does not have nominating permissions for the pool."
            ]
          },
          {
            "name": "NotKickerOrDestroying",
            "doc": [
              "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
            ]
          },
          {
            "name": "NotOpen",
            "doc": [
              "The pool is not open to join"
            ]
          },
          {
            "name": "MaxPools",
            "doc": [
              "The system is maxed out on pools."
            ]
          },
          {
            "name": "MaxPoolMembers",
            "doc": [
              "Too many members in the pool or system."
            ]
          },
          {
            "name": "CanNotChangeState",
            "doc": [
              "The pools state cannot be changed."
            ]
          },
          {
            "name": "DoesNotHavePermission",
            "doc": [
              "The caller does not have adequate permissions."
            ]
          },
          {
            "name": "MetadataExceedsMaxLen",
            "doc": [
              "Metadata exceeds [`Config::MaxMetadataLen`]"
            ]
          },
          {
            "name": "Defensive",
            "doc": [
              "Some error occurred that should never happen. This should be reported to the",
              "maintainers."
            ]
          },
          {
            "name": "PartialUnbondNotAllowedPermissionlessly",
            "doc": [
              "Partial unbonding now allowed permissionlessly."
            ]
          },
          {
            "name": "MaxCommissionRestricted",
            "doc": [
              "The pool's max commission cannot be set higher than the existing value."
            ]
          },
          {
            "name": "CommissionExceedsMaximum",
            "doc": [
              "The supplied commission exceeds the max allowed commission."
            ]
          },
          {
            "name": "CommissionChangeThrottled",
            "doc": [
              "Not enough blocks have surpassed since the last commission update."
            ]
          },
          {
            "name": "CommissionChangeRateNotAllowed",
            "doc": [
              "The submitted changes to commission change rate are not allowed."
            ]
          },
          {
            "name": "NoPendingCommission",
            "doc": [
              "There is no pending commission to claim."
            ]
          },
          {
            "name": "NoCommissionCurrentSet",
            "doc": [
              "No commission current has been set."
            ]
          },
          {
            "name": "PoolIdInUse",
            "doc": [
              "Pool id currently in use."
            ]
          },
          {
            "name": "InvalidPoolId",
            "doc": [
              "Pool id provided is not correct/usable."
            ]
          },
          {
            "name": "BondExtraRestricted",
            "doc": [
              "Bonding extra is restricted to the exact pending reward amount."
            ]
          }
        ],
        "errors_value": {
          "type": 754
        },
        "index": 57
      },
      {
        "name": "RankedPolls",
        "prefix": "RankedPolls",
        "storage": [
          {
            "name": "ReferendumCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The next free referendum index, aka the number of referenda started so far."
            ]
          },
          {
            "name": "ReferendumInfoFor",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_referenda:types:ReferendumInfo@756",
                "keys_id": 4,
                "value_id": 756
              }
            },
            "fallback": "0x00",
            "docs": [
              " Information concerning any given referendum."
            ]
          },
          {
            "name": "TrackQueue",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16"
                ],
                "value": "Vec\u003cTuple:U32U32\u003e",
                "keys_id": 96,
                "value_id": 758
              }
            },
            "fallback": "0x00",
            "docs": [
              " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
              " conviction-weighted approvals.",
              "",
              " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
            ]
          },
          {
            "name": "DecidingCount",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16"
                ],
                "value": "U32",
                "keys_id": 96,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of referenda being decided currently."
            ]
          },
          {
            "name": "MetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "H256",
                "keys_id": 4,
                "value_id": 12
              }
            },
            "fallback": "0x00",
            "docs": [
              " The metadata is a general information concerning the referendum.",
              " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
              " dump or IPFS hash of a JSON file.",
              "",
              " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
              " large preimages."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3a00",
            "name": "submit",
            "docs": [
              "Propose a referendum on a privileged action.",
              "",
              "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
              "  available.",
              "- `proposal_origin`: The origin from which the proposal should be executed.",
              "- `proposal`: The proposal.",
              "- `enactment_moment`: The moment that the proposal should be enacted.",
              "",
              "Emits `Submitted`."
            ],
            "args": [
              {
                "name": "proposal_origin",
                "type": "kitchensink_runtime:OriginCaller",
                "type_name": "Box\u003cPalletsOriginOf\u003e"
              },
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              },
              {
                "name": "enactment_moment",
                "type": "frame_support:traits:schedule:DispatchTime",
                "type_name": "DispatchTime\u003cBlockNumber\u003e"
              }
            ]
          },
          {
            "lookup": "3a01",
            "name": "place_decision_deposit",
            "docs": [
              "Post the Decision Deposit for a referendum.",
              "",
              "- `origin`: must be `Signed` and the account must have funds available for the",
              "  referendum's track's Decision Deposit.",
              "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
              "  posted.",
              "",
              "Emits `DecisionDepositPlaced`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3a02",
            "name": "refund_decision_deposit",
            "docs": [
              "Refund the Decision Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `DecisionDepositRefunded`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3a03",
            "name": "cancel",
            "docs": [
              "Cancel an ongoing referendum.",
              "",
              "- `origin`: must be the `CancelOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Cancelled`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3a04",
            "name": "kill",
            "docs": [
              "Cancel an ongoing referendum and slash the deposits.",
              "",
              "- `origin`: must be the `KillOrigin`.",
              "- `index`: The index of the referendum to be cancelled.",
              "",
              "Emits `Killed` and `DepositSlashed`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3a05",
            "name": "nudge_referendum",
            "docs": [
              "Advance a referendum onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `index`: the referendum to be advanced."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3a06",
            "name": "one_fewer_deciding",
            "docs": [
              "Advance a track onto its next logical state. Only used internally.",
              "",
              "- `origin`: must be `Root`.",
              "- `track`: the track to be advanced.",
              "",
              "Action item for when there is now one fewer referendum in the deciding phase and the",
              "`DecidingCount` is not yet updated. This means that we should either:",
              "- begin deciding another referendum (and leave `DecidingCount` alone); or",
              "- decrement `DecidingCount`."
            ],
            "args": [
              {
                "name": "track",
                "type": "U16",
                "type_name": "TrackIdOf"
              }
            ]
          },
          {
            "lookup": "3a07",
            "name": "refund_submission_deposit",
            "docs": [
              "Refund the Submission Deposit for a closed referendum back to the depositor.",
              "",
              "- `origin`: must be `Signed` or `Root`.",
              "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
              "  refunded.",
              "",
              "Emits `SubmissionDepositRefunded`."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3a08",
            "name": "set_metadata",
            "docs": [
              "Set or clear metadata of a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
              "  metadata of a finished referendum.",
              "- `index`:  The index of a referendum to set or clear metadata for.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              },
              {
                "name": "maybe_hash",
                "type": "option\u003cH256\u003e",
                "type_name": "Option\u003cPreimageHash\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 392
        },
        "events": [
          {
            "lookup": "3a00",
            "name": "Submitted",
            "docs": [
              "A referendum has been submitted."
            ],
            "args": [
              "U32",
              "U16",
              "frame_support:traits:preimages:Bounded"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "TrackIdOf",
              "BoundedCallOf"
            ]
          },
          {
            "lookup": "3a01",
            "name": "DecisionDepositPlaced",
            "docs": [
              "The decision deposit has been placed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3a02",
            "name": "DecisionDepositRefunded",
            "docs": [
              "The decision deposit has been refunded."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3a03",
            "name": "DepositSlashed",
            "docs": [
              "A deposit has been slashaed."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3a04",
            "name": "DecisionStarted",
            "docs": [
              "A referendum has moved into the deciding phase."
            ],
            "args": [
              "U32",
              "U16",
              "frame_support:traits:preimages:Bounded",
              "pallet_ranked_collective:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "TrackIdOf",
              "BoundedCallOf",
              "Tally"
            ]
          },
          {
            "lookup": "3a05",
            "name": "ConfirmStarted",
            "docs": null,
            "args": [
              "U32"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3a06",
            "name": "ConfirmAborted",
            "docs": null,
            "args": [
              "U32"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3a07",
            "name": "Confirmed",
            "docs": [
              "A referendum has ended its confirmation phase and is ready for approval."
            ],
            "args": [
              "U32",
              "pallet_ranked_collective:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3a08",
            "name": "Approved",
            "docs": [
              "A referendum has been approved and its proposal has been scheduled."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3a09",
            "name": "Rejected",
            "docs": [
              "A proposal has been rejected by referendum."
            ],
            "args": [
              "U32",
              "pallet_ranked_collective:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3a0a",
            "name": "TimedOut",
            "docs": [
              "A referendum has been timed out without being decided."
            ],
            "args": [
              "U32",
              "pallet_ranked_collective:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3a0b",
            "name": "Cancelled",
            "docs": [
              "A referendum has been cancelled."
            ],
            "args": [
              "U32",
              "pallet_ranked_collective:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3a0c",
            "name": "Killed",
            "docs": [
              "A referendum has been killed."
            ],
            "args": [
              "U32",
              "pallet_ranked_collective:Tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3a0d",
            "name": "SubmissionDepositRefunded",
            "docs": [
              "The submission deposit has been refunded."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3a0e",
            "name": "MetadataSet",
            "docs": [
              "Metadata for a referendum has been set."
            ],
            "args": [
              "U32",
              "H256"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "PreimageHash"
            ]
          },
          {
            "lookup": "3a0f",
            "name": "MetadataCleared",
            "docs": [
              "Metadata for a referendum has been cleared."
            ],
            "args": [
              "U32",
              "H256"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "PreimageHash"
            ]
          }
        ],
        "events_value": {
          "type": 409
        },
        "constants": [
          {
            "name": "SubmissionDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "name": "MaxQueued",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " Maximum size of the referendum queue for a single track."
            ]
          },
          {
            "name": "UndecidingTimeout",
            "type": "U32",
            "type_value": 4,
            "constants_value": "004e0c00",
            "docs": [
              " The number of blocks after submission that a referendum must begin being decided by.",
              " Once this passes, then anyone may cancel the referendum."
            ]
          },
          {
            "name": "AlarmInterval",
            "type": "U32",
            "type_value": 4,
            "constants_value": "01000000",
            "docs": [
              " Quantization level for the referendum wakeup scheduler. A higher number will result in",
              " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
              " automatic referendum status changes. Explicit servicing instructions are unaffected."
            ]
          },
          {
            "name": "Tracks",
            "type": "Vec\u003cTuple:U16pallet_referenda:types:TrackInfo\u003e",
            "type_value": 707,
            "constants_value": "04000010726f6f74010000000a000000000000000000000000000000040000000400000002000000040000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b0000000000ca9a3b",
            "docs": [
              " Information concerning the different referendum tracks."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotOngoing",
            "doc": [
              "Referendum is not ongoing."
            ]
          },
          {
            "name": "HasDeposit",
            "doc": [
              "Referendum's decision deposit is already paid."
            ]
          },
          {
            "name": "BadTrack",
            "doc": [
              "The track identifier given was invalid."
            ]
          },
          {
            "name": "Full",
            "doc": [
              "There are already a full complement of referenda in progress for this track."
            ]
          },
          {
            "name": "QueueEmpty",
            "doc": [
              "The queue of the track is empty."
            ]
          },
          {
            "name": "BadReferendum",
            "doc": [
              "The referendum index provided is invalid in this context."
            ]
          },
          {
            "name": "NothingToDo",
            "doc": [
              "There was nothing to do in the advancement."
            ]
          },
          {
            "name": "NoTrack",
            "doc": [
              "No track exists for the proposal origin."
            ]
          },
          {
            "name": "Unfinished",
            "doc": [
              "Any deposit cannot be refunded until after the decision is over."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The deposit refunder is not the depositor."
            ]
          },
          {
            "name": "NoDeposit",
            "doc": [
              "The deposit cannot be refunded since none was made."
            ]
          },
          {
            "name": "BadStatus",
            "doc": [
              "The referendum status is invalid for this operation."
            ]
          },
          {
            "name": "PreimageNotExist",
            "doc": [
              "The preimage does not exist."
            ]
          }
        ],
        "errors_value": {
          "type": 759
        },
        "index": 58
      },
      {
        "name": "RankedCollective",
        "prefix": "RankedCollective",
        "storage": [
          {
            "name": "MemberCount",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16"
                ],
                "value": "U32",
                "keys_id": 96,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of members in the collective who have at least the rank according to the index",
              " of the vec."
            ]
          },
          {
            "name": "Members",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U16",
                "keys_id": 0,
                "value_id": 760
              }
            },
            "fallback": "0x00",
            "docs": [
              " The current members of the collective."
            ]
          },
          {
            "name": "IdToIndex",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16",
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 761,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " The index of each ranks's member into the group of members who have at least that rank."
            ]
          },
          {
            "name": "IndexToId",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16",
                  "U32"
                ],
                "value": "[U8; 32]",
                "keys_id": 762,
                "value_id": 0
              }
            },
            "fallback": "0x00",
            "docs": [
              " The members in the collective by index. All indices in the range `0..MemberCount` will",
              " return `Some`, however a member's index is not guaranteed to remain unchanged over time."
            ]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_ranked_collective:VoteRecord",
                "keys_id": 487,
                "value_id": 412
              }
            },
            "fallback": "0x00",
            "docs": [
              " Votes on a given proposal, if it is ongoing."
            ]
          },
          {
            "name": "VotingCleanup",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 763
              }
            },
            "fallback": "0x00",
            "docs": null
          }
        ],
        "calls": [
          {
            "lookup": "3b00",
            "name": "add_member",
            "docs": [
              "Introduce a new member.",
              "",
              "- `origin`: Must be the `AdminOrigin`.",
              "- `who`: Account of non-member which will become a member.",
              "- `rank`: The rank to give the new member.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3b01",
            "name": "promote_member",
            "docs": [
              "Increment the rank of an existing member by one.",
              "",
              "- `origin`: Must be the `AdminOrigin`.",
              "- `who`: Account of existing member.",
              "",
              "Weight: `O(1)`"
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3b02",
            "name": "demote_member",
            "docs": [
              "Decrement the rank of an existing member by one. If the member is already at rank zero,",
              "then they are removed entirely.",
              "",
              "- `origin`: Must be the `AdminOrigin`.",
              "- `who`: Account of existing member of rank greater than zero.",
              "",
              "Weight: `O(1)`, less if the member's index is highest in its rank."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3b03",
            "name": "remove_member",
            "docs": [
              "Remove the member entirely.",
              "",
              "- `origin`: Must be the `AdminOrigin`.",
              "- `who`: Account of existing member of rank greater than zero.",
              "- `min_rank`: The rank of the member or greater.",
              "",
              "Weight: `O(min_rank)`."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "min_rank",
                "type": "U16",
                "type_name": "Rank"
              }
            ]
          },
          {
            "lookup": "3b04",
            "name": "vote",
            "docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "- `origin`: Must be `Signed` by a member account.",
              "- `poll`: Index of a poll which is ongoing.",
              "- `aye`: `true` if the vote is to approve the proposal, `false` otherwise.",
              "",
              "Transaction fees are be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "",
              "Weight: `O(1)`, less if there was no previous vote on the poll by the member."
            ],
            "args": [
              {
                "name": "poll",
                "type": "U32",
                "type_name": "PollIndexOf"
              },
              {
                "name": "aye",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "3b05",
            "name": "cleanup_poll",
            "docs": [
              "Remove votes from the given poll. It must have ended.",
              "",
              "- `origin`: Must be `Signed` by any account.",
              "- `poll_index`: Index of a poll which is completed and for which votes continue to",
              "  exist.",
              "- `max`: Maximum number of vote items from remove in this call.",
              "",
              "Transaction fees are waived if the operation is successful.",
              "",
              "Weight `O(max)` (less if there are fewer items to remove than `max`)."
            ],
            "args": [
              {
                "name": "poll_index",
                "type": "U32",
                "type_name": "PollIndexOf"
              },
              {
                "name": "max",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 393
        },
        "events": [
          {
            "lookup": "3b00",
            "name": "MemberAdded",
            "docs": [
              "A member `who` has been added."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "3b01",
            "name": "RankChanged",
            "docs": [
              "The member `who`se rank has been changed to the given `rank`."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_type_name": [
              "AccountId",
              "Rank"
            ]
          },
          {
            "lookup": "3b02",
            "name": "MemberRemoved",
            "docs": [
              "The member `who` of given `rank` has been removed from the collective."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_type_name": [
              "AccountId",
              "Rank"
            ]
          },
          {
            "lookup": "3b03",
            "name": "Voted",
            "docs": [
              "The member `who` has voted for the `poll` with the given `vote` leading to an updated",
              "`tally`."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "pallet_ranked_collective:VoteRecord",
              "pallet_ranked_collective:Tally"
            ],
            "args_type_name": [
              "AccountId",
              "PollIndexOf",
              "VoteRecord",
              "TallyOf"
            ]
          }
        ],
        "events_value": {
          "type": 411
        },
        "errors": [
          {
            "name": "AlreadyMember",
            "doc": [
              "Account is already a member."
            ]
          },
          {
            "name": "NotMember",
            "doc": [
              "Account is not a member."
            ]
          },
          {
            "name": "NotPolling",
            "doc": [
              "The given poll index is unknown or has closed."
            ]
          },
          {
            "name": "Ongoing",
            "doc": [
              "The given poll is still ongoing."
            ]
          },
          {
            "name": "NoneRemaining",
            "doc": [
              "There are no further records to be removed."
            ]
          },
          {
            "name": "Corruption",
            "doc": [
              "Unexpected error in state."
            ]
          },
          {
            "name": "RankTooLow",
            "doc": [
              "The member's rank is too low to vote."
            ]
          },
          {
            "name": "InvalidWitness",
            "doc": [
              "The information provided is incorrect."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The origin is not sufficiently privileged to do the operation."
            ]
          }
        ],
        "errors_value": {
          "type": 764
        },
        "index": 59
      },
      {
        "name": "FastUnstake",
        "prefix": "FastUnstake",
        "storage": [
          {
            "name": "Head",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_fast_unstake:types:UnstakeRequest",
              "PlainTypeValue": 765
            },
            "fallback": "0x00",
            "docs": [
              " The current \"head of the queue\" being unstaked."
            ]
          },
          {
            "name": "Queue",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U128",
                "keys_id": 0,
                "value_id": 6
              }
            },
            "fallback": "0x00",
            "docs": [
              " The map of all accounts wishing to be unstaked.",
              "",
              " Keeps track of `AccountId` wishing to unstake and it's corresponding deposit.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "CounterForQueue",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "ErasToCheckPerBlock",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Number of eras to check per block.",
              "",
              " If set to 0, this pallet does absolutely nothing.",
              "",
              " Based on the amount of weight available at `on_idle`, up to this many eras of a single",
              " nominator might be checked."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3c00",
            "name": "register_fast_unstake",
            "docs": [
              "Register oneself for fast-unstake.",
              "",
              "The dispatch origin of this call must be signed by the controller account, similar to",
              "`staking::unbond`.",
              "",
              "The stash associated with the origin must have no ongoing unlocking chunks. If",
              "successful, this will fully unbond and chill the stash. Then, it will enqueue the stash",
              "to be checked in further blocks.",
              "",
              "If by the time this is called, the stash is actually eligible for fast-unstake, then",
              "they are guaranteed to remain eligible, because the call will chill them as well.",
              "",
              "If the check works, the entire staking data is removed, i.e. the stash is fully",
              "unstaked.",
              "",
              "If the check fails, the stash remains chilled and waiting for being unbonded as in with",
              "the normal staking system, but they lose part of their unbonding chunks due to consuming",
              "the chain's resources."
            ],
            "args": null
          },
          {
            "lookup": "3c01",
            "name": "deregister",
            "docs": [
              "Deregister oneself from the fast-unstake.",
              "",
              "This is useful if one is registered, they are still waiting, and they change their mind.",
              "",
              "Note that the associated stash is still fully unbonded and chilled as a consequence of",
              "calling `register_fast_unstake`. This should probably be followed by a call to",
              "`Staking::rebond`."
            ],
            "args": null
          },
          {
            "lookup": "3c02",
            "name": "control",
            "docs": [
              "Control the operation of this pallet.",
              "",
              "Dispatch origin must be signed by the [`Config::ControlOrigin`]."
            ],
            "args": [
              {
                "name": "eras_to_check",
                "type": "U32",
                "type_name": "EraIndex"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 394
        },
        "events": [
          {
            "lookup": "3c00",
            "name": "Unstaked",
            "docs": [
              "A staker was unstaked."
            ],
            "args": [
              "[U8; 32]",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_type_name": [
              "AccountId",
              "DispatchResult"
            ]
          },
          {
            "lookup": "3c01",
            "name": "Slashed",
            "docs": [
              "A staker was slashed for requesting fast-unstake whilst being exposed."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3c02",
            "name": "InternalError",
            "docs": [
              "An internal error happened. Operations will be paused now."
            ],
            "args": null
          },
          {
            "lookup": "3c03",
            "name": "BatchChecked",
            "docs": [
              "A batch was partially checked for the given eras, but the process did not finish."
            ],
            "args": [
              "Vec\u003cU32\u003e"
            ],
            "args_type_name": [
              "Vec\u003cEraIndex\u003e"
            ]
          },
          {
            "lookup": "3c04",
            "name": "BatchFinished",
            "docs": [
              "A batch of a given size was terminated.",
              "",
              "This is always follows by a number of `Unstaked` or `Slashed` events, marking the end",
              "of the batch. A new batch will be created upon next block."
            ],
            "args": [
              "U32"
            ],
            "args_type_name": [
              "u32"
            ]
          }
        ],
        "events_value": {
          "type": 413
        },
        "constants": [
          {
            "name": "Deposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " Deposit to take for unstaking, to make sure we're able to slash the it in order to cover",
              " the costs of resources on unsuccessful unstake."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotController",
            "doc": [
              "The provided Controller account was not found.",
              "",
              "This means that the given account is not bonded."
            ]
          },
          {
            "name": "AlreadyQueued",
            "doc": [
              "The bonded account has already been queued."
            ]
          },
          {
            "name": "NotFullyBonded",
            "doc": [
              "The bonded account has active unlocking chunks."
            ]
          },
          {
            "name": "NotQueued",
            "doc": [
              "The provided un-staker is not in the `Queue`."
            ]
          },
          {
            "name": "AlreadyHead",
            "doc": [
              "The provided un-staker is already in Head, and cannot deregister."
            ]
          },
          {
            "name": "CallNotAllowed",
            "doc": [
              "The call is not allowed at this point because the pallet is not active."
            ]
          }
        ],
        "errors_value": {
          "type": 768
        },
        "index": 60
      },
      {
        "name": "MessageQueue",
        "prefix": "MessageQueue",
        "storage": [
          {
            "name": "BookStateFor",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_message_queue:BookState",
                "keys_id": 4,
                "value_id": 769
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " The index of the first and last (non-empty) pages."
            ]
          },
          {
            "name": "ServiceHead",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " The origin at which we should begin servicing."
            ]
          },
          {
            "name": "Pages",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_message_queue:Page",
                "keys_id": 90,
                "value_id": 772
              }
            },
            "fallback": "0x00",
            "docs": [
              " The map of page indices to pages."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3d00",
            "name": "reap_page",
            "docs": [
              "Remove a page which has no more messages remaining to be processed or is stale."
            ],
            "args": [
              {
                "name": "message_origin",
                "type": "U32",
                "type_name": "MessageOriginOf"
              },
              {
                "name": "page_index",
                "type": "U32",
                "type_name": "PageIndex"
              }
            ]
          },
          {
            "lookup": "3d01",
            "name": "execute_overweight",
            "docs": [
              "Execute an overweight message.",
              "",
              "Temporary processing errors will be propagated whereas permanent errors are treated",
              "as success condition.",
              "",
              "- `origin`: Must be `Signed`.",
              "- `message_origin`: The origin from which the message to be executed arrived.",
              "- `page`: The page in the queue in which the message to be executed is sitting.",
              "- `index`: The index into the queue of the message to be executed.",
              "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
              "  of the message.",
              "",
              "Benchmark complexity considerations: O(index + weight_limit)."
            ],
            "args": [
              {
                "name": "message_origin",
                "type": "U32",
                "type_name": "MessageOriginOf"
              },
              {
                "name": "page",
                "type": "U32",
                "type_name": "PageIndex"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "Size"
              },
              {
                "name": "weight_limit",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 395
        },
        "events": [
          {
            "lookup": "3d00",
            "name": "Discarded",
            "docs": [
              "Message discarded due to an inability to decode the item. Usually caused by state",
              "corruption."
            ],
            "args": [
              "H256"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "3d01",
            "name": "ProcessingFailed",
            "docs": [
              "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
            ],
            "args": [
              "H256",
              "U32",
              "frame_support:traits:messages:ProcessMessageError"
            ],
            "args_type_name": [
              "Hash",
              "MessageOriginOf",
              "ProcessMessageError"
            ]
          },
          {
            "lookup": "3d02",
            "name": "Processed",
            "docs": [
              "Message is processed."
            ],
            "args": [
              "H256",
              "U32",
              "sp_weights:weight_v2:Weight",
              "Bool"
            ],
            "args_type_name": [
              "Hash",
              "MessageOriginOf",
              "Weight",
              "bool"
            ]
          },
          {
            "lookup": "3d03",
            "name": "OverweightEnqueued",
            "docs": [
              "Message placed in overweight queue."
            ],
            "args": [
              "H256",
              "U32",
              "U32",
              "U32"
            ],
            "args_type_name": [
              "Hash",
              "MessageOriginOf",
              "PageIndex",
              "Size"
            ]
          },
          {
            "lookup": "3d04",
            "name": "PageReaped",
            "docs": [
              "This page was reaped."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_type_name": [
              "MessageOriginOf",
              "PageIndex"
            ]
          }
        ],
        "events_value": {
          "type": 414
        },
        "constants": [
          {
            "name": "HeapSize",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00000100",
            "docs": [
              " The size of the page; this implies the maximum message size which can be sent.",
              "",
              " A good value depends on the expected message sizes, their weights, the weight that is",
              " available for processing them and the maximal needed message size. The maximal message",
              " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
            ]
          },
          {
            "name": "MaxStale",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80000000",
            "docs": [
              " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
              " can happen. Once there are more stale pages than this, then historical pages may be",
              " dropped, even if they contain unprocessed overweight messages."
            ]
          },
          {
            "name": "ServiceWeight",
            "type": "option\u003csp_weights:weight_v2:Weight\u003e",
            "type_value": 404,
            "constants_value": "010700a0db215d133333333333333333",
            "docs": [
              " The amount of weight (if any) which should be provided to the message queue for",
              " servicing enqueued items.",
              "",
              " This may be legitimately `None` in the case that you will call",
              " `ServiceQueues::service_queues` manually."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotReapable",
            "doc": [
              "Page is not reapable because it has items remaining to be processed and is not old",
              "enough."
            ]
          },
          {
            "name": "NoPage",
            "doc": [
              "Page to be reaped does not exist."
            ]
          },
          {
            "name": "NoMessage",
            "doc": [
              "The referenced message could not be found."
            ]
          },
          {
            "name": "AlreadyProcessed",
            "doc": [
              "The message was already processed and cannot be processed again."
            ]
          },
          {
            "name": "Queued",
            "doc": [
              "The message is queued for future execution."
            ]
          },
          {
            "name": "InsufficientWeight",
            "doc": [
              "There is temporarily not enough weight to continue servicing messages."
            ]
          },
          {
            "name": "TemporarilyUnprocessable",
            "doc": [
              "This message is temporarily unprocessable.",
              "",
              "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
              "retrying."
            ]
          }
        ],
        "errors_value": {
          "type": 774
        },
        "index": 61
      },
      {
        "name": "Pov",
        "prefix": "Pov",
        "storage": [
          {
            "name": "Value",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "Value2",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "UnboundedValue",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU8\u003e",
              "PlainTypeValue": 13
            },
            "fallback": "0x00",
            "docs": [
              " A value without a MEL bound."
            ]
          },
          {
            "name": "BoundedValue",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU8\u003e",
              "PlainTypeValue": 775
            },
            "fallback": "0x00",
            "docs": [
              " A value with a MEL bound of 32 byte."
            ]
          },
          {
            "name": "LargeValue",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU8\u003e",
              "PlainTypeValue": 608
            },
            "fallback": "0x00",
            "docs": [
              " 4MiB value."
            ]
          },
          {
            "name": "LargeValue2",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU8\u003e",
              "PlainTypeValue": 608
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "Map1M",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_256"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " A map with a maximum of 1M entries."
            ]
          },
          {
            "name": "Map16M",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_256"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " A map with a maximum of 16M entries."
            ]
          },
          {
            "name": "DoubleMap1M",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_256",
                  "Blake2_256"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "U32",
                "keys_id": 90,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "UnboundedMap",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_256"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU32\u003e",
                "keys_id": 4,
                "value_id": 108
              }
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "UnboundedMap2",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_256"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU32\u003e",
                "keys_id": 4,
                "value_id": 108
              }
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "UnboundedMapTwox",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU32\u003e",
                "keys_id": 4,
                "value_id": 108
              }
            },
            "fallback": "0x00",
            "docs": null
          }
        ],
        "calls": [
          {
            "lookup": "3e00",
            "name": "emit_event",
            "docs": null,
            "args": null
          },
          {
            "lookup": "3e01",
            "name": "noop",
            "docs": null,
            "args": null
          }
        ],
        "calls_value": {
          "type": 396
        },
        "events": [
          {
            "lookup": "3e00",
            "name": "TestEvent",
            "docs": null,
            "args": null
          }
        ],
        "events_value": {
          "type": 416
        },
        "errors": null,
        "errors_value": null,
        "index": 62
      }
    ]
  },
  "extrinsic": {
    "type": 776,
    "version": 4,
    "signedExtensions": [
      {
        "identifier": "CheckNonZeroSender",
        "type": 778,
        "additionalSigned": 32
      },
      {
        "identifier": "CheckSpecVersion",
        "type": 779,
        "additionalSigned": 4
      },
      {
        "identifier": "CheckTxVersion",
        "type": 780,
        "additionalSigned": 4
      },
      {
        "identifier": "CheckGenesis",
        "type": 781,
        "additionalSigned": 12
      },
      {
        "identifier": "CheckMortality",
        "type": 782,
        "additionalSigned": 12
      },
      {
        "identifier": "CheckNonce",
        "type": 784,
        "additionalSigned": 32
      },
      {
        "identifier": "CheckWeight",
        "type": 785,
        "additionalSigned": 32
      },
      {
        "identifier": "ChargeAssetTxPayment",
        "type": 786,
        "additionalSigned": 32
      }
    ],
    "signed_identifier": [
      "CheckNonZeroSender",
      "CheckSpecVersion",
      "CheckTxVersion",
      "CheckGenesis",
      "CheckMortality",
      "CheckNonce",
      "CheckWeight",
      "ChargeAssetTxPayment"
    ]
  },
  "type": 787,
  "apis": [
    {
      "name": "Core",
      "methods": [
        {
          "name": "version",
          "inputs": null,
          "outputsId": 428,
          "outputs": "sp_version:RuntimeVersion",
          "docs": [
            " Returns the version of the runtime."
          ]
        },
        {
          "name": "execute_block",
          "inputs": [
            {
              "name": "block",
              "typeId": 788,
              "type": "sp_runtime:generic:block:Block"
            }
          ],
          "outputsId": 32,
          "outputs": "NULL",
          "docs": [
            " Execute the given block."
          ]
        },
        {
          "name": "initialize_block",
          "inputs": [
            {
              "name": "header",
              "typeId": 148,
              "type": "sp_runtime:generic:header:Header"
            }
          ],
          "outputsId": 32,
          "outputs": "NULL",
          "docs": [
            " Initialize a block with the given header."
          ]
        }
      ],
      "docs": [
        " The `Core` runtime api that every Substrate runtime needs to implement."
      ]
    },
    {
      "name": "Metadata",
      "methods": [
        {
          "name": "metadata",
          "inputs": null,
          "outputsId": 790,
          "outputs": "Vec\u003cU8\u003e",
          "docs": [
            " Returns the metadata of a runtime."
          ]
        },
        {
          "name": "metadata_at_version",
          "inputs": [
            {
              "name": "version",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 791,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": [
            " Returns the metadata at a given version.",
            "",
            " If the given `version` isn't supported, this will return `None`.",
            " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."
          ]
        },
        {
          "name": "metadata_versions",
          "inputs": null,
          "outputsId": 108,
          "outputs": "Vec\u003cU32\u003e",
          "docs": [
            " Returns the supported metadata versions.",
            "",
            " This can be used to call `metadata_at_version`."
          ]
        }
      ],
      "docs": [
        " The `Metadata` api trait that returns metadata for the runtime."
      ]
    },
    {
      "name": "BlockBuilder",
      "methods": [
        {
          "name": "apply_extrinsic",
          "inputs": [
            {
              "name": "extrinsic",
              "typeId": 776,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 792,
          "outputs": "Result\u003cResult\u003cNULL,sp_runtime:DispatchError\u003e,sp_runtime:transaction_validity:TransactionValidityError\u003e",
          "docs": [
            " Apply the given extrinsic.",
            "",
            " Returns an inclusion outcome which specifies if this extrinsic is included in",
            " this block or not."
          ]
        },
        {
          "name": "finalize_block",
          "inputs": null,
          "outputsId": 148,
          "outputs": "sp_runtime:generic:header:Header",
          "docs": [
            " Finish the current block."
          ]
        },
        {
          "name": "inherent_extrinsics",
          "inputs": [
            {
              "name": "inherent",
              "typeId": 796,
              "type": "Vec\u003cTuple:[U8; 8]Vec\u003cU8\u003e\u003e"
            }
          ],
          "outputsId": 789,
          "outputs": "Vec\u003cVec\u003cU8\u003e\u003e",
          "docs": [
            " Generate inherent extrinsics. The inherent data will vary from chain to chain."
          ]
        },
        {
          "name": "check_inherents",
          "inputs": [
            {
              "name": "block",
              "typeId": 788,
              "type": "sp_runtime:generic:block:Block"
            },
            {
              "name": "data",
              "typeId": 796,
              "type": "Vec\u003cTuple:[U8; 8]Vec\u003cU8\u003e\u003e"
            }
          ],
          "outputsId": 800,
          "outputs": "sp_inherents:CheckInherentsResult",
          "docs": [
            " Check that the inherents are valid. The inherent data will vary from chain to chain."
          ]
        }
      ],
      "docs": [
        " The `BlockBuilder` api trait that provides the required functionality for building a block."
      ]
    },
    {
      "name": "TaggedTransactionQueue",
      "methods": [
        {
          "name": "validate_transaction",
          "inputs": [
            {
              "name": "source",
              "typeId": 801,
              "type": "sp_runtime:transaction_validity:TransactionSource"
            },
            {
              "name": "tx",
              "typeId": 776,
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "block_hash",
              "typeId": 12,
              "type": "H256"
            }
          ],
          "outputsId": 802,
          "outputs": "Result\u003csp_runtime:transaction_validity:ValidTransaction,sp_runtime:transaction_validity:TransactionValidityError\u003e",
          "docs": [
            " Validate the transaction.",
            "",
            " This method is invoked by the transaction pool to learn details about given transaction.",
            " The implementation should make sure to verify the correctness of the transaction",
            " against current state. The given `block_hash` corresponds to the hash of the block",
            " that is used as current state.",
            "",
            " Note that this call may be performed by the pool multiple times and transactions",
            " might be verified in any possible order."
          ]
        }
      ],
      "docs": [
        " The `TaggedTransactionQueue` api trait for interfering with the transaction queue."
      ]
    },
    {
      "name": "OffchainWorkerApi",
      "methods": [
        {
          "name": "offchain_worker",
          "inputs": [
            {
              "name": "header",
              "typeId": 148,
              "type": "sp_runtime:generic:header:Header"
            }
          ],
          "outputsId": 32,
          "outputs": "NULL",
          "docs": [
            " Starts the off-chain task for given block header."
          ]
        }
      ],
      "docs": [
        " The offchain worker api."
      ]
    },
    {
      "name": "GrandpaApi",
      "methods": [
        {
          "name": "grandpa_authorities",
          "inputs": null,
          "outputsId": 64,
          "outputs": "Vec\u003cTuple:sp_consensus_grandpa:app:PublicU64\u003e",
          "docs": [
            " Get the current GRANDPA authorities and weights. This should not change except",
            " for when changes are scheduled and the corresponding delay has passed.",
            "",
            " When called at block B, it will return the set of authorities that should be",
            " used to finalize descendants of this block (B+1, B+2, ...). The block B itself",
            " is finalized by the authorities from block B-1."
          ]
        },
        {
          "name": "submit_report_equivocation_unsigned_extrinsic",
          "inputs": [
            {
              "name": "equivocation_proof",
              "typeId": 240,
              "type": "sp_consensus_grandpa:EquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "typeId": 804,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 805,
          "outputs": "option\u003cNULL\u003e",
          "docs": [
            " Submits an unsigned extrinsic to report an equivocation. The caller",
            " must provide the equivocation proof and a key ownership proof",
            " (should be obtained using `generate_key_ownership_proof`). The",
            " extrinsic will be unsigned and should only be accepted for local",
            " authorship (not to be broadcast to the network). This method returns",
            " `None` when creation of the extrinsic fails, e.g. if equivocation",
            " reporting is disabled for the given runtime (i.e. this method is",
            " hardcoded to return `None`). Only useful in an offchain context."
          ]
        },
        {
          "name": "generate_key_ownership_proof",
          "inputs": [
            {
              "name": "set_id",
              "typeId": 11,
              "type": "U64"
            },
            {
              "name": "authority_id",
              "typeId": 66,
              "type": "[U8; 32]"
            }
          ],
          "outputsId": 806,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": [
            " Generates a proof of key ownership for the given authority in the",
            " given set. An example usage of this module is coupled with the",
            " session historical module to prove that a given authority key is",
            " tied to a given staking identity during a specific session. Proofs",
            " of key ownership are necessary for submitting equivocation reports.",
            " NOTE: even though the API takes a `set_id` as parameter the current",
            " implementations ignore this parameter and instead rely on this",
            " method being called at the correct block height, i.e. any point at",
            " which the given set id is live on-chain. Future implementations will",
            " instead use indexed data through an offchain worker, not requiring",
            " older states to be available."
          ]
        },
        {
          "name": "current_set_id",
          "inputs": null,
          "outputsId": 11,
          "outputs": "U64",
          "docs": [
            " Get current GRANDPA authority set id."
          ]
        }
      ],
      "docs": [
        " APIs for integrating the GRANDPA finality gadget into runtimes.",
        " This should be implemented on the runtime side.",
        "",
        " This is primarily used for negotiating authority-set changes for the",
        " gadget. GRANDPA uses a signaling model of changing authority sets:",
        " changes should be signaled with a delay of N blocks, and then automatically",
        " applied in the runtime after those N blocks have passed.",
        "",
        " The consensus protocol will coordinate the handoff externally."
      ]
    },
    {
      "name": "NominationPoolsApi",
      "methods": [
        {
          "name": "pending_rewards",
          "inputs": [
            {
              "name": "who",
              "typeId": 0,
              "type": "[U8; 32]"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": [
            " Returns the pending rewards for the member that the AccountId was given for."
          ]
        },
        {
          "name": "points_to_balance",
          "inputs": [
            {
              "name": "pool_id",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "points",
              "typeId": 6,
              "type": "U128"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": [
            " Returns the equivalent balance of `points` for a given pool."
          ]
        },
        {
          "name": "balance_to_points",
          "inputs": [
            {
              "name": "pool_id",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "new_funds",
              "typeId": 6,
              "type": "U128"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": [
            " Returns the equivalent points of `new_funds` for a given pool."
          ]
        }
      ],
      "docs": [
        " Runtime api for accessing information about nomination pools."
      ]
    },
    {
      "name": "StakingApi",
      "methods": [
        {
          "name": "nominations_quota",
          "inputs": [
            {
              "name": "balance",
              "typeId": 6,
              "type": "U128"
            }
          ],
          "outputsId": 4,
          "outputs": "U32",
          "docs": [
            " Returns the nominations quota for a nominator with a given balance."
          ]
        }
      ],
      "docs": null
    },
    {
      "name": "BabeApi",
      "methods": [
        {
          "name": "configuration",
          "inputs": null,
          "outputsId": 807,
          "outputs": "sp_consensus_babe:BabeConfiguration",
          "docs": [
            " Return the configuration for BABE."
          ]
        },
        {
          "name": "current_epoch_start",
          "inputs": null,
          "outputsId": 152,
          "outputs": "U64",
          "docs": [
            " Returns the slot that started the current epoch."
          ]
        },
        {
          "name": "current_epoch",
          "inputs": null,
          "outputsId": 808,
          "outputs": "sp_consensus_babe:Epoch",
          "docs": [
            " Returns information regarding the current epoch."
          ]
        },
        {
          "name": "next_epoch",
          "inputs": null,
          "outputsId": 808,
          "outputs": "sp_consensus_babe:Epoch",
          "docs": [
            " Returns information regarding the next epoch (which was already",
            " previously announced)."
          ]
        },
        {
          "name": "generate_key_ownership_proof",
          "inputs": [
            {
              "name": "slot",
              "typeId": 152,
              "type": "U64"
            },
            {
              "name": "authority_id",
              "typeId": 151,
              "type": "[U8; 32]"
            }
          ],
          "outputsId": 809,
          "outputs": "option\u003csp_consensus_babe:OpaqueKeyOwnershipProof\u003e",
          "docs": [
            " Generates a proof of key ownership for the given authority in the",
            " current epoch. An example usage of this module is coupled with the",
            " session historical module to prove that a given authority key is",
            " tied to a given staking identity during a specific session. Proofs",
            " of key ownership are necessary for submitting equivocation reports.",
            " NOTE: even though the API takes a `slot` as parameter the current",
            " implementations ignores this parameter and instead relies on this",
            " method being called at the correct block height, i.e. any point at",
            " which the epoch for the given slot is live on-chain. Future",
            " implementations will instead use indexed data through an offchain",
            " worker, not requiring older states to be available."
          ]
        },
        {
          "name": "submit_report_equivocation_unsigned_extrinsic",
          "inputs": [
            {
              "name": "equivocation_proof",
              "typeId": 147,
              "type": "sp_consensus_slots:EquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "typeId": 810,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 805,
          "outputs": "option\u003cNULL\u003e",
          "docs": [
            " Submits an unsigned extrinsic to report an equivocation. The caller",
            " must provide the equivocation proof and a key ownership proof",
            " (should be obtained using `generate_key_ownership_proof`). The",
            " extrinsic will be unsigned and should only be accepted for local",
            " authorship (not to be broadcast to the network). This method returns",
            " `None` when creation of the extrinsic fails, e.g. if equivocation",
            " reporting is disabled for the given runtime (i.e. this method is",
            " hardcoded to return `None`). Only useful in an offchain context."
          ]
        }
      ],
      "docs": [
        " API necessary for block authorship with BABE."
      ]
    },
    {
      "name": "AuthorityDiscoveryApi",
      "methods": [
        {
          "name": "authorities",
          "inputs": null,
          "outputsId": 565,
          "outputs": "Vec\u003c[U8; 32]\u003e",
          "docs": [
            " Retrieve authority identifiers of the current and next authority set."
          ]
        }
      ],
      "docs": [
        " The authority discovery api.",
        "",
        " This api is used by the `client/authority-discovery` module to retrieve identifiers",
        " of the current and next authority set."
      ]
    },
    {
      "name": "AccountNonceApi",
      "methods": [
        {
          "name": "account_nonce",
          "inputs": [
            {
              "name": "account",
              "typeId": 0,
              "type": "[U8; 32]"
            }
          ],
          "outputsId": 4,
          "outputs": "U32",
          "docs": [
            " Get current account nonce of given `AccountId`."
          ]
        }
      ],
      "docs": [
        " The API to query account nonce (aka transaction index)."
      ]
    },
    {
      "name": "AssetsApi",
      "methods": [
        {
          "name": "account_balances",
          "inputs": [
            {
              "name": "account",
              "typeId": 0,
              "type": "[U8; 32]"
            }
          ],
          "outputsId": 585,
          "outputs": "Vec\u003cTuple:U32U128\u003e",
          "docs": [
            " Returns the list of `AssetId`s and corresponding balance that an `AccountId` has."
          ]
        }
      ],
      "docs": null
    },
    {
      "name": "ContractsApi",
      "methods": [
        {
          "name": "call",
          "inputs": [
            {
              "name": "origin",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "dest",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "value",
              "typeId": 6,
              "type": "U128"
            },
            {
              "name": "gas_limit",
              "typeId": 404,
              "type": "option\u003csp_weights:weight_v2:Weight\u003e"
            },
            {
              "name": "storage_deposit_limit",
              "typeId": 328,
              "type": "option\u003cU128\u003e"
            },
            {
              "name": "input_data",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 811,
          "outputs": "pallet_contracts_primitives:ContractResult@811",
          "docs": [
            " Perform a call from a specified account to a given contract.",
            "",
            " See [`crate::Pallet::bare_call`]."
          ]
        },
        {
          "name": "instantiate",
          "inputs": [
            {
              "name": "origin",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "value",
              "typeId": 6,
              "type": "U128"
            },
            {
              "name": "gas_limit",
              "typeId": 404,
              "type": "option\u003csp_weights:weight_v2:Weight\u003e"
            },
            {
              "name": "storage_deposit_limit",
              "typeId": 328,
              "type": "option\u003cU128\u003e"
            },
            {
              "name": "code",
              "typeId": 816,
              "type": "pallet_contracts_primitives:Code"
            },
            {
              "name": "data",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "salt",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 817,
          "outputs": "pallet_contracts_primitives:ContractResult@817",
          "docs": [
            " Instantiate a new contract.",
            "",
            " See `[crate::Pallet::bare_instantiate]`."
          ]
        },
        {
          "name": "upload_code",
          "inputs": [
            {
              "name": "origin",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "code",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "storage_deposit_limit",
              "typeId": 328,
              "type": "option\u003cU128\u003e"
            },
            {
              "name": "determinism",
              "typeId": 255,
              "type": "pallet_contracts:wasm:Determinism"
            }
          ],
          "outputsId": 820,
          "outputs": "Result\u003cpallet_contracts_primitives:CodeUploadReturnValue,sp_runtime:DispatchError\u003e",
          "docs": [
            " Upload new code without instantiating a contract from it.",
            "",
            " See [`crate::Pallet::bare_upload_code`]."
          ]
        },
        {
          "name": "get_storage",
          "inputs": [
            {
              "name": "address",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "key",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 822,
          "outputs": "Result\u003coption\u003cVec\u003cU8\u003e\u003e,pallet_contracts_primitives:ContractAccessError\u003e",
          "docs": [
            " Query a given storage key in a given contract.",
            "",
            " Returns `Ok(Some(Vec\u003cu8\u003e))` if the storage value exists under the given key in the",
            " specified account and `Ok(None)` if it doesn't. If the account specified by the address",
            " doesn't exist, or doesn't have a contract then `Err` is returned."
          ]
        }
      ],
      "docs": [
        " The API used to dry-run contract interactions."
      ]
    },
    {
      "name": "TransactionPaymentApi",
      "methods": [
        {
          "name": "query_info",
          "inputs": [
            {
              "name": "uxt",
              "typeId": 776,
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "len",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 825,
          "outputs": "pallet_transaction_payment:types:RuntimeDispatchInfo",
          "docs": null
        },
        {
          "name": "query_fee_details",
          "inputs": [
            {
              "name": "uxt",
              "typeId": 776,
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "len",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 826,
          "outputs": "pallet_transaction_payment:types:FeeDetails",
          "docs": null
        },
        {
          "name": "query_weight_to_fee",
          "inputs": [
            {
              "name": "weight",
              "typeId": 9,
              "type": "sp_weights:weight_v2:Weight"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": null
        },
        {
          "name": "query_length_to_fee",
          "inputs": [
            {
              "name": "length",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": null
        }
      ],
      "docs": null
    },
    {
      "name": "TransactionPaymentCallApi",
      "methods": [
        {
          "name": "query_call_info",
          "inputs": [
            {
              "name": "call",
              "typeId": 133,
              "type": "Call"
            },
            {
              "name": "len",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 825,
          "outputs": "pallet_transaction_payment:types:RuntimeDispatchInfo",
          "docs": [
            " Query information of a dispatch class, weight, and fee of a given encoded `Call`."
          ]
        },
        {
          "name": "query_call_fee_details",
          "inputs": [
            {
              "name": "call",
              "typeId": 133,
              "type": "Call"
            },
            {
              "name": "len",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 826,
          "outputs": "pallet_transaction_payment:types:FeeDetails",
          "docs": [
            " Query fee details of a given encoded `Call`."
          ]
        },
        {
          "name": "query_weight_to_fee",
          "inputs": [
            {
              "name": "weight",
              "typeId": 9,
              "type": "sp_weights:weight_v2:Weight"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": [
            " Query the output of the current `WeightToFee` given some input."
          ]
        },
        {
          "name": "query_length_to_fee",
          "inputs": [
            {
              "name": "length",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": [
            " Query the output of the current `LengthToFee` given some input."
          ]
        }
      ],
      "docs": null
    },
    {
      "name": "NftsApi",
      "methods": [
        {
          "name": "owner",
          "inputs": [
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "item",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 41,
          "outputs": "option\u003c[U8; 32]\u003e",
          "docs": null
        },
        {
          "name": "collection_owner",
          "inputs": [
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 41,
          "outputs": "option\u003c[U8; 32]\u003e",
          "docs": null
        },
        {
          "name": "attribute",
          "inputs": [
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "item",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "key",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 823,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": null
        },
        {
          "name": "custom_attribute",
          "inputs": [
            {
              "name": "account",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "item",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "key",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 823,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": null
        },
        {
          "name": "system_attribute",
          "inputs": [
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "item",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "key",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 823,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": null
        },
        {
          "name": "collection_attribute",
          "inputs": [
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "key",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 823,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": null
        }
      ],
      "docs": null
    },
    {
      "name": "MmrApi",
      "methods": [
        {
          "name": "mmr_root",
          "inputs": null,
          "outputsId": 829,
          "outputs": "Result\u003cH256,sp_mmr_primitives:Error\u003e",
          "docs": [
            " Return the on-chain MMR root hash."
          ]
        },
        {
          "name": "mmr_leaf_count",
          "inputs": null,
          "outputsId": 831,
          "outputs": "Result\u003cU64,sp_mmr_primitives:Error\u003e",
          "docs": [
            " Return the number of MMR blocks in the chain."
          ]
        },
        {
          "name": "generate_proof",
          "inputs": [
            {
              "name": "block_numbers",
              "typeId": 108,
              "type": "Vec\u003cU32\u003e"
            },
            {
              "name": "best_known_block_number",
              "typeId": 38,
              "type": "option\u003cU32\u003e"
            }
          ],
          "outputsId": 832,
          "outputs": "Result\u003cTuple:Vec\u003csp_mmr_primitives:EncodableOpaqueLeaf\u003esp_mmr_primitives:Proof,sp_mmr_primitives:Error\u003e",
          "docs": [
            " Generate MMR proof for a series of block numbers. If `best_known_block_number = Some(n)`,",
            " use historical MMR state at given block height `n`. Else, use current MMR state."
          ]
        },
        {
          "name": "verify_proof",
          "inputs": [
            {
              "name": "leaves",
              "typeId": 834,
              "type": "Vec\u003csp_mmr_primitives:EncodableOpaqueLeaf\u003e"
            },
            {
              "name": "proof",
              "typeId": 836,
              "type": "sp_mmr_primitives:Proof"
            }
          ],
          "outputsId": 837,
          "outputs": "Result\u003cNULL,sp_mmr_primitives:Error\u003e",
          "docs": [
            " Verify MMR proof against on-chain MMR for a batch of leaves.",
            "",
            " Note this function will use on-chain MMR root hash and check if the proof matches the hash.",
            " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the",
            " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]"
          ]
        },
        {
          "name": "verify_proof_stateless",
          "inputs": [
            {
              "name": "root",
              "typeId": 12,
              "type": "H256"
            },
            {
              "name": "leaves",
              "typeId": 834,
              "type": "Vec\u003csp_mmr_primitives:EncodableOpaqueLeaf\u003e"
            },
            {
              "name": "proof",
              "typeId": 836,
              "type": "sp_mmr_primitives:Proof"
            }
          ],
          "outputsId": 837,
          "outputs": "Result\u003cNULL,sp_mmr_primitives:Error\u003e",
          "docs": [
            " Verify MMR proof against given root hash for a batch of leaves.",
            "",
            " Note this function does not require any on-chain storage - the",
            " proof is verified against given MMR root hash.",
            "",
            " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the",
            " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]"
          ]
        }
      ],
      "docs": [
        " API to interact with MMR pallet."
      ]
    },
    {
      "name": "SessionKeys",
      "methods": [
        {
          "name": "generate_session_keys",
          "inputs": [
            {
              "name": "seed",
              "typeId": 823,
              "type": "option\u003cVec\u003cU8\u003e\u003e"
            }
          ],
          "outputsId": 13,
          "outputs": "Vec\u003cU8\u003e",
          "docs": [
            " Generate a set of session keys with optionally using the given seed.",
            " The keys should be stored within the keystore exposed via runtime",
            " externalities.",
            "",
            " The seed needs to be a valid `utf8` string.",
            "",
            " Returns the concatenated SCALE encoded public keys."
          ]
        },
        {
          "name": "decode_session_keys",
          "inputs": [
            {
              "name": "encoded",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 838,
          "outputs": "option\u003cVec\u003cTuple:Vec\u003cU8\u003e[U8; 4]\u003e\u003e",
          "docs": [
            " Decode the given public session keys.",
            "",
            " Returns the list of public raw public keys + key type."
          ]
        }
      ],
      "docs": [
        " Session keys runtime api."
      ]
    }
  ]
}