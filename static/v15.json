{
  "metadata_version": 15,
  "metadata": {
    "modules": [
      {
        "name": "System",
        "prefix": "System",
        "storage": [
          {
            "name": "Account",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "frame_system:AccountInfo",
                "keys_id": 0,
                "value_id": 3
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
            "docs": [
              " The full account information for a particular account ID."
            ]
          },
          {
            "name": "ExtrinsicCount",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Total extrinsics count for the current block."
            ]
          },
          {
            "name": "BlockWeight",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "frame_support:dispatch:PerDispatchClass@8",
              "PlainTypeValue": 8
            },
            "fallback": "0x000000000000",
            "docs": [
              " The current weight for the block."
            ]
          },
          {
            "name": "AllExtrinsicsLen",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Total length (in bytes) for all extrinsics put together, for the current block."
            ]
          },
          {
            "name": "BlockHash",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "H256",
                "keys_id": 4,
                "value_id": 12
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Map of block numbers to block hashes."
            ]
          },
          {
            "name": "ExtrinsicData",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 13
              }
            },
            "fallback": "0x00",
            "docs": [
              " Extrinsics data for the current block (maps an extrinsic's index to its data)."
            ]
          },
          {
            "name": "Number",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The current block number being processed. Set by `execute_block`."
            ]
          },
          {
            "name": "ParentHash",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "H256",
              "PlainTypeValue": 12
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Hash of the previous block."
            ]
          },
          {
            "name": "Digest",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003csp_runtime:generic:digest:DigestItem\u003e",
              "PlainTypeValue": 14
            },
            "fallback": "0x00",
            "docs": [
              " Digest of the current block, also part of the block header."
            ]
          },
          {
            "name": "Events",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cframe_system:EventRecord\u003e",
              "PlainTypeValue": 18
            },
            "fallback": "0x00",
            "docs": [
              " Events deposited for the current block.",
              "",
              " NOTE: The item is unbound and should therefore never be read on chain.",
              " It could otherwise inflate the PoV size of a block.",
              "",
              " Events have a large in-memory size. Box the events to not go out-of-memory",
              " just in case someone still reads them from within the runtime."
            ]
          },
          {
            "name": "EventCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of events in the `Events\u003cT\u003e` list."
            ]
          },
          {
            "name": "EventTopics",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Vec\u003cTuple:U32U32\u003e",
                "keys_id": 12,
                "value_id": 456
              }
            },
            "fallback": "0x00",
            "docs": [
              " Mapping between a topic (represented by T::Hash) and a vector of indexes",
              " of events in the `\u003cEvents\u003cT\u003e\u003e` list.",
              "",
              " All topic vectors have deterministic storage locations depending on the topic. This",
              " allows light-clients to leverage the changes trie storage tracking mechanism and",
              " in case of changes fetch the list of events of interest.",
              "",
              " The value has the type `(BlockNumberFor\u003cT\u003e, EventIndex)` because if we used only just",
              " the `EventIndex` then in case if the topic has the same contents on the next block",
              " no notification will be triggered thus the event might be lost."
            ]
          },
          {
            "name": "LastRuntimeUpgrade",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "frame_system:LastRuntimeUpgradeInfo",
              "PlainTypeValue": 457
            },
            "fallback": "0x00",
            "docs": [
              " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
            ]
          },
          {
            "name": "UpgradedToU32RefCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 43
            },
            "fallback": "0x00",
            "docs": [
              " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
            ]
          },
          {
            "name": "UpgradedToTripleRefCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 43
            },
            "fallback": "0x00",
            "docs": [
              " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
              " (default) if not."
            ]
          },
          {
            "name": "ExecutionPhase",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "frame_system:Phase",
              "PlainTypeValue": 454
            },
            "fallback": "0x00",
            "docs": [
              " The execution phase of the block."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0000",
            "name": "remark",
            "docs": [
              "See [`Pallet::remark`]."
            ],
            "args": [
              {
                "name": "remark",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "0001",
            "name": "set_heap_pages",
            "docs": [
              "See [`Pallet::set_heap_pages`]."
            ],
            "args": [
              {
                "name": "pages",
                "type": "U64",
                "type_name": "u64"
              }
            ]
          },
          {
            "lookup": "0002",
            "name": "set_code",
            "docs": [
              "See [`Pallet::set_code`]."
            ],
            "args": [
              {
                "name": "code",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "0003",
            "name": "set_code_without_checks",
            "docs": [
              "See [`Pallet::set_code_without_checks`]."
            ],
            "args": [
              {
                "name": "code",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "0004",
            "name": "set_storage",
            "docs": [
              "See [`Pallet::set_storage`]."
            ],
            "args": [
              {
                "name": "items",
                "type": "Vec\u003cTuple:Vec\u003cU8\u003eVec\u003cU8\u003e\u003e",
                "type_name": "Vec\u003cKeyValue\u003e"
              }
            ]
          },
          {
            "lookup": "0005",
            "name": "kill_storage",
            "docs": [
              "See [`Pallet::kill_storage`]."
            ],
            "args": [
              {
                "name": "keys",
                "type": "Vec\u003cVec\u003cU8\u003e\u003e",
                "type_name": "Vec\u003cKey\u003e"
              }
            ]
          },
          {
            "lookup": "0006",
            "name": "kill_prefix",
            "docs": [
              "See [`Pallet::kill_prefix`]."
            ],
            "args": [
              {
                "name": "prefix",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Key"
              },
              {
                "name": "subkeys",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0007",
            "name": "remark_with_event",
            "docs": [
              "See [`Pallet::remark_with_event`]."
            ],
            "args": [
              {
                "name": "remark",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 142
        },
        "events": [
          {
            "lookup": "0000",
            "name": "ExtrinsicSuccess",
            "docs": [
              "An extrinsic completed successfully."
            ],
            "args": [
              "frame_support:dispatch:DispatchInfo"
            ],
            "args_name": [
              "dispatch_info"
            ],
            "args_type_name": [
              "DispatchInfo"
            ]
          },
          {
            "lookup": "0001",
            "name": "ExtrinsicFailed",
            "docs": [
              "An extrinsic failed."
            ],
            "args": [
              "sp_runtime:DispatchError",
              "frame_support:dispatch:DispatchInfo"
            ],
            "args_name": [
              "dispatch_error",
              "dispatch_info"
            ],
            "args_type_name": [
              "DispatchError",
              "DispatchInfo"
            ]
          },
          {
            "lookup": "0002",
            "name": "CodeUpdated",
            "docs": [
              "`:code` was updated."
            ],
            "args": null
          },
          {
            "lookup": "0003",
            "name": "NewAccount",
            "docs": [
              "A new account was created."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "account"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "0004",
            "name": "KilledAccount",
            "docs": [
              "An account was reaped."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "account"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "0005",
            "name": "Remarked",
            "docs": [
              "On on-chain remark happened."
            ],
            "args": [
              "[U8; 32]",
              "H256"
            ],
            "args_name": [
              "sender",
              "hash"
            ],
            "args_type_name": [
              "AccountId",
              "Hash"
            ]
          }
        ],
        "events_value": {
          "type": 21
        },
        "constants": [
          {
            "name": "BlockWeights",
            "type": "frame_system:limits:BlockWeights",
            "type_value": 459,
            "constants_value": "025b1f5d000b00204aa9d10113ffffffffffffffffc2a0a91d00010bd05f9fa62e011366666666666666a6010b0098f73e5d0113ffffffffffffffbf010000c2a0a91d00010bd0e7f110a3011366666666666666e6010b00204aa9d10113ffffffffffffffff01070088526a74130000000000000040c2a0a91d00000000",
            "docs": [
              " Block \u0026 extrinsics weights: base values and limits."
            ]
          },
          {
            "name": "BlockLength",
            "type": "frame_support:dispatch:PerDispatchClass@463",
            "type_value": 462,
            "constants_value": "00003c000000500000005000",
            "docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "name": "BlockHashCount",
            "type": "U32",
            "type_value": 4,
            "constants_value": "60090000",
            "docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "name": "DbWeight",
            "type": "sp_weights:RuntimeDbWeight",
            "type_value": 464,
            "constants_value": "40787d010000000000e1f50500000000",
            "docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "name": "Version",
            "type": "sp_version:RuntimeVersion",
            "type_value": 465,
            "constants_value": "106e6f6465387375627374726174652d6e6f64650a0000000c0100000000000050df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000be9fb0c91a8046cf01000000f78b278be53f454c02000000ed99c5acb25eedf50300000017a6bc0d0062aeb30100000018ef58a3b67ba77001000000cbca25e39f14238702000000687ad44ad37f03c201000000bc9d89904f5b923f010000008453b50b222939770100000068b66ba122c93fa70200000037c8bb1350a9a2a8040000008a8047a53a8277ec01000000f3ff14d5ab52705903000000899a250cbe84f2500100000091d5df18b0d2cf5802000000ab3c0572291feb8b010000000200000001",
            "docs": [
              " Get the chain's current version."
            ]
          },
          {
            "name": "SS58Prefix",
            "type": "U16",
            "type_value": 101,
            "constants_value": "2a00",
            "docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "errors": [
          {
            "name": "InvalidSpecName",
            "doc": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "name": "SpecVersionNeedsToIncrease",
            "doc": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "name": "FailedToExtractRuntimeVersion",
            "doc": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "name": "NonDefaultComposite",
            "doc": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "name": "NonZeroRefCount",
            "doc": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "name": "CallFiltered",
            "doc": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "errors_value": {
          "type": 469
        },
        "index": 0
      },
      {
        "name": "Utility",
        "prefix": "",
        "storage": null,
        "calls": [
          {
            "lookup": "0100",
            "name": "batch",
            "docs": [
              "See [`Pallet::batch`]."
            ],
            "args": [
              {
                "name": "calls",
                "type": "Vec\u003cCall\u003e",
                "type_name": "Vec\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "0101",
            "name": "as_derivative",
            "docs": [
              "See [`Pallet::as_derivative`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "0102",
            "name": "batch_all",
            "docs": [
              "See [`Pallet::batch_all`]."
            ],
            "args": [
              {
                "name": "calls",
                "type": "Vec\u003cCall\u003e",
                "type_name": "Vec\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "0103",
            "name": "dispatch_as",
            "docs": [
              "See [`Pallet::dispatch_as`]."
            ],
            "args": [
              {
                "name": "as_origin",
                "type": "kitchensink_runtime:OriginCaller",
                "type_name": "Box\u003cPalletsOrigin\u003e"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "0104",
            "name": "force_batch",
            "docs": [
              "See [`Pallet::force_batch`]."
            ],
            "args": [
              {
                "name": "calls",
                "type": "Vec\u003cCall\u003e",
                "type_name": "Vec\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "0105",
            "name": "with_weight",
            "docs": [
              "See [`Pallet::with_weight`]."
            ],
            "args": [
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              },
              {
                "name": "weight",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 146
        },
        "events": [
          {
            "lookup": "0100",
            "name": "BatchInterrupted",
            "docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ],
            "args": [
              "U32",
              "sp_runtime:DispatchError"
            ],
            "args_name": [
              "index",
              "error"
            ],
            "args_type_name": [
              "u32",
              "DispatchError"
            ]
          },
          {
            "lookup": "0101",
            "name": "BatchCompleted",
            "docs": [
              "Batch of dispatches completed fully with no error."
            ],
            "args": null
          },
          {
            "lookup": "0102",
            "name": "BatchCompletedWithErrors",
            "docs": [
              "Batch of dispatches completed but has errors."
            ],
            "args": null
          },
          {
            "lookup": "0103",
            "name": "ItemCompleted",
            "docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ],
            "args": null
          },
          {
            "lookup": "0104",
            "name": "ItemFailed",
            "docs": [
              "A single item within a Batch of dispatches has completed with error."
            ],
            "args": [
              "sp_runtime:DispatchError"
            ],
            "args_name": [
              "error"
            ],
            "args_type_name": [
              "DispatchError"
            ]
          },
          {
            "lookup": "0105",
            "name": "DispatchedAs",
            "docs": [
              "A call was dispatched."
            ],
            "args": [
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "result"
            ],
            "args_type_name": [
              "DispatchResult"
            ]
          }
        ],
        "events_value": {
          "type": 30
        },
        "constants": [
          {
            "name": "batched_calls_limit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "aa2a0000",
            "docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "errors": [
          {
            "name": "TooManyCalls",
            "doc": [
              "Too many calls batched."
            ]
          }
        ],
        "errors_value": {
          "type": 470
        },
        "index": 1
      },
      {
        "name": "Babe",
        "prefix": "Babe",
        "storage": [
          {
            "name": "EpochIndex",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 11
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Current epoch index."
            ]
          },
          {
            "name": "Authorities",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:[U8; 32]U64\u003e",
              "PlainTypeValue": 471
            },
            "fallback": "0x00",
            "docs": [
              " Current epoch authorities."
            ]
          },
          {
            "name": "GenesisSlot",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 159
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " The slot at which the first epoch actually started. This is 0",
              " until the first block of the chain."
            ]
          },
          {
            "name": "CurrentSlot",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 159
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Current slot number."
            ]
          },
          {
            "name": "Randomness",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 1
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " The epoch randomness for the *current* epoch.",
              "",
              " # Security",
              "",
              " This MUST NOT be used for gambling, as it can be influenced by a",
              " malicious validator in the short term. It MAY be used in many",
              " cryptographic protocols, however, so long as one remembers that this",
              " (like everything else on-chain) it is public. For example, it can be",
              " used where a number is needed that cannot have been chosen by an",
              " adversary, for purposes such as public-coin zero-knowledge proofs."
            ]
          },
          {
            "name": "PendingEpochConfigChange",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "sp_consensus_babe:digests:NextConfigDescriptor",
              "PlainTypeValue": 161
            },
            "fallback": "0x00",
            "docs": [
              " Pending epoch configuration change that will be applied when the next epoch is enacted."
            ]
          },
          {
            "name": "NextRandomness",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 1
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Next epoch randomness."
            ]
          },
          {
            "name": "NextAuthorities",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:[U8; 32]U64\u003e",
              "PlainTypeValue": 471
            },
            "fallback": "0x00",
            "docs": [
              " Next epoch authorities."
            ]
          },
          {
            "name": "SegmentIndex",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Randomness under construction.",
              "",
              " We make a trade-off between storage accesses and list length.",
              " We store the under-construction randomness in segments of up to",
              " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
              "",
              " Once a segment reaches this length, we begin the next one.",
              " We reset all segments and return to `0` at the beginning of every",
              " epoch."
            ]
          },
          {
            "name": "UnderConstruction",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003c[U8; 32]\u003e",
                "keys_id": 4,
                "value_id": 474
              }
            },
            "fallback": "0x00",
            "docs": [
              " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
            ]
          },
          {
            "name": "Initialized",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "option\u003csp_consensus_babe:digests:PreDigest\u003e",
              "PlainTypeValue": 476
            },
            "fallback": "0x00",
            "docs": [
              " Temporary value (cleared at block finalization) which is `Some`",
              " if per-block initialization has already been called for current block."
            ]
          },
          {
            "name": "AuthorVrfRandomness",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "option\u003c[U8; 32]\u003e",
              "PlainTypeValue": 95
            },
            "fallback": "0x00",
            "docs": [
              " This field should always be populated during block processing unless",
              " secondary plain slots are enabled (which don't contain a VRF output).",
              "",
              " It is set in `on_finalize`, before it will contain the value from the last block."
            ]
          },
          {
            "name": "EpochStart",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Tuple:U32U32",
              "PlainTypeValue": 94
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " The block numbers when the last and current epoch have started, respectively `N-1` and",
              " `N`.",
              " NOTE: We track this is in order to annotate the block number when a given pool of",
              " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
              " slots, which may be skipped, the block numbers may not line up with the slot numbers."
            ]
          },
          {
            "name": "Lateness",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " How late the current block is compared to its parent.",
              "",
              " This entry is populated as part of block execution and is cleaned up",
              " on block finalization. Querying this storage entry outside of block",
              " execution context should always yield zero."
            ]
          },
          {
            "name": "EpochConfig",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "sp_consensus_babe:BabeEpochConfiguration",
              "PlainTypeValue": 482
            },
            "fallback": "0x00",
            "docs": [
              " The configuration for the current epoch. Should never be `None` as it is initialized in",
              " genesis."
            ]
          },
          {
            "name": "NextEpochConfig",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "sp_consensus_babe:BabeEpochConfiguration",
              "PlainTypeValue": 482
            },
            "fallback": "0x00",
            "docs": [
              " The configuration for the next epoch, `None` if the config will not change",
              " (you can fallback to `EpochConfig` instead in that case)."
            ]
          },
          {
            "name": "SkippedEpochs",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U64U32\u003e",
              "PlainTypeValue": 483
            },
            "fallback": "0x00",
            "docs": [
              " A list of the last 100 skipped epochs and the corresponding session index",
              " when the epoch was skipped.",
              "",
              " This is only used for validating equivocation proofs. An equivocation proof",
              " must contains a key-ownership proof for a given session, therefore we need a",
              " way to tie together sessions and epoch indices, i.e. we need to validate that",
              " a validator was the owner of a given key on a given session, and what the",
              " active epoch index was during that session."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0200",
            "name": "report_equivocation",
            "docs": [
              "See [`Pallet::report_equivocation`]."
            ],
            "args": [
              {
                "name": "equivocation_proof",
                "type": "sp_consensus_slots:EquivocationProof",
                "type_name": "Box\u003cEquivocationProof\u003cHeaderFor\u003e\u003e"
              },
              {
                "name": "key_owner_proof",
                "type": "sp_session:MembershipProof",
                "type_name": "KeyOwnerProof"
              }
            ]
          },
          {
            "lookup": "0201",
            "name": "report_equivocation_unsigned",
            "docs": [
              "See [`Pallet::report_equivocation_unsigned`]."
            ],
            "args": [
              {
                "name": "equivocation_proof",
                "type": "sp_consensus_slots:EquivocationProof",
                "type_name": "Box\u003cEquivocationProof\u003cHeaderFor\u003e\u003e"
              },
              {
                "name": "key_owner_proof",
                "type": "sp_session:MembershipProof",
                "type_name": "KeyOwnerProof"
              }
            ]
          },
          {
            "lookup": "0202",
            "name": "plan_config_change",
            "docs": [
              "See [`Pallet::plan_config_change`]."
            ],
            "args": [
              {
                "name": "config",
                "type": "sp_consensus_babe:digests:NextConfigDescriptor",
                "type_name": "NextConfigDescriptor"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 154
        },
        "constants": [
          {
            "name": "EpochDuration",
            "type": "U64",
            "type_value": 11,
            "constants_value": "c800000000000000",
            "docs": [
              " The amount of time, in slots, that each epoch should last.",
              " NOTE: Currently it is not possible to change the epoch duration after",
              " the chain has started. Attempting to do so will brick block production."
            ]
          },
          {
            "name": "ExpectedBlockTime",
            "type": "U64",
            "type_value": 11,
            "constants_value": "b80b000000000000",
            "docs": [
              " The expected average block time at which BABE should be creating",
              " blocks. Since BABE is probabilistic it is not trivial to figure out",
              " what the expected average block time should be based on the slot",
              " duration and the security parameter `c` (where `1 - c` represents",
              " the probability of a slot being empty)."
            ]
          },
          {
            "name": "MaxAuthorities",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " Max number of authorities allowed"
            ]
          },
          {
            "name": "MaxNominators",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00010000",
            "docs": [
              " The maximum number of nominators for each validator."
            ]
          }
        ],
        "errors": [
          {
            "name": "InvalidEquivocationProof",
            "doc": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "name": "InvalidKeyOwnershipProof",
            "doc": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "name": "DuplicateOffenceReport",
            "doc": [
              "A given equivocation report is valid but already previously reported."
            ]
          },
          {
            "name": "InvalidConfiguration",
            "doc": [
              "Submitted configuration is invalid."
            ]
          }
        ],
        "errors_value": {
          "type": 486
        },
        "index": 2
      },
      {
        "name": "Timestamp",
        "prefix": "Timestamp",
        "storage": [
          {
            "name": "Now",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 11
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Current time for the current block."
            ]
          },
          {
            "name": "DidUpdate",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 43
            },
            "fallback": "0x00",
            "docs": [
              " Did the timestamp get updated in this block?"
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0300",
            "name": "set",
            "docs": [
              "See [`Pallet::set`]."
            ],
            "args": [
              {
                "name": "now",
                "type": "compact\u003cU64\u003e",
                "type_name": "Moment"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 164
        },
        "constants": [
          {
            "name": "MinimumPeriod",
            "type": "U64",
            "type_value": 11,
            "constants_value": "dc05000000000000",
            "docs": [
              " The minimum period between blocks. Beware that this is different to the *expected*",
              " period that the block production apparatus provides. Your chosen consensus system will",
              " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
              " double this period on default settings."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 3
      },
      {
        "name": "Authorship",
        "prefix": "Authorship",
        "storage": [
          {
            "name": "Author",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " Author of current block."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 4
      },
      {
        "name": "Indices",
        "prefix": "Indices",
        "storage": [
          {
            "name": "Accounts",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Tuple:[U8; 32]U128Bool",
                "keys_id": 4,
                "value_id": 487
              }
            },
            "fallback": "0x00",
            "docs": [
              " The lookup from index to account."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0500",
            "name": "claim",
            "docs": [
              "See [`Pallet::claim`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "AccountIndex"
              }
            ]
          },
          {
            "lookup": "0501",
            "name": "transfer",
            "docs": [
              "See [`Pallet::transfer`]."
            ],
            "args": [
              {
                "name": "new",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "AccountIndex"
              }
            ]
          },
          {
            "lookup": "0502",
            "name": "free",
            "docs": [
              "See [`Pallet::free`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "AccountIndex"
              }
            ]
          },
          {
            "lookup": "0503",
            "name": "force_transfer",
            "docs": [
              "See [`Pallet::force_transfer`]."
            ],
            "args": [
              {
                "name": "new",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "AccountIndex"
              },
              {
                "name": "freeze",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "0504",
            "name": "freeze",
            "docs": [
              "See [`Pallet::freeze`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "AccountIndex"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 165
        },
        "events": [
          {
            "lookup": "0500",
            "name": "IndexAssigned",
            "docs": [
              "A account index was assigned."
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_name": [
              "who",
              "index"
            ],
            "args_type_name": [
              "AccountId",
              "AccountIndex"
            ]
          },
          {
            "lookup": "0501",
            "name": "IndexFreed",
            "docs": [
              "A account index has been freed up (unassigned)."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "AccountIndex"
            ]
          },
          {
            "lookup": "0502",
            "name": "IndexFrozen",
            "docs": [
              "A account index has been frozen to its current account ID."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "index",
              "who"
            ],
            "args_type_name": [
              "AccountIndex",
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 33
        },
        "constants": [
          {
            "name": "Deposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The deposit needed for reserving an index."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotAssigned",
            "doc": [
              "The index was not already assigned."
            ]
          },
          {
            "name": "NotOwner",
            "doc": [
              "The index is assigned to another account."
            ]
          },
          {
            "name": "InUse",
            "doc": [
              "The index was not available."
            ]
          },
          {
            "name": "NotTransfer",
            "doc": [
              "The source and destination accounts are identical."
            ]
          },
          {
            "name": "Permanent",
            "doc": [
              "The index is permanent and may not be freed/changed."
            ]
          }
        ],
        "errors_value": {
          "type": 488
        },
        "index": 5
      },
      {
        "name": "Balances",
        "prefix": "Balances",
        "storage": [
          {
            "name": "TotalIssuance",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The total units issued in the system."
            ]
          },
          {
            "name": "InactiveIssuance",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The total units of outstanding deactivated balance in the system."
            ]
          },
          {
            "name": "Account",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_balances:types:AccountData",
                "keys_id": 0,
                "value_id": 5
              }
            },
            "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
            "docs": [
              " The Balances pallet example of storing the balance of an account.",
              "",
              " # Example",
              "",
              " ```nocompile",
              "  impl pallet_balances::Config for Runtime {",
              "    type AccountStore = StorageMapShim\u003cSelf::Account\u003cRuntime\u003e, frame_system::Provider\u003cRuntime\u003e, AccountId, Self::AccountData\u003cBalance\u003e\u003e",
              "  }",
              " ```",
              "",
              " You can also store the balance of an account in the `System` pallet.",
              "",
              " # Example",
              "",
              " ```nocompile",
              "  impl pallet_balances::Config for Runtime {",
              "   type AccountStore = System",
              "  }",
              " ```",
              "",
              " But this comes with tradeoffs, storing account balances in the system pallet stores",
              " `frame_system` data alongside the account data contrary to storing account balances in the",
              " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
              " NOTE: This is only used in the case that this pallet is used to store balances."
            ]
          },
          {
            "name": "Locks",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cpallet_balances:types:BalanceLock\u003e",
                "keys_id": 0,
                "value_id": 489
              }
            },
            "fallback": "0x00",
            "docs": [
              " Any liquidity locks on some account balances.",
              " NOTE: Should only be accessed when setting, changing and freeing a lock."
            ]
          },
          {
            "name": "Reserves",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cpallet_balances:types:ReserveData\u003e",
                "keys_id": 0,
                "value_id": 493
              }
            },
            "fallback": "0x00",
            "docs": [
              " Named reserves on some account balances."
            ]
          },
          {
            "name": "Holds",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cpallet_balances:types:IdAmount@497\u003e",
                "keys_id": 0,
                "value_id": 496
              }
            },
            "fallback": "0x00",
            "docs": [
              " Holds on account balances."
            ]
          },
          {
            "name": "Freezes",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cpallet_balances:types:IdAmount@505\u003e",
                "keys_id": 0,
                "value_id": 504
              }
            },
            "fallback": "0x00",
            "docs": [
              " Freeze locks on account balances."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0600",
            "name": "transfer_allow_death",
            "docs": [
              "See [`Pallet::transfer_allow_death`]."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0601",
            "name": "set_balance_deprecated",
            "docs": [
              "See [`Pallet::set_balance_deprecated`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "new_free",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              },
              {
                "name": "old_reserved",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0602",
            "name": "force_transfer",
            "docs": [
              "See [`Pallet::force_transfer`]."
            ],
            "args": [
              {
                "name": "source",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0603",
            "name": "transfer_keep_alive",
            "docs": [
              "See [`Pallet::transfer_keep_alive`]."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0604",
            "name": "transfer_all",
            "docs": [
              "See [`Pallet::transfer_all`]."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "keep_alive",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "0605",
            "name": "force_unreserve",
            "docs": [
              "See [`Pallet::force_unreserve`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "U128",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0606",
            "name": "upgrade_accounts",
            "docs": [
              "See [`Pallet::upgrade_accounts`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "0607",
            "name": "transfer",
            "docs": [
              "See [`Pallet::transfer`]."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "0608",
            "name": "force_set_balance",
            "docs": [
              "See [`Pallet::force_set_balance`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "new_free",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 168
        },
        "events": [
          {
            "lookup": "0600",
            "name": "Endowed",
            "docs": [
              "An account was created with some free balance."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "account",
              "free_balance"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0601",
            "name": "DustLost",
            "docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "account",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0602",
            "name": "Transfer",
            "docs": [
              "Transfer succeeded."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "from",
              "to",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0603",
            "name": "BalanceSet",
            "docs": [
              "A balance was set by root."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "free"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0604",
            "name": "Reserved",
            "docs": [
              "Some balance was reserved (moved from free to reserved)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0605",
            "name": "Unreserved",
            "docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0606",
            "name": "ReserveRepatriated",
            "docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128",
              "frame_support:traits:tokens:misc:BalanceStatus"
            ],
            "args_name": [
              "from",
              "to",
              "amount",
              "destination_status"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "Balance",
              "Status"
            ]
          },
          {
            "lookup": "0607",
            "name": "Deposit",
            "docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0608",
            "name": "Withdraw",
            "docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0609",
            "name": "Slashed",
            "docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "060a",
            "name": "Minted",
            "docs": [
              "Some amount was minted into an account."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "060b",
            "name": "Burned",
            "docs": [
              "Some amount was burned from an account."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "060c",
            "name": "Suspended",
            "docs": [
              "Some amount was suspended from an account (it can be restored later)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "060d",
            "name": "Restored",
            "docs": [
              "Some amount was restored into an account."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "060e",
            "name": "Upgraded",
            "docs": [
              "An account was upgraded."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "who"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "060f",
            "name": "Issued",
            "docs": [
              "Total issuance was increased by `amount`, creating a credit to be balanced."
            ],
            "args": [
              "U128"
            ],
            "args_name": [
              "amount"
            ],
            "args_type_name": [
              "Balance"
            ]
          },
          {
            "lookup": "0610",
            "name": "Rescinded",
            "docs": [
              "Total issuance was decreased by `amount`, creating a debt to be balanced."
            ],
            "args": [
              "U128"
            ],
            "args_name": [
              "amount"
            ],
            "args_type_name": [
              "Balance"
            ]
          },
          {
            "lookup": "0611",
            "name": "Locked",
            "docs": [
              "Some balance was locked."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0612",
            "name": "Unlocked",
            "docs": [
              "Some balance was unlocked."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0613",
            "name": "Frozen",
            "docs": [
              "Some balance was frozen."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0614",
            "name": "Thawed",
            "docs": [
              "Some balance was thawed."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "Balance"
            ]
          }
        ],
        "events_value": {
          "type": 34
        },
        "constants": [
          {
            "name": "ExistentialDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "name": "MaxLocks",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "name": "MaxReserves",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          },
          {
            "name": "MaxHolds",
            "type": "U32",
            "type_value": 4,
            "constants_value": "02000000",
            "docs": [
              " The maximum number of holds that can exist on an account at any time."
            ]
          },
          {
            "name": "MaxFreezes",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00000000",
            "docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "errors": [
          {
            "name": "VestingBalance",
            "doc": [
              "Vesting balance too high to send value."
            ]
          },
          {
            "name": "LiquidityRestrictions",
            "doc": [
              "Account liquidity restrictions prevent withdrawal."
            ]
          },
          {
            "name": "InsufficientBalance",
            "doc": [
              "Balance too low to send value."
            ]
          },
          {
            "name": "ExistentialDeposit",
            "doc": [
              "Value too low to create account due to existential deposit."
            ]
          },
          {
            "name": "Expendability",
            "doc": [
              "Transfer/payment would kill account."
            ]
          },
          {
            "name": "ExistingVestingSchedule",
            "doc": [
              "A vesting schedule already exists for this account."
            ]
          },
          {
            "name": "DeadAccount",
            "doc": [
              "Beneficiary account must pre-exist."
            ]
          },
          {
            "name": "TooManyReserves",
            "doc": [
              "Number of named reserves exceed `MaxReserves`."
            ]
          },
          {
            "name": "TooManyHolds",
            "doc": [
              "Number of holds exceed `MaxHolds`."
            ]
          },
          {
            "name": "TooManyFreezes",
            "doc": [
              "Number of freezes exceed `MaxFreezes`."
            ]
          }
        ],
        "errors_value": {
          "type": 507
        },
        "index": 6
      },
      {
        "name": "TransactionPayment",
        "prefix": "TransactionPayment",
        "storage": [
          {
            "name": "NextFeeMultiplier",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 71
            },
            "fallback": "0x000064a7b3b6e00d0000000000000000",
            "docs": null
          },
          {
            "name": "StorageVersion",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_transaction_payment:Releases",
              "PlainTypeValue": 508
            },
            "fallback": "0x00",
            "docs": null
          }
        ],
        "events": [
          {
            "lookup": "0700",
            "name": "TransactionFeePaid",
            "docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U128"
            ],
            "args_name": [
              "who",
              "actual_fee",
              "tip"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 36
        },
        "constants": [
          {
            "name": "OperationalFeeMultiplier",
            "type": "U8",
            "type_value": 2,
            "constants_value": "05",
            "docs": [
              " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 7
      },
      {
        "name": "AssetTxPayment",
        "prefix": "",
        "storage": null,
        "events": [
          {
            "lookup": "0800",
            "name": "AssetTxFeePaid",
            "docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who` in an asset `asset_id`."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U128",
              "option\u003cU32\u003e"
            ],
            "args_name": [
              "who",
              "actual_fee",
              "tip",
              "asset_id"
            ],
            "args_type_name": [
              "AccountId",
              "AssetBalanceOf",
              "AssetBalanceOf",
              "Option\u003cChargeAssetIdOf\u003e"
            ]
          }
        ],
        "events_value": {
          "type": 37
        },
        "errors": null,
        "errors_value": null,
        "index": 8
      },
      {
        "name": "AssetConversionTxPayment",
        "prefix": "",
        "storage": null,
        "events": [
          {
            "lookup": "0900",
            "name": "AssetTxFeePaid",
            "docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who` in an asset `asset_id`."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U128",
              "U32"
            ],
            "args_name": [
              "who",
              "actual_fee",
              "tip",
              "asset_id"
            ],
            "args_type_name": [
              "AccountId",
              "AssetBalanceOf",
              "BalanceOf",
              "ChargeAssetIdOf"
            ]
          },
          {
            "lookup": "0901",
            "name": "AssetRefundFailed",
            "docs": [
              "A swap of the refund in native currency back to asset failed."
            ],
            "args": [
              "U128"
            ],
            "args_name": [
              "native_amount_kept"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 39
        },
        "errors": null,
        "errors_value": null,
        "index": 9
      },
      {
        "name": "ElectionProviderMultiPhase",
        "prefix": "ElectionProviderMultiPhase",
        "storage": [
          {
            "name": "Round",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x01000000",
            "docs": [
              " Internal counter for the number of rounds.",
              "",
              " This is useful for de-duplication of transactions submitted to the pool, and general",
              " diagnostics of the pallet.",
              "",
              " This is merely incremented once per every time that an upstream `elect` is called."
            ]
          },
          {
            "name": "CurrentPhase",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_election_provider_multi_phase:Phase",
              "PlainTypeValue": 45
            },
            "fallback": "0x00",
            "docs": [
              " Current phase."
            ]
          },
          {
            "name": "QueuedSolution",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_election_provider_multi_phase:ReadySolution",
              "PlainTypeValue": 509
            },
            "fallback": "0x00",
            "docs": [
              " Current best solution, signed or unsigned, queued to be returned upon `elect`.",
              "",
              " Always sorted by score."
            ]
          },
          {
            "name": "Snapshot",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_election_provider_multi_phase:RoundSnapshot",
              "PlainTypeValue": 511
            },
            "fallback": "0x00",
            "docs": [
              " Snapshot data of the round.",
              "",
              " This is created at the beginning of the signed phase and cleared upon calling `elect`."
            ]
          },
          {
            "name": "DesiredTargets",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Desired number of targets to elect for this round.",
              "",
              " Only exists when [`Snapshot`] is present."
            ]
          },
          {
            "name": "SnapshotMetadata",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_election_provider_multi_phase:SolutionOrSnapshotSize",
              "PlainTypeValue": 222
            },
            "fallback": "0x00",
            "docs": [
              " The metadata of the [`RoundSnapshot`]",
              "",
              " Only exists when [`Snapshot`] is present."
            ]
          },
          {
            "name": "SignedSubmissionNextIndex",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The next index to be assigned to an incoming signed submission.",
              "",
              " Every accepted submission is assigned a unique index; that index is bound to that particular",
              " submission for the duration of the election. On election finalization, the next index is",
              " reset to 0.",
              "",
              " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
              " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
              " because iteration is slow. Instead, we store the value here."
            ]
          },
          {
            "name": "SignedSubmissionIndices",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:sp_npos_elections:ElectionScoreU32U32\u003e",
              "PlainTypeValue": 515
            },
            "fallback": "0x00",
            "docs": [
              " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
              " value in `SignedSubmissions`.",
              "",
              " We never need to process more than a single signed submission at a time. Signed submissions",
              " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
              " them one at a time instead of reading and decoding all of them at once."
            ]
          },
          {
            "name": "SignedSubmissionsMap",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_election_provider_multi_phase:signed:SignedSubmission",
                "keys_id": 4,
                "value_id": 518
              }
            },
            "fallback": "0x00",
            "docs": [
              " Unchecked, signed solutions.",
              "",
              " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
              " allowing us to keep only a single one in memory at a time.",
              "",
              " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
              " affect; we shouldn't need a cryptographically secure hasher."
            ]
          },
          {
            "name": "MinimumUntrustedScore",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "sp_npos_elections:ElectionScore",
              "PlainTypeValue": 44
            },
            "fallback": "0x00",
            "docs": [
              " The minimum score that each 'untrusted' solution must attain in order to be considered",
              " feasible.",
              "",
              " Can be set via `set_minimum_untrusted_score`."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0a00",
            "name": "submit_unsigned",
            "docs": [
              "See [`Pallet::submit_unsigned`]."
            ],
            "args": [
              {
                "name": "raw_solution",
                "type": "pallet_election_provider_multi_phase:RawSolution",
                "type_name": "Box\u003cRawSolution\u003cSolutionOf\u003cMinerConfig\u003e\u003e\u003e"
              },
              {
                "name": "witness",
                "type": "pallet_election_provider_multi_phase:SolutionOrSnapshotSize",
                "type_name": "SolutionOrSnapshotSize"
              }
            ]
          },
          {
            "lookup": "0a01",
            "name": "set_minimum_untrusted_score",
            "docs": [
              "See [`Pallet::set_minimum_untrusted_score`]."
            ],
            "args": [
              {
                "name": "maybe_next_score",
                "type": "option\u003csp_npos_elections:ElectionScore\u003e",
                "type_name": "Option\u003cElectionScore\u003e"
              }
            ]
          },
          {
            "lookup": "0a02",
            "name": "set_emergency_election_result",
            "docs": [
              "See [`Pallet::set_emergency_election_result`]."
            ],
            "args": [
              {
                "name": "supports",
                "type": "Vec\u003cTuple:[U8; 32]sp_npos_elections:Support\u003e",
                "type_name": "Supports\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "0a03",
            "name": "submit",
            "docs": [
              "See [`Pallet::submit`]."
            ],
            "args": [
              {
                "name": "raw_solution",
                "type": "pallet_election_provider_multi_phase:RawSolution",
                "type_name": "Box\u003cRawSolution\u003cSolutionOf\u003cMinerConfig\u003e\u003e\u003e"
              }
            ]
          },
          {
            "lookup": "0a04",
            "name": "governance_fallback",
            "docs": [
              "See [`Pallet::governance_fallback`]."
            ],
            "args": [
              {
                "name": "maybe_max_voters",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cu32\u003e"
              },
              {
                "name": "maybe_max_targets",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cu32\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 169
        },
        "events": [
          {
            "lookup": "0a00",
            "name": "SolutionStored",
            "docs": [
              "A solution was stored with the given compute.",
              "",
              "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
              "the stored solution was submited in the signed phase by a miner with the `AccountId`.",
              "Otherwise, the solution was stored either during the unsigned phase or by",
              "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
              "room for this one."
            ],
            "args": [
              "pallet_election_provider_multi_phase:ElectionCompute",
              "option\u003c[U8; 32]\u003e",
              "Bool"
            ],
            "args_name": [
              "compute",
              "origin",
              "prev_ejected"
            ],
            "args_type_name": [
              "ElectionCompute",
              "Option\u003cAccountId\u003e",
              "bool"
            ]
          },
          {
            "lookup": "0a01",
            "name": "ElectionFinalized",
            "docs": [
              "The election has been finalized, with the given computation and score."
            ],
            "args": [
              "pallet_election_provider_multi_phase:ElectionCompute",
              "sp_npos_elections:ElectionScore"
            ],
            "args_name": [
              "compute",
              "score"
            ],
            "args_type_name": [
              "ElectionCompute",
              "ElectionScore"
            ]
          },
          {
            "lookup": "0a02",
            "name": "ElectionFailed",
            "docs": [
              "An election failed.",
              "",
              "Not much can be said about which computes failed in the process."
            ],
            "args": null
          },
          {
            "lookup": "0a03",
            "name": "Rewarded",
            "docs": [
              "An account has been rewarded for their signed submission being finalized."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "account",
              "value"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0a04",
            "name": "Slashed",
            "docs": [
              "An account has been slashed for submitting an invalid signed submission."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "account",
              "value"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0a05",
            "name": "PhaseTransitioned",
            "docs": [
              "There was a phase transition in a given round."
            ],
            "args": [
              "pallet_election_provider_multi_phase:Phase",
              "pallet_election_provider_multi_phase:Phase",
              "U32"
            ],
            "args_name": [
              "from",
              "to",
              "round"
            ],
            "args_type_name": [
              "Phase\u003cBlockNumberFor\u003e",
              "Phase\u003cBlockNumberFor\u003e",
              "u32"
            ]
          }
        ],
        "events_value": {
          "type": 40
        },
        "constants": [
          {
            "name": "UnsignedPhase",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " Duration of the unsigned phase."
            ]
          },
          {
            "name": "SignedPhase",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " Duration of the signed phase."
            ]
          },
          {
            "name": "BetterSignedThreshold",
            "type": "U32",
            "type_value": 48,
            "constants_value": "00000000",
            "docs": [
              " The minimum amount of improvement to the solution score that defines a solution as",
              " \"better\" in the Signed phase."
            ]
          },
          {
            "name": "BetterUnsignedThreshold",
            "type": "U32",
            "type_value": 48,
            "constants_value": "a0860100",
            "docs": [
              " The minimum amount of improvement to the solution score that defines a solution as",
              " \"better\" in the Unsigned phase."
            ]
          },
          {
            "name": "OffchainRepeat",
            "type": "U32",
            "type_value": 4,
            "constants_value": "05000000",
            "docs": [
              " The repeat threshold of the offchain worker.",
              "",
              " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
              " to submit the worker's solution."
            ]
          },
          {
            "name": "MinerTxPriority",
            "type": "U64",
            "type_value": 11,
            "constants_value": "feffffffffffff7f",
            "docs": [
              " The priority of the unsigned transaction submitted in the unsigned-phase"
            ]
          },
          {
            "name": "SignedMaxSubmissions",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " Maximum number of signed submissions that can be queued.",
              "",
              " It is best to avoid adjusting this during an election, as it impacts downstream data",
              " structures. In particular, `SignedSubmissionIndices\u003cT\u003e` is bounded on this value. If you",
              " update this value during an election, you _must_ ensure that",
              " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
              " attempts to submit new solutions may cause a runtime panic."
            ]
          },
          {
            "name": "SignedMaxWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "0b1089578f2e011366666666666666a6",
            "docs": [
              " Maximum weight of a signed solution.",
              "",
              " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
              " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
              " this value."
            ]
          },
          {
            "name": "SignedMaxRefunds",
            "type": "U32",
            "type_value": 4,
            "constants_value": "03000000",
            "docs": [
              " The maximum amount of unchecked solutions to refund the call fee for."
            ]
          },
          {
            "name": "SignedRewardBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " Base reward for a signed solution"
            ]
          },
          {
            "name": "SignedDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " Base deposit for a signed solution."
            ]
          },
          {
            "name": "SignedDepositByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0010a5d4e80000000000000000000000",
            "docs": [
              " Per-byte deposit for a signed solution."
            ]
          },
          {
            "name": "SignedDepositWeight",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00000000000000000000000000000000",
            "docs": [
              " Per-weight deposit for a signed solution."
            ]
          },
          {
            "name": "MaxWinners",
            "type": "U32",
            "type_value": 4,
            "constants_value": "e8030000",
            "docs": [
              " The maximum number of winners that can be elected by this `ElectionProvider`",
              " implementation.",
              "",
              " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
            ]
          },
          {
            "name": "MinerMaxLength",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00003600",
            "docs": null
          },
          {
            "name": "MinerMaxWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "0b1089578f2e011366666666666666a6",
            "docs": null
          },
          {
            "name": "MinerMaxVotesPerVoter",
            "type": "U32",
            "type_value": 4,
            "constants_value": "10000000",
            "docs": null
          },
          {
            "name": "MinerMaxWinners",
            "type": "U32",
            "type_value": 4,
            "constants_value": "e8030000",
            "docs": null
          }
        ],
        "errors": [
          {
            "name": "PreDispatchEarlySubmission",
            "doc": [
              "Submission was too early."
            ]
          },
          {
            "name": "PreDispatchWrongWinnerCount",
            "doc": [
              "Wrong number of winners presented."
            ]
          },
          {
            "name": "PreDispatchWeakSubmission",
            "doc": [
              "Submission was too weak, score-wise."
            ]
          },
          {
            "name": "SignedQueueFull",
            "doc": [
              "The queue was full, and the solution was not better than any of the existing ones."
            ]
          },
          {
            "name": "SignedCannotPayDeposit",
            "doc": [
              "The origin failed to pay the deposit."
            ]
          },
          {
            "name": "SignedInvalidWitness",
            "doc": [
              "Witness data to dispatchable is invalid."
            ]
          },
          {
            "name": "SignedTooMuchWeight",
            "doc": [
              "The signed submission consumes too much weight"
            ]
          },
          {
            "name": "OcwCallWrongEra",
            "doc": [
              "OCW submitted solution for wrong round"
            ]
          },
          {
            "name": "MissingSnapshotMetadata",
            "doc": [
              "Snapshot metadata should exist but didn't."
            ]
          },
          {
            "name": "InvalidSubmissionIndex",
            "doc": [
              "`Self::insert_submission` returned an invalid index."
            ]
          },
          {
            "name": "CallNotAllowed",
            "doc": [
              "The call is not allowed at this point."
            ]
          },
          {
            "name": "FallbackFailed",
            "doc": [
              "The fallback failed"
            ]
          },
          {
            "name": "BoundNotMet",
            "doc": [
              "Some bound not met"
            ]
          },
          {
            "name": "TooManyWinners",
            "doc": [
              "Submitted solution has too many winners"
            ]
          }
        ],
        "errors_value": {
          "type": 519
        },
        "index": 10
      },
      {
        "name": "Staking",
        "prefix": "Staking",
        "storage": [
          {
            "name": "ValidatorCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The ideal number of active validators."
            ]
          },
          {
            "name": "MinimumValidatorCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Minimum number of staking participants before emergency conditions are imposed."
            ]
          },
          {
            "name": "Invulnerables",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 89
            },
            "fallback": "0x00",
            "docs": [
              " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
              " easy to initialize and the performance hit is minimal (we expect no more than four",
              " invulnerables) and restricted to testnets."
            ]
          },
          {
            "name": "Bonded",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "[U8; 32]",
                "keys_id": 0,
                "value_id": 0
              }
            },
            "fallback": "0x00",
            "docs": [
              " Map from all locked \"stash\" accounts to the controller account.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "MinNominatorBond",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The minimum active bond to become and maintain the role of a nominator."
            ]
          },
          {
            "name": "MinValidatorBond",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The minimum active bond to become and maintain the role of a validator."
            ]
          },
          {
            "name": "MinimumActiveStake",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The minimum active nominator stake of the last successful election."
            ]
          },
          {
            "name": "MinCommission",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 48
            },
            "fallback": "0x00000000",
            "docs": [
              " The minimum amount of commission that validators can set.",
              "",
              " If set to `0`, no limit exists."
            ]
          },
          {
            "name": "Ledger",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_staking:StakingLedger",
                "keys_id": 0,
                "value_id": 520
              }
            },
            "fallback": "0x00",
            "docs": [
              " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
            ]
          },
          {
            "name": "Payee",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_staking:RewardDestination",
                "keys_id": 0,
                "value_id": 228
              }
            },
            "fallback": "0x00",
            "docs": [
              " Where the reward payment should be made. Keyed by stash.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "Validators",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_staking:ValidatorPrefs",
                "keys_id": 0,
                "value_id": 49
              }
            },
            "fallback": "0x0000",
            "docs": [
              " The map from (wannabe) validator stash key to the preferences of that validator.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "CounterForValidators",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "MaxValidatorsCount",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " The maximum validator count before we stop allowing new validators to join.",
              "",
              " When this value is not set, no limits are enforced."
            ]
          },
          {
            "name": "Nominators",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_staking:Nominations",
                "keys_id": 0,
                "value_id": 525
              }
            },
            "fallback": "0x00",
            "docs": [
              " The map from nominator stash key to their nomination preferences, namely the validators that",
              " they wish to support.",
              "",
              " Note that the keys of this storage map might become non-decodable in case the",
              " account's [`NominationsQuota::MaxNominations`] configuration is decreased.",
              " In this rare case, these nominators",
              " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
              " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
              " nominators will effectively not-exist, until they re-submit their preferences such that it",
              " is within the bounds of the newly set `Config::MaxNominations`.",
              "",
              " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
              " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
              " number of keys that exist.",
              "",
              " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
              " [`Call::chill_other`] dispatchable by anyone.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "CounterForNominators",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "MaxNominatorsCount",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " The maximum nominator count before we stop allowing new validators to join.",
              "",
              " When this value is not set, no limits are enforced."
            ]
          },
          {
            "name": "CurrentEra",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " The current era index.",
              "",
              " This is the latest planned era, depending on how the Session pallet queues the validator",
              " set, it might be active or not."
            ]
          },
          {
            "name": "ActiveEra",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_staking:ActiveEraInfo",
              "PlainTypeValue": 526
            },
            "fallback": "0x00",
            "docs": [
              " The active era information, it holds index and start.",
              "",
              " The active era is the era being currently rewarded. Validator set of this era must be",
              " equal to [`SessionInterface::validators`]."
            ]
          },
          {
            "name": "ErasStartSessionIndex",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
              "",
              " Note: This tracks the starting session (i.e. session index when era start being active)",
              " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
            ]
          },
          {
            "name": "ErasStakers",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_staking:Exposure",
                "keys_id": 528,
                "value_id": 81
              }
            },
            "fallback": "0x000000",
            "docs": [
              " Exposure of validator at era.",
              "",
              " This is keyed first by the era index to allow bulk deletion and then the stash account.",
              "",
              " Is it removed after `HISTORY_DEPTH` eras.",
              " If stakers hasn't been set or has been removed then empty exposure is returned."
            ]
          },
          {
            "name": "ErasStakersClipped",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_staking:Exposure",
                "keys_id": 528,
                "value_id": 81
              }
            },
            "fallback": "0x000000",
            "docs": [
              " Clipped Exposure of validator at era.",
              "",
              " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
              " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
              " (Note: the field `total` and `own` of the exposure remains unchanged).",
              " This is used to limit the i/o cost for the nominator payout.",
              "",
              " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
              "",
              " Is it removed after `HISTORY_DEPTH` eras.",
              " If stakers hasn't been set or has been removed then empty exposure is returned."
            ]
          },
          {
            "name": "ErasValidatorPrefs",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_staking:ValidatorPrefs",
                "keys_id": 528,
                "value_id": 49
              }
            },
            "fallback": "0x0000",
            "docs": [
              " Similar to `ErasStakers`, this holds the preferences of validators.",
              "",
              " This is keyed first by the era index to allow bulk deletion and then the stash account.",
              "",
              " Is it removed after `HISTORY_DEPTH` eras."
            ]
          },
          {
            "name": "ErasValidatorReward",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U128",
                "keys_id": 4,
                "value_id": 6
              }
            },
            "fallback": "0x00",
            "docs": [
              " The total validator era payout for the last `HISTORY_DEPTH` eras.",
              "",
              " Eras that haven't finished yet or has been removed doesn't have reward."
            ]
          },
          {
            "name": "ErasRewardPoints",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_staking:EraRewardPoints",
                "keys_id": 4,
                "value_id": 529
              }
            },
            "fallback": "0x0000000000",
            "docs": [
              " Rewards for the last `HISTORY_DEPTH` eras.",
              " If reward hasn't been set or has been removed then 0 reward is returned."
            ]
          },
          {
            "name": "ErasTotalStake",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U128",
                "keys_id": 4,
                "value_id": 6
              }
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The total amount staked for the last `HISTORY_DEPTH` eras.",
              " If total hasn't been set or has been removed then 0 stake is returned."
            ]
          },
          {
            "name": "ForceEra",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_staking:Forcing",
              "PlainTypeValue": 51
            },
            "fallback": "0x00",
            "docs": [
              " Mode of era forcing."
            ]
          },
          {
            "name": "SlashRewardFraction",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 48
            },
            "fallback": "0x00000000",
            "docs": [
              " The percentage of the slash that is distributed to reporters.",
              "",
              " The rest of the slashed value is handled by the `Slash`."
            ]
          },
          {
            "name": "CanceledSlashPayout",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The amount of currency given to reporters of a slash event which was",
              " canceled by extraordinary circumstances (e.g. governance)."
            ]
          },
          {
            "name": "UnappliedSlashes",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cpallet_staking:UnappliedSlash\u003e",
                "keys_id": 4,
                "value_id": 533
              }
            },
            "fallback": "0x00",
            "docs": [
              " All unapplied slashes that are queued for later."
            ]
          },
          {
            "name": "BondedEras",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U32U32\u003e",
              "PlainTypeValue": 456
            },
            "fallback": "0x00",
            "docs": [
              " A mapping from still-bonded eras to the first session index of that era.",
              "",
              " Must contains information for eras for the range:",
              " `[active_era - bounding_duration; active_era]`"
            ]
          },
          {
            "name": "ValidatorSlashInEra",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "Tuple:U32U128",
                "keys_id": 528,
                "value_id": 535
              }
            },
            "fallback": "0x00",
            "docs": [
              " All slashing events on validators, mapped by era to the highest slash proportion",
              " and slash value of the era."
            ]
          },
          {
            "name": "NominatorSlashInEra",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "U128",
                "keys_id": 528,
                "value_id": 6
              }
            },
            "fallback": "0x00",
            "docs": [
              " All slashing events on nominators, mapped by era to the highest slash value of the era."
            ]
          },
          {
            "name": "SlashingSpans",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_staking:slashing:SlashingSpans",
                "keys_id": 0,
                "value_id": 536
              }
            },
            "fallback": "0x00",
            "docs": [
              " Slashing spans for stash accounts."
            ]
          },
          {
            "name": "SpanSlash",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U32"
                ],
                "value": "pallet_staking:slashing:SpanRecord",
                "keys_id": 532,
                "value_id": 537
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Records information about the maximum slash of a stash within a slashing span,",
              " as well as how much reward has been paid out."
            ]
          },
          {
            "name": "CurrentPlannedSession",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The last planned session scheduled by the session pallet.",
              "",
              " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
            ]
          },
          {
            "name": "OffendingValidators",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U32Bool\u003e",
              "PlainTypeValue": 538
            },
            "fallback": "0x00",
            "docs": [
              " Indices of validators that have offended in the active era and whether they are currently",
              " disabled.",
              "",
              " This value should be a superset of disabled validators since not all offences lead to the",
              " validator being disabled (if there was no slash). This is needed to track the percentage of",
              " validators that have offended in the current era, ensuring a new era is forced if",
              " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
              " whether a given validator has previously offended using binary search. It gets cleared when",
              " the era ends."
            ]
          },
          {
            "name": "ChillThreshold",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U8",
              "PlainTypeValue": 230
            },
            "fallback": "0x00",
            "docs": [
              " The threshold for when users can start calling `chill_other` for other validators /",
              " nominators. The threshold is compared to the actual number of validators / nominators",
              " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0b00",
            "name": "bond",
            "docs": [
              "See [`Pallet::bond`]."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "payee",
                "type": "pallet_staking:RewardDestination",
                "type_name": "RewardDestination\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "0b01",
            "name": "bond_extra",
            "docs": [
              "See [`Pallet::bond_extra`]."
            ],
            "args": [
              {
                "name": "max_additional",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "0b02",
            "name": "unbond",
            "docs": [
              "See [`Pallet::unbond`]."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "0b03",
            "name": "withdraw_unbonded",
            "docs": [
              "See [`Pallet::withdraw_unbonded`]."
            ],
            "args": [
              {
                "name": "num_slashing_spans",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0b04",
            "name": "validate",
            "docs": [
              "See [`Pallet::validate`]."
            ],
            "args": [
              {
                "name": "prefs",
                "type": "pallet_staking:ValidatorPrefs",
                "type_name": "ValidatorPrefs"
              }
            ]
          },
          {
            "lookup": "0b05",
            "name": "nominate",
            "docs": [
              "See [`Pallet::nominate`]."
            ],
            "args": [
              {
                "name": "targets",
                "type": "Vec\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Vec\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "0b06",
            "name": "chill",
            "docs": [
              "See [`Pallet::chill`]."
            ],
            "args": null
          },
          {
            "lookup": "0b07",
            "name": "set_payee",
            "docs": [
              "See [`Pallet::set_payee`]."
            ],
            "args": [
              {
                "name": "payee",
                "type": "pallet_staking:RewardDestination",
                "type_name": "RewardDestination\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "0b08",
            "name": "set_controller",
            "docs": [
              "See [`Pallet::set_controller`]."
            ],
            "args": null
          },
          {
            "lookup": "0b09",
            "name": "set_validator_count",
            "docs": [
              "See [`Pallet::set_validator_count`]."
            ],
            "args": [
              {
                "name": "new",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0b0a",
            "name": "increase_validator_count",
            "docs": [
              "See [`Pallet::increase_validator_count`]."
            ],
            "args": [
              {
                "name": "additional",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0b0b",
            "name": "scale_validator_count",
            "docs": [
              "See [`Pallet::scale_validator_count`]."
            ],
            "args": [
              {
                "name": "factor",
                "type": "U8",
                "type_name": "Percent"
              }
            ]
          },
          {
            "lookup": "0b0c",
            "name": "force_no_eras",
            "docs": [
              "See [`Pallet::force_no_eras`]."
            ],
            "args": null
          },
          {
            "lookup": "0b0d",
            "name": "force_new_era",
            "docs": [
              "See [`Pallet::force_new_era`]."
            ],
            "args": null
          },
          {
            "lookup": "0b0e",
            "name": "set_invulnerables",
            "docs": [
              "See [`Pallet::set_invulnerables`]."
            ],
            "args": [
              {
                "name": "invulnerables",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "0b0f",
            "name": "force_unstake",
            "docs": [
              "See [`Pallet::force_unstake`]."
            ],
            "args": [
              {
                "name": "stash",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "num_slashing_spans",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0b10",
            "name": "force_new_era_always",
            "docs": [
              "See [`Pallet::force_new_era_always`]."
            ],
            "args": null
          },
          {
            "lookup": "0b11",
            "name": "cancel_deferred_slash",
            "docs": [
              "See [`Pallet::cancel_deferred_slash`]."
            ],
            "args": [
              {
                "name": "era",
                "type": "U32",
                "type_name": "EraIndex"
              },
              {
                "name": "slash_indices",
                "type": "Vec\u003cU32\u003e",
                "type_name": "Vec\u003cu32\u003e"
              }
            ]
          },
          {
            "lookup": "0b12",
            "name": "payout_stakers",
            "docs": [
              "See [`Pallet::payout_stakers`]."
            ],
            "args": [
              {
                "name": "validator_stash",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "era",
                "type": "U32",
                "type_name": "EraIndex"
              }
            ]
          },
          {
            "lookup": "0b13",
            "name": "rebond",
            "docs": [
              "See [`Pallet::rebond`]."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "0b14",
            "name": "reap_stash",
            "docs": [
              "See [`Pallet::reap_stash`]."
            ],
            "args": [
              {
                "name": "stash",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "num_slashing_spans",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0b15",
            "name": "kick",
            "docs": [
              "See [`Pallet::kick`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "Vec\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Vec\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "0b16",
            "name": "set_staking_configs",
            "docs": [
              "See [`Pallet::set_staking_configs`]."
            ],
            "args": [
              {
                "name": "min_nominator_bond",
                "type": "pallet_staking:pallet:pallet:ConfigOp@231",
                "type_name": "ConfigOp\u003cBalanceOf\u003e"
              },
              {
                "name": "min_validator_bond",
                "type": "pallet_staking:pallet:pallet:ConfigOp@231",
                "type_name": "ConfigOp\u003cBalanceOf\u003e"
              },
              {
                "name": "max_nominator_count",
                "type": "pallet_staking:pallet:pallet:ConfigOp@232",
                "type_name": "ConfigOp\u003cu32\u003e"
              },
              {
                "name": "max_validator_count",
                "type": "pallet_staking:pallet:pallet:ConfigOp@232",
                "type_name": "ConfigOp\u003cu32\u003e"
              },
              {
                "name": "chill_threshold",
                "type": "pallet_staking:pallet:pallet:ConfigOp@233",
                "type_name": "ConfigOp\u003cPercent\u003e"
              },
              {
                "name": "min_commission",
                "type": "pallet_staking:pallet:pallet:ConfigOp@234",
                "type_name": "ConfigOp\u003cPerbill\u003e"
              }
            ]
          },
          {
            "lookup": "0b17",
            "name": "chill_other",
            "docs": [
              "See [`Pallet::chill_other`]."
            ],
            "args": [
              {
                "name": "controller",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "0b18",
            "name": "force_apply_min_commission",
            "docs": [
              "See [`Pallet::force_apply_min_commission`]."
            ],
            "args": [
              {
                "name": "validator_stash",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "0b19",
            "name": "set_min_commission",
            "docs": [
              "See [`Pallet::set_min_commission`]."
            ],
            "args": [
              {
                "name": "new",
                "type": "U32",
                "type_name": "Perbill"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 227
        },
        "events": [
          {
            "lookup": "0b00",
            "name": "EraPaid",
            "docs": [
              "The era payout has been set; the first balance is the validator-payout; the second is",
              "the remainder from the maximum amount of reward."
            ],
            "args": [
              "U32",
              "U128",
              "U128"
            ],
            "args_name": [
              "era_index",
              "validator_payout",
              "remainder"
            ],
            "args_type_name": [
              "EraIndex",
              "BalanceOf",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0b01",
            "name": "Rewarded",
            "docs": [
              "The nominator has been rewarded by this amount."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "stash",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0b02",
            "name": "Slashed",
            "docs": [
              "A staker (validator or nominator) has been slashed by the given amount."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "staker",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0b03",
            "name": "SlashReported",
            "docs": [
              "A slash for the given validator, for the given percentage of their stake, at the given",
              "era as been reported."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "U32"
            ],
            "args_name": [
              "validator",
              "fraction",
              "slash_era"
            ],
            "args_type_name": [
              "AccountId",
              "Perbill",
              "EraIndex"
            ]
          },
          {
            "lookup": "0b04",
            "name": "OldSlashingReportDiscarded",
            "docs": [
              "An old slashing report from a prior era was discarded because it could",
              "not be processed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "session_index"
            ],
            "args_type_name": [
              "SessionIndex"
            ]
          },
          {
            "lookup": "0b05",
            "name": "StakersElected",
            "docs": [
              "A new set of stakers was elected."
            ],
            "args": null
          },
          {
            "lookup": "0b06",
            "name": "Bonded",
            "docs": [
              "An account has bonded this amount. \\[stash, amount\\]",
              "",
              "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
              "it will not be emitted for staking rewards when they are added to stake."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "stash",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0b07",
            "name": "Unbonded",
            "docs": [
              "An account has unbonded this amount."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "stash",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0b08",
            "name": "Withdrawn",
            "docs": [
              "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
              "from the unlocking queue."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "stash",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0b09",
            "name": "Kicked",
            "docs": [
              "A nominator has been kicked from a validator."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "nominator",
              "stash"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "0b0a",
            "name": "StakingElectionFailed",
            "docs": [
              "The election failed. No new era is planned."
            ],
            "args": null
          },
          {
            "lookup": "0b0b",
            "name": "Chilled",
            "docs": [
              "An account has stopped participating as either a validator or nominator."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "stash"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "0b0c",
            "name": "PayoutStarted",
            "docs": [
              "The stakers' rewards are getting paid."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "era_index",
              "validator_stash"
            ],
            "args_type_name": [
              "EraIndex",
              "AccountId"
            ]
          },
          {
            "lookup": "0b0d",
            "name": "ValidatorPrefsSet",
            "docs": [
              "A validator has set their preferences."
            ],
            "args": [
              "[U8; 32]",
              "pallet_staking:ValidatorPrefs"
            ],
            "args_name": [
              "stash",
              "prefs"
            ],
            "args_type_name": [
              "AccountId",
              "ValidatorPrefs"
            ]
          },
          {
            "lookup": "0b0e",
            "name": "SnapshotVotersSizeExceeded",
            "docs": [
              "Voters size limit reached."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "size"
            ],
            "args_type_name": [
              "u32"
            ]
          },
          {
            "lookup": "0b0f",
            "name": "SnapshotTargetsSizeExceeded",
            "docs": [
              "Targets size limit reached."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "size"
            ],
            "args_type_name": [
              "u32"
            ]
          },
          {
            "lookup": "0b10",
            "name": "ForceEra",
            "docs": [
              "A new force era mode was set."
            ],
            "args": [
              "pallet_staking:Forcing"
            ],
            "args_name": [
              "mode"
            ],
            "args_type_name": [
              "Forcing"
            ]
          }
        ],
        "events_value": {
          "type": 47
        },
        "constants": [
          {
            "name": "HistoryDepth",
            "type": "U32",
            "type_value": 4,
            "constants_value": "54000000",
            "docs": [
              " Number of eras to keep in history.",
              "",
              " Following information is kept for eras in `[current_era -",
              " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
              " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
              " `ErasTotalStake`, `ErasStartSessionIndex`,",
              " `StakingLedger.claimed_rewards`.",
              "",
              " Must be more than the number of eras delayed by session.",
              " I.e. active era must always be in history. I.e. `active_era \u003e",
              " current_era - history_depth` must be guaranteed.",
              "",
              " If migrating an existing pallet from storage value to config value,",
              " this should be set to same value or greater as in storage.",
              "",
              " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
              " item `StakingLedger.claimed_rewards`. Setting this value lower than",
              " the existing value can lead to inconsistencies in the",
              " `StakingLedger` and will need to be handled properly in a migration.",
              " The test `reducing_history_depth_abrupt` shows this effect."
            ]
          },
          {
            "name": "SessionsPerEra",
            "type": "U32",
            "type_value": 4,
            "constants_value": "06000000",
            "docs": [
              " Number of sessions per era."
            ]
          },
          {
            "name": "BondingDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "a0020000",
            "docs": [
              " Number of eras that staked funds must remain bonded for."
            ]
          },
          {
            "name": "SlashDeferDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "a8000000",
            "docs": [
              " Number of eras that slashes are deferred by, after computation.",
              "",
              " This should be less than the bonding duration. Set to 0 if slashes",
              " should be applied immediately, without opportunity for intervention."
            ]
          },
          {
            "name": "MaxNominatorRewardedPerValidator",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00010000",
            "docs": [
              " The maximum number of nominators rewarded for each validator.",
              "",
              " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
              " claim their reward. This used to limit the i/o cost for the nominator payout."
            ]
          },
          {
            "name": "MaxUnlockingChunks",
            "type": "U32",
            "type_value": 4,
            "constants_value": "20000000",
            "docs": [
              " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
              " have. Effectively determines how many unique eras a staker may be",
              " unbonding in.",
              "",
              " Note: `MaxUnlockingChunks` is used as the upper bound for the",
              " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
              " lower than the existing value can lead to inconsistencies in the",
              " `StakingLedger` and will need to be handled properly in a runtime",
              " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
              " this effect."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotController",
            "doc": [
              "Not a controller account."
            ]
          },
          {
            "name": "NotStash",
            "doc": [
              "Not a stash account."
            ]
          },
          {
            "name": "AlreadyBonded",
            "doc": [
              "Stash is already bonded."
            ]
          },
          {
            "name": "AlreadyPaired",
            "doc": [
              "Controller is already paired."
            ]
          },
          {
            "name": "EmptyTargets",
            "doc": [
              "Targets cannot be empty."
            ]
          },
          {
            "name": "DuplicateIndex",
            "doc": [
              "Duplicate index."
            ]
          },
          {
            "name": "InvalidSlashIndex",
            "doc": [
              "Slash record index out of bounds."
            ]
          },
          {
            "name": "InsufficientBond",
            "doc": [
              "Cannot have a validator or nominator role, with value less than the minimum defined by",
              "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
              "intention, `chill` first to remove one's role as validator/nominator."
            ]
          },
          {
            "name": "NoMoreChunks",
            "doc": [
              "Can not schedule more unlock chunks."
            ]
          },
          {
            "name": "NoUnlockChunk",
            "doc": [
              "Can not rebond without unlocking chunks."
            ]
          },
          {
            "name": "FundedTarget",
            "doc": [
              "Attempting to target a stash that still has funds."
            ]
          },
          {
            "name": "InvalidEraToReward",
            "doc": [
              "Invalid era to reward."
            ]
          },
          {
            "name": "InvalidNumberOfNominations",
            "doc": [
              "Invalid number of nominations."
            ]
          },
          {
            "name": "NotSortedAndUnique",
            "doc": [
              "Items are not sorted and unique."
            ]
          },
          {
            "name": "AlreadyClaimed",
            "doc": [
              "Rewards for this era have already been claimed for this validator."
            ]
          },
          {
            "name": "IncorrectHistoryDepth",
            "doc": [
              "Incorrect previous history depth input provided."
            ]
          },
          {
            "name": "IncorrectSlashingSpans",
            "doc": [
              "Incorrect number of slashing spans provided."
            ]
          },
          {
            "name": "BadState",
            "doc": [
              "Internal state has become somehow corrupted and the operation cannot continue."
            ]
          },
          {
            "name": "TooManyTargets",
            "doc": [
              "Too many nomination targets supplied."
            ]
          },
          {
            "name": "BadTarget",
            "doc": [
              "A nomination target was supplied that was blocked or otherwise not a validator."
            ]
          },
          {
            "name": "CannotChillOther",
            "doc": [
              "The user has enough bond and thus cannot be chilled forcefully by an external person."
            ]
          },
          {
            "name": "TooManyNominators",
            "doc": [
              "There are too many nominators in the system. Governance needs to adjust the staking",
              "settings to keep things safe for the runtime."
            ]
          },
          {
            "name": "TooManyValidators",
            "doc": [
              "There are too many validator candidates in the system. Governance needs to adjust the",
              "staking settings to keep things safe for the runtime."
            ]
          },
          {
            "name": "CommissionTooLow",
            "doc": [
              "Commission is too low. Must be at least `MinCommission`."
            ]
          },
          {
            "name": "BoundNotMet",
            "doc": [
              "Some bound is not met."
            ]
          }
        ],
        "errors_value": {
          "type": 540
        },
        "index": 11
      },
      {
        "name": "Session",
        "prefix": "Session",
        "storage": [
          {
            "name": "Validators",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 89
            },
            "fallback": "0x00",
            "docs": [
              " The current set of validators."
            ]
          },
          {
            "name": "CurrentIndex",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Current index of the session."
            ]
          },
          {
            "name": "QueuedChanged",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 43
            },
            "fallback": "0x00",
            "docs": [
              " True if the underlying economic identities or weighting behind the validators",
              " has changed in the queued validator set."
            ]
          },
          {
            "name": "QueuedKeys",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:[U8; 32]kitchensink_runtime:SessionKeys\u003e",
              "PlainTypeValue": 541
            },
            "fallback": "0x00",
            "docs": [
              " The queued keys for the next session. When the next session begins, these keys",
              " will be used to determine the validator's session keys."
            ]
          },
          {
            "name": "DisabledValidators",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU32\u003e",
              "PlainTypeValue": 114
            },
            "fallback": "0x00",
            "docs": [
              " Indices of disabled validators.",
              "",
              " The vec is always kept sorted so that we can find whether a given validator is",
              " disabled using binary search. It gets cleared when `on_session_ending` returns",
              " a new set of identities."
            ]
          },
          {
            "name": "NextKeys",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "kitchensink_runtime:SessionKeys",
                "keys_id": 0,
                "value_id": 236
              }
            },
            "fallback": "0x00",
            "docs": [
              " The next session keys for a validator."
            ]
          },
          {
            "name": "KeyOwner",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 4]",
                  "Vec\u003cU8\u003e"
                ],
                "value": "[U8; 32]",
                "keys_id": 543,
                "value_id": 0
              }
            },
            "fallback": "0x00",
            "docs": [
              " The owner of a key. The key is the `KeyTypeId` + the encoded key."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0c00",
            "name": "set_keys",
            "docs": [
              "See [`Pallet::set_keys`]."
            ],
            "args": [
              {
                "name": "keys",
                "type": "kitchensink_runtime:SessionKeys",
                "type_name": "Keys"
              },
              {
                "name": "proof",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "0c01",
            "name": "purge_keys",
            "docs": [
              "See [`Pallet::purge_keys`]."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 235
        },
        "events": [
          {
            "lookup": "0c00",
            "name": "NewSession",
            "docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "session_index"
            ],
            "args_type_name": [
              "SessionIndex"
            ]
          }
        ],
        "events_value": {
          "type": 52
        },
        "errors": [
          {
            "name": "InvalidProof",
            "doc": [
              "Invalid ownership proof."
            ]
          },
          {
            "name": "NoAssociatedValidatorId",
            "doc": [
              "No associated validator ID for account."
            ]
          },
          {
            "name": "DuplicatedKey",
            "doc": [
              "Registered duplicate key."
            ]
          },
          {
            "name": "NoKeys",
            "doc": [
              "No keys are associated with this account."
            ]
          },
          {
            "name": "NoAccount",
            "doc": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "errors_value": {
          "type": 545
        },
        "index": 12
      },
      {
        "name": "Democracy",
        "prefix": "Democracy",
        "storage": [
          {
            "name": "PublicPropCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of (public) proposals that have been made so far."
            ]
          },
          {
            "name": "PublicProps",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U32frame_support:traits:preimages:Bounded[U8; 32]\u003e",
              "PlainTypeValue": 546
            },
            "fallback": "0x00",
            "docs": [
              " The public proposals. Unsorted. The second item is the proposal."
            ]
          },
          {
            "name": "DepositOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@550U128",
                "keys_id": 4,
                "value_id": 549
              }
            },
            "fallback": "0x00",
            "docs": [
              " Those who have locked a deposit.",
              "",
              " TWOX-NOTE: Safe, as increasing integer keys are safe."
            ]
          },
          {
            "name": "ReferendumCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The next free referendum index, aka the number of referenda started so far."
            ]
          },
          {
            "name": "LowestUnbaked",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The lowest referendum index representing an unbaked referendum. Equal to",
              " `ReferendumCount` if there isn't a unbaked referendum."
            ]
          },
          {
            "name": "ReferendumInfoOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_democracy:types:ReferendumInfo",
                "keys_id": 4,
                "value_id": 551
              }
            },
            "fallback": "0x00",
            "docs": [
              " Information concerning any given referendum.",
              "",
              "0x2054574f582d4e4f54453a205341464520617320696e646578657320617265206e6f7420756e64657220616e2061747461636b6572e280997320636f6e74726f6c2e"
            ]
          },
          {
            "name": "VotingOf",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_democracy:vote:Voting",
                "keys_id": 0,
                "value_id": 554
              }
            },
            "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " All votes for a particular voter. We store the balance for the number of votes that we",
              " have recorded. The second item is the total amount of delegations, that will be added.",
              "",
              " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
            ]
          },
          {
            "name": "LastTabledWasExternal",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 43
            },
            "fallback": "0x00",
            "docs": [
              " True if the last referendum tabled was submitted externally. False if it was a public",
              " proposal."
            ]
          },
          {
            "name": "NextExternal",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Tuple:frame_support:traits:preimages:Boundedpallet_democracy:vote_threshold:VoteThreshold",
              "PlainTypeValue": 560
            },
            "fallback": "0x00",
            "docs": [
              " The referendum to be tabled whenever it would be valid to table an external proposal.",
              " This happens when a referendum needs to be tabled and one of two conditions are met:",
              " - `LastTabledWasExternal` is `false`; or",
              " - `PublicProps` is empty."
            ]
          },
          {
            "name": "Blacklist",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Tuple:U32Vec\u003c[U8; 32]\u003e",
                "keys_id": 12,
                "value_id": 561
              }
            },
            "fallback": "0x00",
            "docs": [
              " A record of who vetoed what. Maps proposal hash to a possible existent block number",
              " (until when it may not be resubmitted) and who vetoed it."
            ]
          },
          {
            "name": "Cancellations",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Bool",
                "keys_id": 12,
                "value_id": 43
              }
            },
            "fallback": "0x00",
            "docs": [
              " Record of all proposals that have been subject to emergency cancellation."
            ]
          },
          {
            "name": "MetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "pallet_democracy:types:MetadataOwner"
                ],
                "value": "H256",
                "keys_id": 57,
                "value_id": 12
              }
            },
            "fallback": "0x00",
            "docs": [
              " General information concerning any proposal or referendum.",
              " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
              " dump or IPFS hash of a JSON file.",
              "",
              " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
              " large preimages."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0d00",
            "name": "propose",
            "docs": [
              "See [`Pallet::propose`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "0d01",
            "name": "second",
            "docs": [
              "See [`Pallet::second`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "compact\u003cU32\u003e",
                "type_name": "PropIndex"
              }
            ]
          },
          {
            "lookup": "0d02",
            "name": "vote",
            "docs": [
              "See [`Pallet::vote`]."
            ],
            "args": [
              {
                "name": "ref_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReferendumIndex"
              },
              {
                "name": "vote",
                "type": "pallet_democracy:vote:AccountVote",
                "type_name": "AccountVote\u003cBalanceOf\u003e"
              }
            ]
          },
          {
            "lookup": "0d03",
            "name": "emergency_cancel",
            "docs": [
              "See [`Pallet::emergency_cancel`]."
            ],
            "args": [
              {
                "name": "ref_index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "0d04",
            "name": "external_propose",
            "docs": [
              "See [`Pallet::external_propose`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              }
            ]
          },
          {
            "lookup": "0d05",
            "name": "external_propose_majority",
            "docs": [
              "See [`Pallet::external_propose_majority`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              }
            ]
          },
          {
            "lookup": "0d06",
            "name": "external_propose_default",
            "docs": [
              "See [`Pallet::external_propose_default`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              }
            ]
          },
          {
            "lookup": "0d07",
            "name": "fast_track",
            "docs": [
              "See [`Pallet::fast_track`]."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "H256"
              },
              {
                "name": "voting_period",
                "type": "U32",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumberFor"
              }
            ]
          },
          {
            "lookup": "0d08",
            "name": "veto_external",
            "docs": [
              "See [`Pallet::veto_external`]."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "H256"
              }
            ]
          },
          {
            "lookup": "0d09",
            "name": "cancel_referendum",
            "docs": [
              "See [`Pallet::cancel_referendum`]."
            ],
            "args": [
              {
                "name": "ref_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "0d0a",
            "name": "delegate",
            "docs": [
              "See [`Pallet::delegate`]."
            ],
            "args": [
              {
                "name": "to",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "conviction",
                "type": "pallet_democracy:conviction:Conviction",
                "type_name": "Conviction"
              },
              {
                "name": "balance",
                "type": "U128",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "0d0b",
            "name": "undelegate",
            "docs": [
              "See [`Pallet::undelegate`]."
            ],
            "args": null
          },
          {
            "lookup": "0d0c",
            "name": "clear_public_proposals",
            "docs": [
              "See [`Pallet::clear_public_proposals`]."
            ],
            "args": null
          },
          {
            "lookup": "0d0d",
            "name": "unlock",
            "docs": [
              "See [`Pallet::unlock`]."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "0d0e",
            "name": "remove_vote",
            "docs": [
              "See [`Pallet::remove_vote`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "0d0f",
            "name": "remove_other_vote",
            "docs": [
              "See [`Pallet::remove_other_vote`]."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "0d10",
            "name": "blacklist",
            "docs": [
              "See [`Pallet::blacklist`]."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "H256"
              },
              {
                "name": "maybe_ref_index",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cReferendumIndex\u003e"
              }
            ]
          },
          {
            "lookup": "0d11",
            "name": "cancel_proposal",
            "docs": [
              "See [`Pallet::cancel_proposal`]."
            ],
            "args": [
              {
                "name": "prop_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "PropIndex"
              }
            ]
          },
          {
            "lookup": "0d12",
            "name": "set_metadata",
            "docs": [
              "See [`Pallet::set_metadata`]."
            ],
            "args": [
              {
                "name": "owner",
                "type": "pallet_democracy:types:MetadataOwner",
                "type_name": "MetadataOwner"
              },
              {
                "name": "maybe_hash",
                "type": "option\u003cH256\u003e",
                "type_name": "Option\u003cPreimageHash\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 238
        },
        "events": [
          {
            "lookup": "0d00",
            "name": "Proposed",
            "docs": [
              "A motion has been proposed by a public account."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "proposal_index",
              "deposit"
            ],
            "args_type_name": [
              "PropIndex",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0d01",
            "name": "Tabled",
            "docs": [
              "A public proposal has been tabled for referendum vote."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "proposal_index",
              "deposit"
            ],
            "args_type_name": [
              "PropIndex",
              "BalanceOf"
            ]
          },
          {
            "lookup": "0d02",
            "name": "ExternalTabled",
            "docs": [
              "An external proposal has been tabled."
            ],
            "args": null
          },
          {
            "lookup": "0d03",
            "name": "Started",
            "docs": [
              "A referendum has begun."
            ],
            "args": [
              "U32",
              "pallet_democracy:vote_threshold:VoteThreshold"
            ],
            "args_name": [
              "ref_index",
              "threshold"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "VoteThreshold"
            ]
          },
          {
            "lookup": "0d04",
            "name": "Passed",
            "docs": [
              "A proposal has been approved by referendum."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "ref_index"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "0d05",
            "name": "NotPassed",
            "docs": [
              "A proposal has been rejected by referendum."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "ref_index"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "0d06",
            "name": "Cancelled",
            "docs": [
              "A referendum has been cancelled."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "ref_index"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "0d07",
            "name": "Delegated",
            "docs": [
              "An account has delegated their vote to another account."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "who",
              "target"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "0d08",
            "name": "Undelegated",
            "docs": [
              "An account has cancelled a previous delegation operation."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "account"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "0d09",
            "name": "Vetoed",
            "docs": [
              "An external proposal has been vetoed."
            ],
            "args": [
              "[U8; 32]",
              "H256",
              "U32"
            ],
            "args_name": [
              "who",
              "proposal_hash",
              "until"
            ],
            "args_type_name": [
              "AccountId",
              "H256",
              "BlockNumberFor"
            ]
          },
          {
            "lookup": "0d0a",
            "name": "Blacklisted",
            "docs": [
              "A proposal_hash has been blacklisted permanently."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "proposal_hash"
            ],
            "args_type_name": [
              "H256"
            ]
          },
          {
            "lookup": "0d0b",
            "name": "Voted",
            "docs": [
              "An account has voted in a referendum"
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "pallet_democracy:vote:AccountVote"
            ],
            "args_name": [
              "voter",
              "ref_index",
              "vote"
            ],
            "args_type_name": [
              "AccountId",
              "ReferendumIndex",
              "AccountVote\u003cBalanceOf\u003e"
            ]
          },
          {
            "lookup": "0d0c",
            "name": "Seconded",
            "docs": [
              "An account has secconded a proposal"
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_name": [
              "seconder",
              "prop_index"
            ],
            "args_type_name": [
              "AccountId",
              "PropIndex"
            ]
          },
          {
            "lookup": "0d0d",
            "name": "ProposalCanceled",
            "docs": [
              "A proposal got canceled."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "prop_index"
            ],
            "args_type_name": [
              "PropIndex"
            ]
          },
          {
            "lookup": "0d0e",
            "name": "MetadataSet",
            "docs": [
              "Metadata for a proposal or a referendum has been set."
            ],
            "args": [
              "pallet_democracy:types:MetadataOwner",
              "H256"
            ],
            "args_name": [
              "owner",
              "hash"
            ],
            "args_type_name": [
              "MetadataOwner",
              "PreimageHash"
            ]
          },
          {
            "lookup": "0d0f",
            "name": "MetadataCleared",
            "docs": [
              "Metadata for a proposal or a referendum has been cleared."
            ],
            "args": [
              "pallet_democracy:types:MetadataOwner",
              "H256"
            ],
            "args_name": [
              "owner",
              "hash"
            ],
            "args_type_name": [
              "MetadataOwner",
              "PreimageHash"
            ]
          },
          {
            "lookup": "0d10",
            "name": "MetadataTransferred",
            "docs": [
              "Metadata has been transferred to new owner."
            ],
            "args": [
              "pallet_democracy:types:MetadataOwner",
              "pallet_democracy:types:MetadataOwner",
              "H256"
            ],
            "args_name": [
              "prev_owner",
              "owner",
              "hash"
            ],
            "args_type_name": [
              "MetadataOwner",
              "MetadataOwner",
              "PreimageHash"
            ]
          }
        ],
        "events_value": {
          "type": 53
        },
        "constants": [
          {
            "name": "EnactmentPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "002f0d00",
            "docs": [
              " The period between a proposal being approved and enacted.",
              "",
              " It should generally be a little more than the unstake period to ensure that",
              " voting stakers have an opportunity to remove themselves from the system in the case",
              " where they are on the losing side of a vote."
            ]
          },
          {
            "name": "LaunchPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "004e0c00",
            "docs": [
              " How often (in blocks) new public referenda are launched."
            ]
          },
          {
            "name": "VotingPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "004e0c00",
            "docs": [
              " How often (in blocks) to check for new votes."
            ]
          },
          {
            "name": "VoteLockingPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "002f0d00",
            "docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          },
          {
            "name": "MinimumDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "name": "InstantAllowed",
            "type": "Bool",
            "type_value": 43,
            "constants_value": "01",
            "docs": [
              " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
              " want to set this permanently to `false`, others may want to condition it on things such",
              " as an upgrade having happened recently."
            ]
          },
          {
            "name": "FastTrackVotingPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80510100",
            "docs": [
              " Minimum voting period allowed for a fast-track referendum."
            ]
          },
          {
            "name": "CooloffPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "004e0c00",
            "docs": [
              " Period in blocks where an external proposal may not be re-submitted after being vetoed."
            ]
          },
          {
            "name": "MaxVotes",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of votes for an account.",
              "",
              " Also used to compute weight, an overly big value can",
              " lead to extrinsic with very big weight: see `delegate` for instance."
            ]
          },
          {
            "name": "MaxProposals",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of public proposals that can exist at any time."
            ]
          },
          {
            "name": "MaxDeposits",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of deposits a public proposal may have at any time."
            ]
          },
          {
            "name": "MaxBlacklisted",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of items which can be blacklisted."
            ]
          }
        ],
        "errors": [
          {
            "name": "ValueLow",
            "doc": [
              "Value too low"
            ]
          },
          {
            "name": "ProposalMissing",
            "doc": [
              "Proposal does not exist"
            ]
          },
          {
            "name": "AlreadyCanceled",
            "doc": [
              "Cannot cancel the same proposal twice"
            ]
          },
          {
            "name": "DuplicateProposal",
            "doc": [
              "Proposal already made"
            ]
          },
          {
            "name": "ProposalBlacklisted",
            "doc": [
              "Proposal still blacklisted"
            ]
          },
          {
            "name": "NotSimpleMajority",
            "doc": [
              "Next external proposal not simple majority"
            ]
          },
          {
            "name": "InvalidHash",
            "doc": [
              "Invalid hash"
            ]
          },
          {
            "name": "NoProposal",
            "doc": [
              "No external proposal"
            ]
          },
          {
            "name": "AlreadyVetoed",
            "doc": [
              "Identity may not veto a proposal twice"
            ]
          },
          {
            "name": "ReferendumInvalid",
            "doc": [
              "Vote given for invalid referendum"
            ]
          },
          {
            "name": "NoneWaiting",
            "doc": [
              "No proposals waiting"
            ]
          },
          {
            "name": "NotVoter",
            "doc": [
              "The given account did not vote on the referendum."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "name": "AlreadyDelegating",
            "doc": [
              "The account is already delegating."
            ]
          },
          {
            "name": "InsufficientFunds",
            "doc": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "name": "NotDelegating",
            "doc": [
              "The account is not currently delegating."
            ]
          },
          {
            "name": "VotesExist",
            "doc": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "name": "InstantNotAllowed",
            "doc": [
              "The instant referendum origin is currently disallowed."
            ]
          },
          {
            "name": "Nonsense",
            "doc": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "name": "WrongUpperBound",
            "doc": [
              "Invalid upper bound."
            ]
          },
          {
            "name": "MaxVotesReached",
            "doc": [
              "Maximum number of votes reached."
            ]
          },
          {
            "name": "TooMany",
            "doc": [
              "Maximum number of items reached."
            ]
          },
          {
            "name": "VotingPeriodLow",
            "doc": [
              "Voting period too low"
            ]
          },
          {
            "name": "PreimageNotExist",
            "doc": [
              "The preimage does not exist."
            ]
          }
        ],
        "errors_value": {
          "type": 562
        },
        "index": 13
      },
      {
        "name": "Council",
        "prefix": "Council",
        "storage": [
          {
            "name": "Proposals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cH256\u003e",
              "PlainTypeValue": 563
            },
            "fallback": "0x00",
            "docs": [
              " The hashes of the active proposals."
            ]
          },
          {
            "name": "ProposalOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Call",
                "keys_id": 12,
                "value_id": 141
              }
            },
            "fallback": "0x00",
            "docs": [
              " Actual proposal for a given hash, if it's current."
            ]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_collective:Votes",
                "keys_id": 12,
                "value_id": 564
              }
            },
            "fallback": "0x00",
            "docs": [
              " Votes on a given proposal, if it is ongoing."
            ]
          },
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Proposals so far."
            ]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 89
            },
            "fallback": "0x00",
            "docs": [
              " The current members of the collective. This is stored sorted (just by value)."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The prime member that helps determine the default vote behavior in case of absentations."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0e00",
            "name": "set_members",
            "docs": [
              "See [`Pallet::set_members`]."
            ],
            "args": [
              {
                "name": "new_members",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "prime",
                "type": "option\u003c[U8; 32]\u003e",
                "type_name": "Option\u003cAccountId\u003e"
              },
              {
                "name": "old_count",
                "type": "U32",
                "type_name": "MemberCount"
              }
            ]
          },
          {
            "lookup": "0e01",
            "name": "execute",
            "docs": [
              "See [`Pallet::execute`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0e02",
            "name": "propose",
            "docs": [
              "See [`Pallet::propose`]."
            ],
            "args": [
              {
                "name": "threshold",
                "type": "compact\u003cU32\u003e",
                "type_name": "MemberCount"
              },
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0e03",
            "name": "vote",
            "docs": [
              "See [`Pallet::vote`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "0e05",
            "name": "disapprove_proposal",
            "docs": [
              "See [`Pallet::disapprove_proposal`]."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "0e06",
            "name": "close",
            "docs": [
              "See [`Pallet::close`]."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "proposal_weight_bound",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 241
        },
        "events": [
          {
            "lookup": "0e00",
            "name": "Proposed",
            "docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "H256",
              "U32"
            ],
            "args_name": [
              "account",
              "proposal_index",
              "proposal_hash",
              "threshold"
            ],
            "args_type_name": [
              "AccountId",
              "ProposalIndex",
              "Hash",
              "MemberCount"
            ]
          },
          {
            "lookup": "0e01",
            "name": "Voted",
            "docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "H256",
              "Bool",
              "U32",
              "U32"
            ],
            "args_name": [
              "account",
              "proposal_hash",
              "voted",
              "yes",
              "no"
            ],
            "args_type_name": [
              "AccountId",
              "Hash",
              "bool",
              "MemberCount",
              "MemberCount"
            ]
          },
          {
            "lookup": "0e02",
            "name": "Approved",
            "docs": [
              "A motion was approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "proposal_hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "0e03",
            "name": "Disapproved",
            "docs": [
              "A motion was not approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "proposal_hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "0e04",
            "name": "Executed",
            "docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "proposal_hash",
              "result"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "0e05",
            "name": "MemberExecuted",
            "docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "proposal_hash",
              "result"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "0e06",
            "name": "Closed",
            "docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ],
            "args": [
              "H256",
              "U32",
              "U32"
            ],
            "args_name": [
              "proposal_hash",
              "yes",
              "no"
            ],
            "args_type_name": [
              "Hash",
              "MemberCount",
              "MemberCount"
            ]
          }
        ],
        "events_value": {
          "type": 58
        },
        "constants": [
          {
            "name": "MaxProposalWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "070010a5d4e813ffffffffffffff7f",
            "docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotMember",
            "doc": [
              "Account is not a member"
            ]
          },
          {
            "name": "DuplicateProposal",
            "doc": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "name": "ProposalMissing",
            "doc": [
              "Proposal must exist"
            ]
          },
          {
            "name": "WrongIndex",
            "doc": [
              "Mismatched index"
            ]
          },
          {
            "name": "DuplicateVote",
            "doc": [
              "Duplicate vote ignored"
            ]
          },
          {
            "name": "AlreadyInitialized",
            "doc": [
              "Members are already initialized!"
            ]
          },
          {
            "name": "TooEarly",
            "doc": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "name": "TooManyProposals",
            "doc": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "name": "WrongProposalWeight",
            "doc": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "name": "WrongProposalLength",
            "doc": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "name": "PrimeAccountNotMember",
            "doc": [
              "Prime account is not a member"
            ]
          }
        ],
        "errors_value": {
          "type": 565
        },
        "index": 14
      },
      {
        "name": "TechnicalCommittee",
        "prefix": "TechnicalCommittee",
        "storage": [
          {
            "name": "Proposals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cH256\u003e",
              "PlainTypeValue": 566
            },
            "fallback": "0x00",
            "docs": [
              " The hashes of the active proposals."
            ]
          },
          {
            "name": "ProposalOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Call",
                "keys_id": 12,
                "value_id": 141
              }
            },
            "fallback": "0x00",
            "docs": [
              " Actual proposal for a given hash, if it's current."
            ]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_collective:Votes",
                "keys_id": 12,
                "value_id": 564
              }
            },
            "fallback": "0x00",
            "docs": [
              " Votes on a given proposal, if it is ongoing."
            ]
          },
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Proposals so far."
            ]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 89
            },
            "fallback": "0x00",
            "docs": [
              " The current members of the collective. This is stored sorted (just by value)."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The prime member that helps determine the default vote behavior in case of absentations."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0f00",
            "name": "set_members",
            "docs": [
              "See [`Pallet::set_members`]."
            ],
            "args": [
              {
                "name": "new_members",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "prime",
                "type": "option\u003c[U8; 32]\u003e",
                "type_name": "Option\u003cAccountId\u003e"
              },
              {
                "name": "old_count",
                "type": "U32",
                "type_name": "MemberCount"
              }
            ]
          },
          {
            "lookup": "0f01",
            "name": "execute",
            "docs": [
              "See [`Pallet::execute`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0f02",
            "name": "propose",
            "docs": [
              "See [`Pallet::propose`]."
            ],
            "args": [
              {
                "name": "threshold",
                "type": "compact\u003cU32\u003e",
                "type_name": "MemberCount"
              },
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "0f03",
            "name": "vote",
            "docs": [
              "See [`Pallet::vote`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "0f05",
            "name": "disapprove_proposal",
            "docs": [
              "See [`Pallet::disapprove_proposal`]."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "0f06",
            "name": "close",
            "docs": [
              "See [`Pallet::close`]."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "proposal_weight_bound",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 242
        },
        "events": [
          {
            "lookup": "0f00",
            "name": "Proposed",
            "docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "H256",
              "U32"
            ],
            "args_name": [
              "account",
              "proposal_index",
              "proposal_hash",
              "threshold"
            ],
            "args_type_name": [
              "AccountId",
              "ProposalIndex",
              "Hash",
              "MemberCount"
            ]
          },
          {
            "lookup": "0f01",
            "name": "Voted",
            "docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "H256",
              "Bool",
              "U32",
              "U32"
            ],
            "args_name": [
              "account",
              "proposal_hash",
              "voted",
              "yes",
              "no"
            ],
            "args_type_name": [
              "AccountId",
              "Hash",
              "bool",
              "MemberCount",
              "MemberCount"
            ]
          },
          {
            "lookup": "0f02",
            "name": "Approved",
            "docs": [
              "A motion was approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "proposal_hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "0f03",
            "name": "Disapproved",
            "docs": [
              "A motion was not approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "proposal_hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "0f04",
            "name": "Executed",
            "docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "proposal_hash",
              "result"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "0f05",
            "name": "MemberExecuted",
            "docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "proposal_hash",
              "result"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "0f06",
            "name": "Closed",
            "docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ],
            "args": [
              "H256",
              "U32",
              "U32"
            ],
            "args_name": [
              "proposal_hash",
              "yes",
              "no"
            ],
            "args_type_name": [
              "Hash",
              "MemberCount",
              "MemberCount"
            ]
          }
        ],
        "events_value": {
          "type": 59
        },
        "constants": [
          {
            "name": "MaxProposalWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "070010a5d4e813ffffffffffffff7f",
            "docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotMember",
            "doc": [
              "Account is not a member"
            ]
          },
          {
            "name": "DuplicateProposal",
            "doc": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "name": "ProposalMissing",
            "doc": [
              "Proposal must exist"
            ]
          },
          {
            "name": "WrongIndex",
            "doc": [
              "Mismatched index"
            ]
          },
          {
            "name": "DuplicateVote",
            "doc": [
              "Duplicate vote ignored"
            ]
          },
          {
            "name": "AlreadyInitialized",
            "doc": [
              "Members are already initialized!"
            ]
          },
          {
            "name": "TooEarly",
            "doc": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "name": "TooManyProposals",
            "doc": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "name": "WrongProposalWeight",
            "doc": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "name": "WrongProposalLength",
            "doc": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "name": "PrimeAccountNotMember",
            "doc": [
              "Prime account is not a member"
            ]
          }
        ],
        "errors_value": {
          "type": 567
        },
        "index": 15
      },
      {
        "name": "Elections",
        "prefix": "Elections",
        "storage": [
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_elections_phragmen:SeatHolder\u003e",
              "PlainTypeValue": 568
            },
            "fallback": "0x00",
            "docs": [
              " The current elected members.",
              "",
              " Invariant: Always sorted based on account id."
            ]
          },
          {
            "name": "RunnersUp",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_elections_phragmen:SeatHolder\u003e",
              "PlainTypeValue": 568
            },
            "fallback": "0x00",
            "docs": [
              " The current reserved runners-up.",
              "",
              " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
              " last (i.e. _best_) runner-up will be replaced."
            ]
          },
          {
            "name": "Candidates",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:[U8; 32]U128\u003e",
              "PlainTypeValue": 61
            },
            "fallback": "0x00",
            "docs": [
              " The present candidate list. A current member or runner-up can never enter this vector",
              " and is always implicitly assumed to be a candidate.",
              "",
              " Second element is the deposit.",
              "",
              " Invariant: Always sorted based on account id."
            ]
          },
          {
            "name": "ElectionRounds",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The total number of vote rounds that have happened, excluding the upcoming one."
            ]
          },
          {
            "name": "Voting",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_elections_phragmen:Voter",
                "keys_id": 0,
                "value_id": 570
              }
            },
            "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Votes and locked stake of a particular voter.",
              "",
              " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1000",
            "name": "vote",
            "docs": [
              "See [`Pallet::vote`]."
            ],
            "args": [
              {
                "name": "votes",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "1001",
            "name": "remove_voter",
            "docs": [
              "See [`Pallet::remove_voter`]."
            ],
            "args": null
          },
          {
            "lookup": "1002",
            "name": "submit_candidacy",
            "docs": [
              "See [`Pallet::submit_candidacy`]."
            ],
            "args": [
              {
                "name": "candidate_count",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "1003",
            "name": "renounce_candidacy",
            "docs": [
              "See [`Pallet::renounce_candidacy`]."
            ],
            "args": [
              {
                "name": "renouncing",
                "type": "pallet_elections_phragmen:Renouncing",
                "type_name": "Renouncing"
              }
            ]
          },
          {
            "lookup": "1004",
            "name": "remove_member",
            "docs": [
              "See [`Pallet::remove_member`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "slash_bond",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "rerun_election",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "1005",
            "name": "clean_defunct_voters",
            "docs": [
              "See [`Pallet::clean_defunct_voters`]."
            ],
            "args": [
              {
                "name": "num_voters",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "num_defunct",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 243
        },
        "events": [
          {
            "lookup": "1000",
            "name": "NewTerm",
            "docs": [
              "A new term with new_members. This indicates that enough candidates existed to run",
              "the election, not that enough have has been elected. The inner value must be examined",
              "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
              "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
              "begin with."
            ],
            "args": [
              "Vec\u003cTuple:[U8; 32]U128\u003e"
            ],
            "args_name": [
              "new_members"
            ],
            "args_type_name": [
              "Vec\u003c(\u003cT as frame_system::Config\u003e::AccountId, BalanceOf)\u003e"
            ]
          },
          {
            "lookup": "1001",
            "name": "EmptyTerm",
            "docs": [
              "No (or not enough) candidates existed for this round. This is different from",
              "`NewTerm(\\[\\])`. See the description of `NewTerm`."
            ],
            "args": null
          },
          {
            "lookup": "1002",
            "name": "ElectionError",
            "docs": [
              "Internal error happened while trying to perform election."
            ],
            "args": null
          },
          {
            "lookup": "1003",
            "name": "MemberKicked",
            "docs": [
              "A member has been removed. This should always be followed by either `NewTerm` or",
              "`EmptyTerm`."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "member"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId"
            ]
          },
          {
            "lookup": "1004",
            "name": "Renounced",
            "docs": [
              "Someone has renounced their candidacy."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "candidate"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId"
            ]
          },
          {
            "lookup": "1005",
            "name": "CandidateSlashed",
            "docs": [
              "A candidate was slashed by amount due to failing to obtain a seat as member or",
              "runner-up.",
              "",
              "Note that old members and runners-up are also candidates."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "candidate",
              "amount"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1006",
            "name": "SeatHolderSlashed",
            "docs": [
              "A seat holder was slashed by amount by being forcefully removed from the set."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "seat_holder",
              "amount"
            ],
            "args_type_name": [
              "\u003cT as frame_system::Config\u003e::AccountId",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 60
        },
        "constants": [
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 280,
            "constants_value": "706872656c656374",
            "docs": [
              " Identifier for the elections-phragmen pallet's lock"
            ]
          },
          {
            "name": "CandidacyBond",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " How much should be locked up in order to submit one's candidacy."
            ]
          },
          {
            "name": "VotingBondBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00f0436de36a01000000000000000000",
            "docs": [
              " Base deposit associated with voting.",
              "",
              " This should be sensibly high to economically ensure the pallet cannot be attacked by",
              " creating a gigantic number of votes."
            ]
          },
          {
            "name": "VotingBondFactor",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000cc7b9fae00000000000000000000",
            "docs": [
              " The amount of bond that need to be locked for each vote (32 bytes)."
            ]
          },
          {
            "name": "DesiredMembers",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0d000000",
            "docs": [
              " Number of members to elect."
            ]
          },
          {
            "name": "DesiredRunnersUp",
            "type": "U32",
            "type_value": 4,
            "constants_value": "07000000",
            "docs": [
              " Number of runners_up to keep."
            ]
          },
          {
            "name": "TermDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80130300",
            "docs": [
              " How long each seat is kept. This defines the next block number at which an election",
              " round will happen. If set to zero, no elections are ever triggered and the module will",
              " be in passive mode."
            ]
          },
          {
            "name": "MaxCandidates",
            "type": "U32",
            "type_value": 4,
            "constants_value": "40000000",
            "docs": [
              " The maximum number of candidates in a phragmen election.",
              "",
              " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
              " consider how it will impact `T::WeightInfo::election_phragmen`.",
              "",
              " When this limit is reached no more candidates are accepted in the election."
            ]
          },
          {
            "name": "MaxVoters",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00020000",
            "docs": [
              " The maximum number of voters to allow in a phragmen election.",
              "",
              " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
              " consider how it will impact `T::WeightInfo::election_phragmen`.",
              "",
              " When the limit is reached the new voters are ignored."
            ]
          },
          {
            "name": "MaxVotesPerVoter",
            "type": "U32",
            "type_value": 4,
            "constants_value": "10000000",
            "docs": [
              " Maximum numbers of votes per voter.",
              "",
              " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
              " consider how it will impact `T::WeightInfo::election_phragmen`."
            ]
          }
        ],
        "errors": [
          {
            "name": "UnableToVote",
            "doc": [
              "Cannot vote when no candidates or members exist."
            ]
          },
          {
            "name": "NoVotes",
            "doc": [
              "Must vote for at least one candidate."
            ]
          },
          {
            "name": "TooManyVotes",
            "doc": [
              "Cannot vote more than candidates."
            ]
          },
          {
            "name": "MaximumVotesExceeded",
            "doc": [
              "Cannot vote more than maximum allowed."
            ]
          },
          {
            "name": "LowBalance",
            "doc": [
              "Cannot vote with stake less than minimum balance."
            ]
          },
          {
            "name": "UnableToPayBond",
            "doc": [
              "Voter can not pay voting bond."
            ]
          },
          {
            "name": "MustBeVoter",
            "doc": [
              "Must be a voter."
            ]
          },
          {
            "name": "DuplicatedCandidate",
            "doc": [
              "Duplicated candidate submission."
            ]
          },
          {
            "name": "TooManyCandidates",
            "doc": [
              "Too many candidates have been created."
            ]
          },
          {
            "name": "MemberSubmit",
            "doc": [
              "Member cannot re-submit candidacy."
            ]
          },
          {
            "name": "RunnerUpSubmit",
            "doc": [
              "Runner cannot re-submit candidacy."
            ]
          },
          {
            "name": "InsufficientCandidateFunds",
            "doc": [
              "Candidate does not have enough funds."
            ]
          },
          {
            "name": "NotMember",
            "doc": [
              "Not a member."
            ]
          },
          {
            "name": "InvalidWitnessData",
            "doc": [
              "The provided count of number of candidates is incorrect."
            ]
          },
          {
            "name": "InvalidVoteCount",
            "doc": [
              "The provided count of number of votes is incorrect."
            ]
          },
          {
            "name": "InvalidRenouncing",
            "doc": [
              "The renouncing origin presented a wrong `Renouncing` parameter."
            ]
          },
          {
            "name": "InvalidReplacement",
            "doc": [
              "Prediction regarding replacement after member removal is wrong."
            ]
          }
        ],
        "errors_value": {
          "type": 571
        },
        "index": 16
      },
      {
        "name": "TechnicalMembership",
        "prefix": "TechnicalMembership",
        "storage": [
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 572
            },
            "fallback": "0x00",
            "docs": [
              " The current membership, stored as an ordered Vec."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The current prime member, if one exists."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1100",
            "name": "add_member",
            "docs": [
              "See [`Pallet::add_member`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1101",
            "name": "remove_member",
            "docs": [
              "See [`Pallet::remove_member`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1102",
            "name": "swap_member",
            "docs": [
              "See [`Pallet::swap_member`]."
            ],
            "args": [
              {
                "name": "remove",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "add",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1103",
            "name": "reset_members",
            "docs": [
              "See [`Pallet::reset_members`]."
            ],
            "args": [
              {
                "name": "members",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "1104",
            "name": "change_key",
            "docs": [
              "See [`Pallet::change_key`]."
            ],
            "args": [
              {
                "name": "new",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1105",
            "name": "set_prime",
            "docs": [
              "See [`Pallet::set_prime`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1106",
            "name": "clear_prime",
            "docs": [
              "See [`Pallet::clear_prime`]."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 245
        },
        "events": [
          {
            "lookup": "1100",
            "name": "MemberAdded",
            "docs": [
              "The given member was added; see the transaction for who."
            ],
            "args": null
          },
          {
            "lookup": "1101",
            "name": "MemberRemoved",
            "docs": [
              "The given member was removed; see the transaction for who."
            ],
            "args": null
          },
          {
            "lookup": "1102",
            "name": "MembersSwapped",
            "docs": [
              "Two members were swapped; see the transaction for who."
            ],
            "args": null
          },
          {
            "lookup": "1103",
            "name": "MembersReset",
            "docs": [
              "The membership was reset; see the transaction for who the new set is."
            ],
            "args": null
          },
          {
            "lookup": "1104",
            "name": "KeyChanged",
            "docs": [
              "One of the members' keys changed."
            ],
            "args": null
          },
          {
            "lookup": "1105",
            "name": "Dummy",
            "docs": [
              "Phantom member, never used."
            ],
            "args": null
          }
        ],
        "events_value": {
          "type": 63
        },
        "errors": [
          {
            "name": "AlreadyMember",
            "doc": [
              "Already a member."
            ]
          },
          {
            "name": "NotMember",
            "doc": [
              "Not a member."
            ]
          },
          {
            "name": "TooManyMembers",
            "doc": [
              "Too many members."
            ]
          }
        ],
        "errors_value": {
          "type": 573
        },
        "index": 17
      },
      {
        "name": "Grandpa",
        "prefix": "Grandpa",
        "storage": [
          {
            "name": "State",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_grandpa:StoredState",
              "PlainTypeValue": 574
            },
            "fallback": "0x00",
            "docs": [
              " State of the current authority set."
            ]
          },
          {
            "name": "PendingChange",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_grandpa:StoredPendingChange",
              "PlainTypeValue": 575
            },
            "fallback": "0x00",
            "docs": [
              " Pending change: (signaled at, scheduled change)."
            ]
          },
          {
            "name": "NextForced",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " next block number where we can force a change."
            ]
          },
          {
            "name": "Stalled",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Tuple:U32U32",
              "PlainTypeValue": 94
            },
            "fallback": "0x00",
            "docs": [
              " `true` if we are currently stalled."
            ]
          },
          {
            "name": "CurrentSetId",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 11
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " The number of changes (both in terms of keys and underlying economic responsibilities)",
              " in the \"set\" of Grandpa validators from genesis."
            ]
          },
          {
            "name": "SetIdSession",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U64"
                ],
                "value": "U32",
                "keys_id": 11,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " A mapping from grandpa set ID to the index of the *most recent* session for which its",
              " members were responsible.",
              "",
              " This is only used for validating equivocation proofs. An equivocation proof must",
              " contains a key-ownership proof for a given session, therefore we need a way to tie",
              " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
              " was the owner of a given key on a given session, and what the active set ID was",
              " during that session.",
              "",
              " TWOX-NOTE: `SetId` is not under user control."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1200",
            "name": "report_equivocation",
            "docs": [
              "See [`Pallet::report_equivocation`]."
            ],
            "args": [
              {
                "name": "equivocation_proof",
                "type": "sp_consensus_grandpa:EquivocationProof",
                "type_name": "Box\u003cEquivocationProof\u003cHash, BlockNumberFor\u003e\u003e"
              },
              {
                "name": "key_owner_proof",
                "type": "sp_session:MembershipProof",
                "type_name": "KeyOwnerProof"
              }
            ]
          },
          {
            "lookup": "1201",
            "name": "report_equivocation_unsigned",
            "docs": [
              "See [`Pallet::report_equivocation_unsigned`]."
            ],
            "args": [
              {
                "name": "equivocation_proof",
                "type": "sp_consensus_grandpa:EquivocationProof",
                "type_name": "Box\u003cEquivocationProof\u003cHash, BlockNumberFor\u003e\u003e"
              },
              {
                "name": "key_owner_proof",
                "type": "sp_session:MembershipProof",
                "type_name": "KeyOwnerProof"
              }
            ]
          },
          {
            "lookup": "1202",
            "name": "note_stalled",
            "docs": [
              "See [`Pallet::note_stalled`]."
            ],
            "args": [
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "best_finalized_block_number",
                "type": "U32",
                "type_name": "BlockNumberFor"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 246
        },
        "events": [
          {
            "lookup": "1200",
            "name": "NewAuthorities",
            "docs": [
              "New authority set has been applied."
            ],
            "args": [
              "Vec\u003cTuple:sp_consensus_grandpa:app:PublicU64\u003e"
            ],
            "args_name": [
              "authority_set"
            ],
            "args_type_name": [
              "AuthorityList"
            ]
          },
          {
            "lookup": "1201",
            "name": "Paused",
            "docs": [
              "Current authority set has been paused."
            ],
            "args": null
          },
          {
            "lookup": "1202",
            "name": "Resumed",
            "docs": [
              "Current authority set has been resumed."
            ],
            "args": null
          }
        ],
        "events_value": {
          "type": 64
        },
        "constants": [
          {
            "name": "MaxAuthorities",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " Max Authorities in use"
            ]
          },
          {
            "name": "MaxNominators",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00010000",
            "docs": [
              " The maximum number of nominators for each validator."
            ]
          },
          {
            "name": "MaxSetIdSessionEntries",
            "type": "U64",
            "type_value": 11,
            "constants_value": "c00f000000000000",
            "docs": [
              " The maximum number of entries to keep in the set id to session index mapping.",
              "",
              " Since the `SetIdSession` map is only used for validating equivocations this",
              " value should relate to the bonding duration of whatever staking system is",
              " being used (if any). If equivocation handling is not enabled then this value",
              " can be zero."
            ]
          }
        ],
        "errors": [
          {
            "name": "PauseFailed",
            "doc": [
              "Attempt to signal GRANDPA pause when the authority set isn't live",
              "(either paused or already pending pause)."
            ]
          },
          {
            "name": "ResumeFailed",
            "doc": [
              "Attempt to signal GRANDPA resume when the authority set isn't paused",
              "(either live or already pending resume)."
            ]
          },
          {
            "name": "ChangePending",
            "doc": [
              "Attempt to signal GRANDPA change with one already pending."
            ]
          },
          {
            "name": "TooSoon",
            "doc": [
              "Cannot signal forced change so soon after last."
            ]
          },
          {
            "name": "InvalidKeyOwnershipProof",
            "doc": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "name": "InvalidEquivocationProof",
            "doc": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "name": "DuplicateOffenceReport",
            "doc": [
              "A given equivocation report is valid but already previously reported."
            ]
          }
        ],
        "errors_value": {
          "type": 577
        },
        "index": 18
      },
      {
        "name": "Treasury",
        "prefix": "Treasury",
        "storage": [
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Number of proposals that have been made."
            ]
          },
          {
            "name": "Proposals",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_treasury:Proposal",
                "keys_id": 4,
                "value_id": 578
              }
            },
            "fallback": "0x00",
            "docs": [
              " Proposals that have been made."
            ]
          },
          {
            "name": "Deactivated",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The amount which has been reported as inactive to Currency."
            ]
          },
          {
            "name": "Approvals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU32\u003e",
              "PlainTypeValue": 579
            },
            "fallback": "0x00",
            "docs": [
              " Proposal indices that have been approved but not yet awarded."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1300",
            "name": "propose_spend",
            "docs": [
              "See [`Pallet::propose_spend`]."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1301",
            "name": "reject_proposal",
            "docs": [
              "See [`Pallet::reject_proposal`]."
            ],
            "args": [
              {
                "name": "proposal_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              }
            ]
          },
          {
            "lookup": "1302",
            "name": "approve_proposal",
            "docs": [
              "See [`Pallet::approve_proposal`]."
            ],
            "args": [
              {
                "name": "proposal_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              }
            ]
          },
          {
            "lookup": "1303",
            "name": "spend",
            "docs": [
              "See [`Pallet::spend`]."
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1304",
            "name": "remove_approval",
            "docs": [
              "See [`Pallet::remove_approval`]."
            ],
            "args": [
              {
                "name": "proposal_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 258
        },
        "events": [
          {
            "lookup": "1300",
            "name": "Proposed",
            "docs": [
              "New proposal."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "proposal_index"
            ],
            "args_type_name": [
              "ProposalIndex"
            ]
          },
          {
            "lookup": "1301",
            "name": "Spending",
            "docs": [
              "We have ended a spend period and will now allocate funds."
            ],
            "args": [
              "U128"
            ],
            "args_name": [
              "budget_remaining"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "1302",
            "name": "Awarded",
            "docs": [
              "Some funds have been allocated."
            ],
            "args": [
              "U32",
              "U128",
              "[U8; 32]"
            ],
            "args_name": [
              "proposal_index",
              "award",
              "account"
            ],
            "args_type_name": [
              "ProposalIndex",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "1303",
            "name": "Rejected",
            "docs": [
              "A proposal was rejected; funds were slashed."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "proposal_index",
              "slashed"
            ],
            "args_type_name": [
              "ProposalIndex",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1304",
            "name": "Burnt",
            "docs": [
              "Some of our funds have been burnt."
            ],
            "args": [
              "U128"
            ],
            "args_name": [
              "burnt_funds"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "1305",
            "name": "Rollover",
            "docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ],
            "args": [
              "U128"
            ],
            "args_name": [
              "rollover_balance"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "1306",
            "name": "Deposit",
            "docs": [
              "Some funds have been deposited."
            ],
            "args": [
              "U128"
            ],
            "args_name": [
              "value"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "1307",
            "name": "SpendApproved",
            "docs": [
              "A new spend proposal has been approved."
            ],
            "args": [
              "U32",
              "U128",
              "[U8; 32]"
            ],
            "args_name": [
              "proposal_index",
              "amount",
              "beneficiary"
            ],
            "args_type_name": [
              "ProposalIndex",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "1308",
            "name": "UpdatedInactive",
            "docs": [
              "The inactive funds of the pallet have been updated."
            ],
            "args": [
              "U128",
              "U128"
            ],
            "args_name": [
              "reactivated",
              "deactivated"
            ],
            "args_type_name": [
              "BalanceOf",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 69
        },
        "constants": [
          {
            "name": "ProposalBond",
            "type": "U32",
            "type_value": 434,
            "constants_value": "50c30000",
            "docs": [
              " Fraction of a proposal's value that should be bonded in order to place the proposal.",
              " An accepted proposal gets these back. A rejected proposal does not."
            ]
          },
          {
            "name": "ProposalBondMinimum",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "name": "ProposalBondMaximum",
            "type": "option\u003cU128\u003e",
            "type_value": 331,
            "constants_value": "00",
            "docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "name": "SpendPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80700000",
            "docs": [
              " Period between successive spends."
            ]
          },
          {
            "name": "Burn",
            "type": "U32",
            "type_value": 434,
            "constants_value": "20a10700",
            "docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 580,
            "constants_value": "70792f7472737279",
            "docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "name": "MaxApprovals",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          }
        ],
        "errors": [
          {
            "name": "InsufficientProposersBalance",
            "doc": [
              "Proposer's balance is too low."
            ]
          },
          {
            "name": "InvalidIndex",
            "doc": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "name": "TooManyApprovals",
            "doc": [
              "Too many approvals in the queue."
            ]
          },
          {
            "name": "InsufficientPermission",
            "doc": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "name": "ProposalNotApproved",
            "doc": [
              "Proposal has not been approved."
            ]
          }
        ],
        "errors_value": {
          "type": 581
        },
        "index": 19
      },
      {
        "name": "AssetRate",
        "prefix": "AssetRate",
        "storage": [
          {
            "name": "ConversionRateToNative",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U128",
                "keys_id": 4,
                "value_id": 71
              }
            },
            "fallback": "0x00",
            "docs": [
              " Maps an asset to its fixed point representation in the native balance.",
              "",
              " E.g. `native_amount = asset_amount * ConversionRateToNative::\u003cT\u003e::get(asset_kind)`"
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1400",
            "name": "create",
            "docs": [
              "See [`Pallet::create`]."
            ],
            "args": [
              {
                "name": "asset_kind",
                "type": "U32",
                "type_name": "AssetKind"
              },
              {
                "name": "rate",
                "type": "U128",
                "type_name": "FixedU128"
              }
            ]
          },
          {
            "lookup": "1401",
            "name": "update",
            "docs": [
              "See [`Pallet::update`]."
            ],
            "args": [
              {
                "name": "asset_kind",
                "type": "U32",
                "type_name": "AssetKind"
              },
              {
                "name": "rate",
                "type": "U128",
                "type_name": "FixedU128"
              }
            ]
          },
          {
            "lookup": "1402",
            "name": "remove",
            "docs": [
              "See [`Pallet::remove`]."
            ],
            "args": [
              {
                "name": "asset_kind",
                "type": "U32",
                "type_name": "AssetKind"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 259
        },
        "events": [
          {
            "lookup": "1400",
            "name": "AssetRateCreated",
            "docs": null,
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "asset_kind",
              "rate"
            ],
            "args_type_name": [
              "AssetKind",
              "FixedU128"
            ]
          },
          {
            "lookup": "1401",
            "name": "AssetRateRemoved",
            "docs": null,
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_kind"
            ],
            "args_type_name": [
              "AssetKind"
            ]
          },
          {
            "lookup": "1402",
            "name": "AssetRateUpdated",
            "docs": null,
            "args": [
              "U32",
              "U128",
              "U128"
            ],
            "args_name": [
              "asset_kind",
              "old",
              "new"
            ],
            "args_type_name": [
              "AssetKind",
              "FixedU128",
              "FixedU128"
            ]
          }
        ],
        "events_value": {
          "type": 70
        },
        "errors": [
          {
            "name": "UnknownAssetKind",
            "doc": [
              "The given asset ID is unknown."
            ]
          },
          {
            "name": "AlreadyExists",
            "doc": [
              "The given asset ID already has an assigned conversion rate and cannot be re-created."
            ]
          }
        ],
        "errors_value": {
          "type": 582
        },
        "index": 20
      },
      {
        "name": "Contracts",
        "prefix": "Contracts",
        "storage": [
          {
            "name": "PristineCode",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 12,
                "value_id": 583
              }
            },
            "fallback": "0x00",
            "docs": [
              " A mapping from a contract's code hash to its code."
            ]
          },
          {
            "name": "CodeInfoOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_contracts:wasm:CodeInfo",
                "keys_id": 12,
                "value_id": 584
              }
            },
            "fallback": "0x00",
            "docs": [
              " A mapping from a contract's code hash to its code info."
            ]
          },
          {
            "name": "Nonce",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 11
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " This is a **monotonic** counter incremented on contract instantiation.",
              "",
              " This is used in order to generate unique trie ids for contracts.",
              " The trie id of a new contract is calculated from hash(account_id, nonce).",
              " The nonce is required because otherwise the following sequence would lead to",
              " a possible collision of storage:",
              "",
              " 1. Create a new contract.",
              " 2. Terminate the contract.",
              " 3. Immediately recreate the contract with the same account_id.",
              "",
              " This is bad because the contents of a trie are deleted lazily and there might be",
              " storage of the old instantiation still in it when the new contract is created. Please",
              " note that we can't replace the counter by the block number because the sequence above",
              " can happen in the same block. We also can't keep the account counter in memory only",
              " because storage is the only way to communicate across different extrinsics in the",
              " same block.",
              "",
              " # Note",
              "",
              " Do not use it to determine the number of contracts. It won't be decremented if",
              " a contract is destroyed."
            ]
          },
          {
            "name": "ContractInfoOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_contracts:storage:ContractInfo",
                "keys_id": 0,
                "value_id": 585
              }
            },
            "fallback": "0x00",
            "docs": [
              " The code associated with a given account.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "DeletionQueue",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 113
              }
            },
            "fallback": "0x00",
            "docs": [
              " Evicted contracts that await child trie deletion.",
              "",
              " Child trie deletion is a heavy operation depending on the amount of storage items",
              " stored in said trie. Therefore this operation is performed lazily in `on_idle`."
            ]
          },
          {
            "name": "DeletionQueueCounter",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_contracts:storage:DeletionQueueManager",
              "PlainTypeValue": 590
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " A pair of monotonic counters used to track the latest contract marked for deletion",
              " and the latest deleted contract in queue."
            ]
          },
          {
            "name": "MigrationInProgress",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU8\u003e",
              "PlainTypeValue": 591
            },
            "fallback": "0x00",
            "docs": [
              " A migration can span across multiple blocks. This storage defines a cursor to track the",
              " progress of the migration, enabling us to resume from the last completed position."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1500",
            "name": "call_old_weight",
            "docs": [
              "See [`Pallet::call_old_weight`]."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "compact\u003cU64\u003e",
                "type_name": "OldWeight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1501",
            "name": "instantiate_with_code_old_weight",
            "docs": [
              "See [`Pallet::instantiate_with_code_old_weight`]."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "compact\u003cU64\u003e",
                "type_name": "OldWeight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "code",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "salt",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1502",
            "name": "instantiate_old_weight",
            "docs": [
              "See [`Pallet::instantiate_old_weight`]."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "compact\u003cU64\u003e",
                "type_name": "OldWeight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "code_hash",
                "type": "H256",
                "type_name": "CodeHash"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "salt",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1503",
            "name": "upload_code",
            "docs": [
              "See [`Pallet::upload_code`]."
            ],
            "args": [
              {
                "name": "code",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "determinism",
                "type": "pallet_contracts:wasm:Determinism",
                "type_name": "Determinism"
              }
            ]
          },
          {
            "lookup": "1504",
            "name": "remove_code",
            "docs": [
              "See [`Pallet::remove_code`]."
            ],
            "args": [
              {
                "name": "code_hash",
                "type": "H256",
                "type_name": "CodeHash"
              }
            ]
          },
          {
            "lookup": "1505",
            "name": "set_code",
            "docs": [
              "See [`Pallet::set_code`]."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "code_hash",
                "type": "H256",
                "type_name": "CodeHash"
              }
            ]
          },
          {
            "lookup": "1506",
            "name": "call",
            "docs": [
              "See [`Pallet::call`]."
            ],
            "args": [
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1507",
            "name": "instantiate_with_code",
            "docs": [
              "See [`Pallet::instantiate_with_code`]."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "code",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "salt",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1508",
            "name": "instantiate",
            "docs": [
              "See [`Pallet::instantiate`]."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "gas_limit",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "storage_deposit_limit",
                "type": "option\u003ccompact\u003cU128\u003e\u003e",
                "type_name": "Option\u003c\u003cBalanceOf as codec::HasCompact\u003e::Type\u003e"
              },
              {
                "name": "code_hash",
                "type": "H256",
                "type_name": "CodeHash"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "salt",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1509",
            "name": "migrate",
            "docs": [
              "See [`Pallet::migrate`]."
            ],
            "args": [
              {
                "name": "weight_limit",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 260
        },
        "events": [
          {
            "lookup": "1500",
            "name": "Instantiated",
            "docs": [
              "Contract deployed by address at the specified address."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "deployer",
              "contract"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1501",
            "name": "Terminated",
            "docs": [
              "Contract has been removed.",
              "",
              "# Note",
              "",
              "The only way for a contract to be removed and emitting this event is by calling",
              "`seal_terminate`."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "contract",
              "beneficiary"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1502",
            "name": "CodeStored",
            "docs": [
              "Code with the specified hash has been stored."
            ],
            "args": [
              "H256",
              "U128",
              "[U8; 32]"
            ],
            "args_name": [
              "code_hash",
              "deposit_held",
              "uploader"
            ],
            "args_type_name": [
              "Hash",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "1503",
            "name": "ContractEmitted",
            "docs": [
              "A custom event emitted by the contract."
            ],
            "args": [
              "[U8; 32]",
              "Vec\u003cU8\u003e"
            ],
            "args_name": [
              "contract",
              "data"
            ],
            "args_type_name": [
              "AccountId",
              "Bytes"
            ]
          },
          {
            "lookup": "1504",
            "name": "CodeRemoved",
            "docs": [
              "A code with the specified hash was removed."
            ],
            "args": [
              "H256",
              "U128",
              "[U8; 32]"
            ],
            "args_name": [
              "code_hash",
              "deposit_released",
              "remover"
            ],
            "args_type_name": [
              "Hash",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "1505",
            "name": "ContractCodeUpdated",
            "docs": [
              "A contract's code was updated."
            ],
            "args": [
              "[U8; 32]",
              "H256",
              "H256"
            ],
            "args_name": [
              "contract",
              "new_code_hash",
              "old_code_hash"
            ],
            "args_type_name": [
              "AccountId",
              "Hash",
              "Hash"
            ]
          },
          {
            "lookup": "1506",
            "name": "Called",
            "docs": [
              "A contract was called either by a plain account or another contract.",
              "",
              "# Note",
              "",
              "Please keep in mind that like all events this is only emitted for successful",
              "calls. This is because on failure all storage changes including events are",
              "rolled back."
            ],
            "args": [
              "pallet_contracts:Origin",
              "[U8; 32]"
            ],
            "args_name": [
              "caller",
              "contract"
            ],
            "args_type_name": [
              "Origin",
              "AccountId"
            ]
          },
          {
            "lookup": "1507",
            "name": "DelegateCalled",
            "docs": [
              "A contract delegate called a code hash.",
              "",
              "# Note",
              "",
              "Please keep in mind that like all events this is only emitted for successful",
              "calls. This is because on failure all storage changes including events are",
              "rolled back."
            ],
            "args": [
              "[U8; 32]",
              "H256"
            ],
            "args_name": [
              "contract",
              "code_hash"
            ],
            "args_type_name": [
              "AccountId",
              "CodeHash"
            ]
          },
          {
            "lookup": "1508",
            "name": "StorageDepositTransferredAndHeld",
            "docs": [
              "Some funds have been transferred and held as storage deposit."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "from",
              "to",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1509",
            "name": "StorageDepositTransferredAndReleased",
            "docs": [
              "Some storage deposit funds have been transferred and released."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "from",
              "to",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 72
        },
        "constants": [
          {
            "name": "Schedule",
            "type": "pallet_contracts:schedule:Schedule",
            "type_value": 592,
            "constants_value": "04000000000100000004000080000000100000000010000000010000200000000040000000000008a21400007642150018bebed106f1290ac60907012a126d1a0018a22a0b000cd22b0a000c5e0b15001882962100187e7f63001862891600184256150018c6be1500181e891500186e145700383e64120018550f00de152e00b409050003f2e7cb4d4952027c7600284248ed002806377a1e3127c10900723a0f001c551000ba056b1f9504510800c50e04ca39c54749309eac621f85040004a2bc37078504410404369a4307a5047d0604de97681fa50459080482ee2927612736971a76852a3abe0a643529caa81995ad517d0f00ce8310f8ad2a86449d38d5272d1d002d1e00ba8d180020291100f2e631002055340046a71c0020d11200de091c0020d112001224fe0a3501f27ddf02a8e273630dc1016d5c04f63c0b000c1a0f1300a0dee709000c86d2551fb92846a8271f2128",
            "docs": [
              " Cost schedule and limits."
            ]
          },
          {
            "name": "DepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0060defb740500000000000000000000",
            "docs": [
              " The amount of balance a caller has to pay for each byte of storage.",
              "",
              " # Note",
              "",
              " Changing this value for an existing chain might need a storage migration."
            ]
          },
          {
            "name": "DefaultDepositLimit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c0afbc4f86570000000000000000",
            "docs": [
              " Fallback value to limit the storage deposit if it's not being set by the caller."
            ]
          },
          {
            "name": "DepositPerItem",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00f0ab75a40d00000000000000000000",
            "docs": [
              " The amount of balance a caller has to pay for each storage item.",
              "",
              " # Note",
              "",
              " Changing this value for an existing chain might need a storage migration."
            ]
          },
          {
            "name": "CodeHashLockupDepositPercent",
            "type": "U32",
            "type_value": 48,
            "constants_value": "00a3e111",
            "docs": [
              " The percentage of the storage deposit that should be held for using a code hash.",
              " Instantiating a contract, or calling [`chain_extension::Ext::add_delegate_dependency`]",
              " protects the code from being removed. In order to prevent abuse these actions are",
              " protected with a percentage of the code deposit."
            ]
          },
          {
            "name": "MaxCodeLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00ec0100",
            "docs": [
              " The maximum length of a contract code in bytes.",
              "",
              " The value should be chosen carefully taking into the account the overall memory limit",
              " your runtime has, as well as the [maximum allowed callstack",
              " depth](#associatedtype.CallStack). Look into the `integrity_test()` for some insights."
            ]
          },
          {
            "name": "MaxStorageKeyLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80000000",
            "docs": [
              " The maximum allowable length in bytes for storage keys."
            ]
          },
          {
            "name": "MaxDelegateDependencies",
            "type": "U32",
            "type_value": 4,
            "constants_value": "20000000",
            "docs": [
              " The maximum number of delegate_dependencies that a contract can lock with",
              " [`chain_extension::Ext::add_delegate_dependency`]."
            ]
          },
          {
            "name": "UnsafeUnstableInterface",
            "type": "Bool",
            "type_value": 43,
            "constants_value": "00",
            "docs": [
              " Make contract callable functions marked as `#[unstable]` available.",
              "",
              " Contracts that use `#[unstable]` functions won't be able to be uploaded unless",
              " this is set to `true`. This is only meant for testnets and dev nodes in order to",
              " experiment with new features.",
              "",
              " # Warning",
              "",
              " Do **not** set to `true` on productions chains."
            ]
          },
          {
            "name": "MaxDebugBufferLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00002000",
            "docs": [
              " The maximum length of the debug buffer in bytes."
            ]
          },
          {
            "name": "Environment",
            "type": "pallet_contracts:Environment",
            "type_value": 596,
            "constants_value": "",
            "docs": [
              " Type that bundles together all the runtime configurable interface types.",
              "",
              " This is not a real config. We just mention the type here as constant so that",
              " its type appears in the metadata. Only valid value is `()`."
            ]
          }
        ],
        "errors": [
          {
            "name": "InvalidSchedule",
            "doc": [
              "Invalid schedule supplied, e.g. with zero weight of a basic operation."
            ]
          },
          {
            "name": "InvalidCallFlags",
            "doc": [
              "Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."
            ]
          },
          {
            "name": "OutOfGas",
            "doc": [
              "The executed contract exhausted its gas limit."
            ]
          },
          {
            "name": "OutputBufferTooSmall",
            "doc": [
              "The output buffer supplied to a contract API call was too small."
            ]
          },
          {
            "name": "TransferFailed",
            "doc": [
              "Performing the requested transfer failed. Probably because there isn't enough",
              "free balance in the sender's account."
            ]
          },
          {
            "name": "MaxCallDepthReached",
            "doc": [
              "Performing a call was denied because the calling depth reached the limit",
              "of what is specified in the schedule."
            ]
          },
          {
            "name": "ContractNotFound",
            "doc": [
              "No contract was found at the specified address."
            ]
          },
          {
            "name": "CodeTooLarge",
            "doc": [
              "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
              "current schedule."
            ]
          },
          {
            "name": "CodeNotFound",
            "doc": [
              "No code could be found at the supplied code hash."
            ]
          },
          {
            "name": "CodeInfoNotFound",
            "doc": [
              "No code info could be found at the supplied code hash."
            ]
          },
          {
            "name": "OutOfBounds",
            "doc": [
              "A buffer outside of sandbox memory was passed to a contract API function."
            ]
          },
          {
            "name": "DecodingFailed",
            "doc": [
              "Input passed to a contract API function failed to decode as expected type."
            ]
          },
          {
            "name": "ContractTrapped",
            "doc": [
              "Contract trapped during execution."
            ]
          },
          {
            "name": "ValueTooLarge",
            "doc": [
              "The size defined in `T::MaxValueSize` was exceeded."
            ]
          },
          {
            "name": "TerminatedWhileReentrant",
            "doc": [
              "Termination of a contract is not allowed while the contract is already",
              "on the call stack. Can be triggered by `seal_terminate`."
            ]
          },
          {
            "name": "InputForwarded",
            "doc": [
              "`seal_call` forwarded this contracts input. It therefore is no longer available."
            ]
          },
          {
            "name": "RandomSubjectTooLong",
            "doc": [
              "The subject passed to `seal_random` exceeds the limit."
            ]
          },
          {
            "name": "TooManyTopics",
            "doc": [
              "The amount of topics passed to `seal_deposit_events` exceeds the limit."
            ]
          },
          {
            "name": "NoChainExtension",
            "doc": [
              "The chain does not provide a chain extension. Calling the chain extension results",
              "in this error. Note that this usually  shouldn't happen as deploying such contracts",
              "is rejected."
            ]
          },
          {
            "name": "DuplicateContract",
            "doc": [
              "A contract with the same AccountId already exists."
            ]
          },
          {
            "name": "TerminatedInConstructor",
            "doc": [
              "A contract self destructed in its constructor.",
              "",
              "This can be triggered by a call to `seal_terminate`."
            ]
          },
          {
            "name": "ReentranceDenied",
            "doc": [
              "A call tried to invoke a contract that is flagged as non-reentrant.",
              "The only other cause is that a call from a contract into the runtime tried to call back",
              "into `pallet-contracts`. This would make the whole pallet reentrant with regard to",
              "contract code execution which is not supported."
            ]
          },
          {
            "name": "StorageDepositNotEnoughFunds",
            "doc": [
              "Origin doesn't have enough balance to pay the required storage deposits."
            ]
          },
          {
            "name": "StorageDepositLimitExhausted",
            "doc": [
              "More storage was created than allowed by the storage deposit limit."
            ]
          },
          {
            "name": "CodeInUse",
            "doc": [
              "Code removal was denied because the code is still in use by at least one contract."
            ]
          },
          {
            "name": "ContractReverted",
            "doc": [
              "The contract ran to completion but decided to revert its storage changes.",
              "Please note that this error is only returned from extrinsics. When called directly",
              "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags",
              "to determine whether a reversion has taken place."
            ]
          },
          {
            "name": "CodeRejected",
            "doc": [
              "The contract's code was found to be invalid during validation.",
              "",
              "The most likely cause of this is that an API was used which is not supported by the",
              "node. This happens if an older node is used with a new version of ink!. Try updating",
              "your node to the newest available version.",
              "",
              "A more detailed error can be found on the node console if debug messages are enabled",
              "by supplying `-lruntime::contracts=debug`."
            ]
          },
          {
            "name": "Indeterministic",
            "doc": [
              "An indetermistic code was used in a context where this is not permitted."
            ]
          },
          {
            "name": "MigrationInProgress",
            "doc": [
              "A pending migration needs to complete before the extrinsic can be called."
            ]
          },
          {
            "name": "NoMigrationPerformed",
            "doc": [
              "Migrate dispatch call was attempted but no migration was performed."
            ]
          },
          {
            "name": "MaxDelegateDependenciesReached",
            "doc": [
              "The contract has reached its maximum number of delegate dependencies."
            ]
          },
          {
            "name": "DelegateDependencyNotFound",
            "doc": [
              "The dependency was not found in the contract's delegate dependencies."
            ]
          },
          {
            "name": "DelegateDependencyAlreadyExists",
            "doc": [
              "The contract already depends on the given delegate dependency."
            ]
          },
          {
            "name": "CannotAddSelfAsDelegateDependency",
            "doc": [
              "Can not add a delegate dependency to the code hash of the contract itself."
            ]
          }
        ],
        "errors_value": {
          "type": 604
        },
        "index": 21
      },
      {
        "name": "Sudo",
        "prefix": "Sudo",
        "storage": [
          {
            "name": "Key",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The `AccountId` of the sudo key."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1600",
            "name": "sudo",
            "docs": [
              "See [`Pallet::sudo`]."
            ],
            "args": [
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "1601",
            "name": "sudo_unchecked_weight",
            "docs": [
              "See [`Pallet::sudo_unchecked_weight`]."
            ],
            "args": [
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              },
              {
                "name": "weight",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          },
          {
            "lookup": "1602",
            "name": "set_key",
            "docs": [
              "See [`Pallet::set_key`]."
            ],
            "args": [
              {
                "name": "new",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1603",
            "name": "sudo_as",
            "docs": [
              "See [`Pallet::sudo_as`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 263
        },
        "events": [
          {
            "lookup": "1600",
            "name": "Sudid",
            "docs": [
              "A sudo just took place. \\[result\\]"
            ],
            "args": [
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "sudo_result"
            ],
            "args_type_name": [
              "DispatchResult"
            ]
          },
          {
            "lookup": "1601",
            "name": "KeyChanged",
            "docs": [
              "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
            ],
            "args": [
              "option\u003c[U8; 32]\u003e"
            ],
            "args_name": [
              "old_sudoer"
            ],
            "args_type_name": [
              "Option\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "1602",
            "name": "SudoAsDone",
            "docs": [
              "A sudo just took place. \\[result\\]"
            ],
            "args": [
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "sudo_result"
            ],
            "args_type_name": [
              "DispatchResult"
            ]
          }
        ],
        "events_value": {
          "type": 75
        },
        "errors": [
          {
            "name": "RequireSudo",
            "doc": [
              "Sender must be the Sudo account"
            ]
          }
        ],
        "errors_value": {
          "type": 605
        },
        "index": 22
      },
      {
        "name": "ImOnline",
        "prefix": "ImOnline",
        "storage": [
          {
            "name": "HeartbeatAfter",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The block number after which it's ok to send heartbeats in the current",
              " session.",
              "",
              " At the beginning of each session we set this to a value that should fall",
              " roughly in the middle of the session duration. The idea is to first wait for",
              " the validators to produce a block in the current session, so that the",
              " heartbeat later on will not be necessary.",
              "",
              " This value will only be used as a fallback if we fail to get a proper session",
              " progress estimate from `NextSessionRotation`, as those estimates should be",
              " more accurate then the value we calculate for `HeartbeatAfter`."
            ]
          },
          {
            "name": "Keys",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 606
            },
            "fallback": "0x00",
            "docs": [
              " The current set of keys that may issue a heartbeat."
            ]
          },
          {
            "name": "ReceivedHeartbeats",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "Bool",
                "keys_id": 94,
                "value_id": 43
              }
            },
            "fallback": "0x00",
            "docs": [
              " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex`."
            ]
          },
          {
            "name": "AuthoredBlocks",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 528,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " For each session index, we keep a mapping of `ValidatorId\u003cT\u003e` to the",
              " number of blocks authored by the given authority."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1700",
            "name": "heartbeat",
            "docs": [
              "See [`Pallet::heartbeat`]."
            ],
            "args": [
              {
                "name": "heartbeat",
                "type": "pallet_im_online:Heartbeat",
                "type_name": "Heartbeat\u003cBlockNumberFor\u003e"
              },
              {
                "name": "signature",
                "type": "[U8; 64]",
                "type_name": "\u003cAuthorityId as RuntimeAppPublic\u003e::Signature"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 264
        },
        "events": [
          {
            "lookup": "1700",
            "name": "HeartbeatReceived",
            "docs": [
              "A new heartbeat was received from `AuthorityId`."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "authority_id"
            ],
            "args_type_name": [
              "AuthorityId"
            ]
          },
          {
            "lookup": "1701",
            "name": "AllGood",
            "docs": [
              "At the end of the session, no offence was committed."
            ],
            "args": null
          },
          {
            "lookup": "1702",
            "name": "SomeOffline",
            "docs": [
              "At the end of the session, at least one validator was found to be offline."
            ],
            "args": [
              "Vec\u003cTuple:[U8; 32]pallet_staking:Exposure\u003e"
            ],
            "args_name": [
              "offline"
            ],
            "args_type_name": [
              "Vec\u003cIdentificationTuple\u003e"
            ]
          }
        ],
        "events_value": {
          "type": 76
        },
        "constants": [
          {
            "name": "UnsignedPriority",
            "type": "U64",
            "type_value": 11,
            "constants_value": "ffffffffffffffff",
            "docs": [
              " A configuration for base priority of unsigned transactions.",
              "",
              " This is exposed so that it can be tuned for particular runtime, when",
              " multiple pallets send unsigned transactions."
            ]
          }
        ],
        "errors": [
          {
            "name": "InvalidKey",
            "doc": [
              "Non existent public key."
            ]
          },
          {
            "name": "DuplicatedHeartbeat",
            "doc": [
              "Duplicated heartbeat."
            ]
          }
        ],
        "errors_value": {
          "type": 608
        },
        "index": 23
      },
      {
        "name": "AuthorityDiscovery",
        "prefix": "AuthorityDiscovery",
        "storage": [
          {
            "name": "Keys",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 609
            },
            "fallback": "0x00",
            "docs": [
              " Keys of the current authority set."
            ]
          },
          {
            "name": "NextKeys",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 609
            },
            "fallback": "0x00",
            "docs": [
              " Keys of the next authority set."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 24
      },
      {
        "name": "Offences",
        "prefix": "Offences",
        "storage": [
          {
            "name": "Reports",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "sp_staking:offence:OffenceDetails",
                "keys_id": 12,
                "value_id": 611
              }
            },
            "fallback": "0x00",
            "docs": [
              " The primary structure that holds all offence records keyed by report identifiers."
            ]
          },
          {
            "name": "ConcurrentReportsIndex",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 16]",
                  "Vec\u003cU8\u003e"
                ],
                "value": "Vec\u003cH256\u003e",
                "keys_id": 612,
                "value_id": 455
              }
            },
            "fallback": "0x00",
            "docs": [
              " A vector of reports of the same kind that happened at the same time slot."
            ]
          }
        ],
        "events": [
          {
            "lookup": "1900",
            "name": "Offence",
            "docs": [
              "There is an offence reported of the given `kind` happened at the `session_index` and",
              "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
              "\\[kind, timeslot\\]."
            ],
            "args": [
              "[U8; 16]",
              "Vec\u003cU8\u003e"
            ],
            "args_name": [
              "kind",
              "timeslot"
            ],
            "args_type_name": [
              "Kind",
              "OpaqueTimeSlot"
            ]
          }
        ],
        "events_value": {
          "type": 85
        },
        "errors": null,
        "errors_value": null,
        "index": 25
      },
      {
        "name": "Historical",
        "prefix": "",
        "storage": null,
        "errors": null,
        "errors_value": null,
        "index": 26
      },
      {
        "name": "RandomnessCollectiveFlip",
        "prefix": "RandomnessCollectiveFlip",
        "storage": [
          {
            "name": "RandomMaterial",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cH256\u003e",
              "PlainTypeValue": 613
            },
            "fallback": "0x00",
            "docs": [
              " Series of block headers from the last 81 blocks that acts as random seed material. This",
              " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
              " the oldest hash."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 27
      },
      {
        "name": "Identity",
        "prefix": "Identity",
        "storage": [
          {
            "name": "IdentityOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_identity:types:Registration",
                "keys_id": 0,
                "value_id": 614
              }
            },
            "fallback": "0x00",
            "docs": [
              " Information that is pertinent to identify the entity behind an account.",
              "",
              "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
            ]
          },
          {
            "name": "SuperOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:[U8; 32]pallet_identity:types:Data",
                "keys_id": 0,
                "value_id": 305
              }
            },
            "fallback": "0x00",
            "docs": [
              " The super-identity of an alternative \"sub\" identity together with its name, within that",
              " context. If the account is not some other account's sub-identity, then just `None`."
            ]
          },
          {
            "name": "SubsOf",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:U128bounded_collections:bounded_vec:BoundedVec@619",
                "keys_id": 0,
                "value_id": 618
              }
            },
            "fallback": "0x0000000000000000000000000000000000",
            "docs": [
              " Alternative \"sub\" identities of this account.",
              "",
              " The first item is the deposit, the second is a vector of the accounts.",
              "",
              "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
            ]
          },
          {
            "name": "Registrars",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003coption\u003cpallet_identity:types:RegistrarInfo\u003e\u003e",
              "PlainTypeValue": 620
            },
            "fallback": "0x00",
            "docs": [
              " The set of registrars. Not expected to get very big as can only be added through a",
              " special origin (likely a council motion).",
              "",
              " The index into this can be cast to `RegistrarIndex` to get a valid value."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1c00",
            "name": "add_registrar",
            "docs": [
              "See [`Pallet::add_registrar`]."
            ],
            "args": [
              {
                "name": "account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1c01",
            "name": "set_identity",
            "docs": [
              "See [`Pallet::set_identity`]."
            ],
            "args": [
              {
                "name": "info",
                "type": "pallet_identity:types:IdentityInfo",
                "type_name": "Box\u003cIdentityInfo\u003cMaxAdditionalFields\u003e\u003e"
              }
            ]
          },
          {
            "lookup": "1c02",
            "name": "set_subs",
            "docs": [
              "See [`Pallet::set_subs`]."
            ],
            "args": [
              {
                "name": "subs",
                "type": "Vec\u003cTuple:[U8; 32]pallet_identity:types:Data\u003e",
                "type_name": "Vec\u003c(AccountId, Data)\u003e"
              }
            ]
          },
          {
            "lookup": "1c03",
            "name": "clear_identity",
            "docs": [
              "See [`Pallet::clear_identity`]."
            ],
            "args": null
          },
          {
            "lookup": "1c04",
            "name": "request_judgement",
            "docs": [
              "See [`Pallet::request_judgement`]."
            ],
            "args": [
              {
                "name": "reg_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "RegistrarIndex"
              },
              {
                "name": "max_fee",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "1c05",
            "name": "cancel_request",
            "docs": [
              "See [`Pallet::cancel_request`]."
            ],
            "args": [
              {
                "name": "reg_index",
                "type": "U32",
                "type_name": "RegistrarIndex"
              }
            ]
          },
          {
            "lookup": "1c06",
            "name": "set_fee",
            "docs": [
              "See [`Pallet::set_fee`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "RegistrarIndex"
              },
              {
                "name": "fee",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "1c07",
            "name": "set_account_id",
            "docs": [
              "See [`Pallet::set_account_id`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "RegistrarIndex"
              },
              {
                "name": "new",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1c08",
            "name": "set_fields",
            "docs": [
              "See [`Pallet::set_fields`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "RegistrarIndex"
              },
              {
                "name": "fields",
                "type": "U64",
                "type_name": "IdentityFields"
              }
            ]
          },
          {
            "lookup": "1c09",
            "name": "provide_judgement",
            "docs": [
              "See [`Pallet::provide_judgement`]."
            ],
            "args": [
              {
                "name": "reg_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "RegistrarIndex"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "judgement",
                "type": "pallet_identity:types:Judgement",
                "type_name": "Judgement\u003cBalanceOf\u003e"
              },
              {
                "name": "identity",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "1c0a",
            "name": "kill_identity",
            "docs": [
              "See [`Pallet::kill_identity`]."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1c0b",
            "name": "add_sub",
            "docs": [
              "See [`Pallet::add_sub`]."
            ],
            "args": [
              {
                "name": "sub",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "data",
                "type": "pallet_identity:types:Data",
                "type_name": "Data"
              }
            ]
          },
          {
            "lookup": "1c0c",
            "name": "rename_sub",
            "docs": [
              "See [`Pallet::rename_sub`]."
            ],
            "args": [
              {
                "name": "sub",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "data",
                "type": "pallet_identity:types:Data",
                "type_name": "Data"
              }
            ]
          },
          {
            "lookup": "1c0d",
            "name": "remove_sub",
            "docs": [
              "See [`Pallet::remove_sub`]."
            ],
            "args": [
              {
                "name": "sub",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1c0e",
            "name": "quit_sub",
            "docs": [
              "See [`Pallet::quit_sub`]."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 268
        },
        "events": [
          {
            "lookup": "1c00",
            "name": "IdentitySet",
            "docs": [
              "A name was set or reset (which will remove all judgements)."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "who"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1c01",
            "name": "IdentityCleared",
            "docs": [
              "A name was cleared, and the given balance returned."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "deposit"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1c02",
            "name": "IdentityKilled",
            "docs": [
              "A name was removed and the given balance slashed."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "deposit"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1c03",
            "name": "JudgementRequested",
            "docs": [
              "A judgement was asked from a registrar."
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_name": [
              "who",
              "registrar_index"
            ],
            "args_type_name": [
              "AccountId",
              "RegistrarIndex"
            ]
          },
          {
            "lookup": "1c04",
            "name": "JudgementUnrequested",
            "docs": [
              "A judgement request was retracted."
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_name": [
              "who",
              "registrar_index"
            ],
            "args_type_name": [
              "AccountId",
              "RegistrarIndex"
            ]
          },
          {
            "lookup": "1c05",
            "name": "JudgementGiven",
            "docs": [
              "A judgement was given by a registrar."
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_name": [
              "target",
              "registrar_index"
            ],
            "args_type_name": [
              "AccountId",
              "RegistrarIndex"
            ]
          },
          {
            "lookup": "1c06",
            "name": "RegistrarAdded",
            "docs": [
              "A registrar was added."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "registrar_index"
            ],
            "args_type_name": [
              "RegistrarIndex"
            ]
          },
          {
            "lookup": "1c07",
            "name": "SubIdentityAdded",
            "docs": [
              "A sub-identity was added to an identity and the deposit paid."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "sub",
              "main",
              "deposit"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1c08",
            "name": "SubIdentityRemoved",
            "docs": [
              "A sub-identity was removed from an identity and the deposit freed."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "sub",
              "main",
              "deposit"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1c09",
            "name": "SubIdentityRevoked",
            "docs": [
              "A sub-identity was cleared, and the given deposit repatriated from the",
              "main identity account to the sub-identity account."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "sub",
              "main",
              "deposit"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 87
        },
        "constants": [
          {
            "name": "BasicDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The amount held on deposit for a registered identity"
            ]
          },
          {
            "name": "FieldDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00a031a95fe300000000000000000000",
            "docs": [
              " The amount held on deposit per additional field for a registered identity."
            ]
          },
          {
            "name": "SubAccountDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080f420e6b500000000000000000000",
            "docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "name": "MaxSubAccounts",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "name": "MaxAdditionalFields",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
              " required to access an identity, but can be pretty high."
            ]
          },
          {
            "name": "MaxRegistrars",
            "type": "U32",
            "type_value": 4,
            "constants_value": "14000000",
            "docs": [
              " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          }
        ],
        "errors": [
          {
            "name": "TooManySubAccounts",
            "doc": [
              "Too many subs-accounts."
            ]
          },
          {
            "name": "NotFound",
            "doc": [
              "Account isn't found."
            ]
          },
          {
            "name": "NotNamed",
            "doc": [
              "Account isn't named."
            ]
          },
          {
            "name": "EmptyIndex",
            "doc": [
              "Empty index."
            ]
          },
          {
            "name": "FeeChanged",
            "doc": [
              "Fee is changed."
            ]
          },
          {
            "name": "NoIdentity",
            "doc": [
              "No identity found."
            ]
          },
          {
            "name": "StickyJudgement",
            "doc": [
              "Sticky judgement."
            ]
          },
          {
            "name": "JudgementGiven",
            "doc": [
              "Judgement given."
            ]
          },
          {
            "name": "InvalidJudgement",
            "doc": [
              "Invalid judgement."
            ]
          },
          {
            "name": "InvalidIndex",
            "doc": [
              "The index is invalid."
            ]
          },
          {
            "name": "InvalidTarget",
            "doc": [
              "The target is invalid."
            ]
          },
          {
            "name": "TooManyFields",
            "doc": [
              "Too many additional fields."
            ]
          },
          {
            "name": "TooManyRegistrars",
            "doc": [
              "Maximum amount of registrars reached. Cannot add any more."
            ]
          },
          {
            "name": "AlreadyClaimed",
            "doc": [
              "Account ID is already named."
            ]
          },
          {
            "name": "NotSub",
            "doc": [
              "Sender is not a sub-account."
            ]
          },
          {
            "name": "NotOwned",
            "doc": [
              "Sub-account isn't owned by sender."
            ]
          },
          {
            "name": "JudgementForDifferentIdentity",
            "doc": [
              "The provided judgement was for a different identity."
            ]
          },
          {
            "name": "JudgementPaymentFailed",
            "doc": [
              "Error that occurs when there is an issue paying for judgement."
            ]
          }
        ],
        "errors_value": {
          "type": 624
        },
        "index": 28
      },
      {
        "name": "Society",
        "prefix": "Society",
        "storage": [
          {
            "name": "Parameters",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_society:GroupParams",
              "PlainTypeValue": 90
            },
            "fallback": "0x00",
            "docs": [
              " The max number of members for the society at one time."
            ]
          },
          {
            "name": "Pot",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " Amount of our account balance that is specifically for the next round's bid(s)."
            ]
          },
          {
            "name": "Founder",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The first member."
            ]
          },
          {
            "name": "Head",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The most primary from the most recently approved rank 0 members in the society."
            ]
          },
          {
            "name": "Rules",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "H256",
              "PlainTypeValue": 12
            },
            "fallback": "0x00",
            "docs": [
              " A hash of the rules of this society concerning membership. Can only be set once and",
              " only by the founder."
            ]
          },
          {
            "name": "Members",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_society:MemberRecord",
                "keys_id": 0,
                "value_id": 625
              }
            },
            "fallback": "0x00",
            "docs": [
              " The current members and their rank. Doesn't include `SuspendedMembers`."
            ]
          },
          {
            "name": "Payouts",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_society:PayoutRecord",
                "keys_id": 0,
                "value_id": 628
              }
            },
            "fallback": "0x0000000000000000000000000000000000",
            "docs": [
              " Information regarding rank-0 payouts, past and future."
            ]
          },
          {
            "name": "MemberCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of items in `Members` currently. (Doesn't include `SuspendedMembers`.)"
            ]
          },
          {
            "name": "MemberByIndex",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "[U8; 32]",
                "keys_id": 4,
                "value_id": 0
              }
            },
            "fallback": "0x00",
            "docs": [
              " The current items in `Members` keyed by their unique index. Keys are densely populated",
              " `0..MemberCount` (does not include `MemberCount`)."
            ]
          },
          {
            "name": "SuspendedMembers",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_society:MemberRecord",
                "keys_id": 0,
                "value_id": 625
              }
            },
            "fallback": "0x00",
            "docs": [
              " The set of suspended members, with their old membership record."
            ]
          },
          {
            "name": "RoundCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of rounds which have passed."
            ]
          },
          {
            "name": "Bids",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_society:Bid\u003e",
              "PlainTypeValue": 632
            },
            "fallback": "0x00",
            "docs": [
              " The current bids, stored ordered by the value of the bid."
            ]
          },
          {
            "name": "Candidates",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_society:Candidacy",
                "keys_id": 0,
                "value_id": 636
              }
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "Skeptic",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The current skeptic."
            ]
          },
          {
            "name": "Votes",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "[U8; 32]"
                ],
                "value": "pallet_society:Vote",
                "keys_id": 638,
                "value_id": 639
              }
            },
            "fallback": "0x00",
            "docs": [
              " Double map from Candidate -\u003e Voter -\u003e (Maybe) Vote."
            ]
          },
          {
            "name": "VoteClearCursor",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 0,
                "value_id": 640
              }
            },
            "fallback": "0x00",
            "docs": [
              " Clear-cursor for Vote, map from Candidate -\u003e (Maybe) Cursor."
            ]
          },
          {
            "name": "NextHead",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_society:IntakeRecord",
              "PlainTypeValue": 641
            },
            "fallback": "0x00",
            "docs": [
              " At the end of the claim period, this contains the most recently approved members (along with",
              " their bid and round ID) who is from the most recent round with the lowest bid. They will",
              " become the new `Head`."
            ]
          },
          {
            "name": "ChallengeRoundCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of challenge rounds there have been. Used to identify stale DefenderVotes."
            ]
          },
          {
            "name": "Defending",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Tuple:[U8; 32][U8; 32]pallet_society:Tally",
              "PlainTypeValue": 642
            },
            "fallback": "0x00",
            "docs": [
              " The defending member currently being challenged, along with a running tally of votes."
            ]
          },
          {
            "name": "DefenderVotes",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_society:Vote",
                "keys_id": 528,
                "value_id": 639
              }
            },
            "fallback": "0x00",
            "docs": [
              " Votes for the defender, keyed by challenge round."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1d00",
            "name": "bid",
            "docs": [
              "See [`Pallet::bid`]."
            ],
            "args": [
              {
                "name": "value",
                "type": "U128",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "1d01",
            "name": "unbid",
            "docs": [
              "See [`Pallet::unbid`]."
            ],
            "args": null
          },
          {
            "lookup": "1d02",
            "name": "vouch",
            "docs": [
              "See [`Pallet::vouch`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "value",
                "type": "U128",
                "type_name": "BalanceOf"
              },
              {
                "name": "tip",
                "type": "U128",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "1d03",
            "name": "unvouch",
            "docs": [
              "See [`Pallet::unvouch`]."
            ],
            "args": null
          },
          {
            "lookup": "1d04",
            "name": "vote",
            "docs": [
              "See [`Pallet::vote`]."
            ],
            "args": [
              {
                "name": "candidate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "1d05",
            "name": "defender_vote",
            "docs": [
              "See [`Pallet::defender_vote`]."
            ],
            "args": [
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "1d06",
            "name": "payout",
            "docs": [
              "See [`Pallet::payout`]."
            ],
            "args": null
          },
          {
            "lookup": "1d07",
            "name": "waive_repay",
            "docs": [
              "See [`Pallet::waive_repay`]."
            ],
            "args": [
              {
                "name": "amount",
                "type": "U128",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "1d08",
            "name": "found_society",
            "docs": [
              "See [`Pallet::found_society`]."
            ],
            "args": [
              {
                "name": "founder",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "max_members",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "max_intake",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "max_strikes",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "candidate_deposit",
                "type": "U128",
                "type_name": "BalanceOf"
              },
              {
                "name": "rules",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "1d09",
            "name": "dissolve",
            "docs": [
              "See [`Pallet::dissolve`]."
            ],
            "args": null
          },
          {
            "lookup": "1d0a",
            "name": "judge_suspended_member",
            "docs": [
              "See [`Pallet::judge_suspended_member`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "forgive",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "1d0b",
            "name": "set_parameters",
            "docs": [
              "See [`Pallet::set_parameters`]."
            ],
            "args": [
              {
                "name": "max_members",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "max_intake",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "max_strikes",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "candidate_deposit",
                "type": "U128",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "1d0c",
            "name": "punish_skeptic",
            "docs": [
              "See [`Pallet::punish_skeptic`]."
            ],
            "args": null
          },
          {
            "lookup": "1d0d",
            "name": "claim_membership",
            "docs": [
              "See [`Pallet::claim_membership`]."
            ],
            "args": null
          },
          {
            "lookup": "1d0e",
            "name": "bestow_membership",
            "docs": [
              "See [`Pallet::bestow_membership`]."
            ],
            "args": [
              {
                "name": "candidate",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "1d0f",
            "name": "kick_candidate",
            "docs": [
              "See [`Pallet::kick_candidate`]."
            ],
            "args": [
              {
                "name": "candidate",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "1d10",
            "name": "resign_candidacy",
            "docs": [
              "See [`Pallet::resign_candidacy`]."
            ],
            "args": null
          },
          {
            "lookup": "1d11",
            "name": "drop_candidate",
            "docs": [
              "See [`Pallet::drop_candidate`]."
            ],
            "args": [
              {
                "name": "candidate",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "1d12",
            "name": "cleanup_candidacy",
            "docs": [
              "See [`Pallet::cleanup_candidacy`]."
            ],
            "args": [
              {
                "name": "candidate",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "max",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "1d13",
            "name": "cleanup_challenge",
            "docs": [
              "See [`Pallet::cleanup_challenge`]."
            ],
            "args": [
              {
                "name": "challenge_round",
                "type": "U32",
                "type_name": "RoundIndex"
              },
              {
                "name": "max",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 309
        },
        "events": [
          {
            "lookup": "1d00",
            "name": "Founded",
            "docs": [
              "The society is founded by the given identity."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "founder"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1d01",
            "name": "Bid",
            "docs": [
              "A membership bid just happened. The given account is the candidate's ID and their offer",
              "is the second."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "candidate_id",
              "offer"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1d02",
            "name": "Vouch",
            "docs": [
              "A membership bid just happened by vouching. The given account is the candidate's ID and",
              "their offer is the second. The vouching party is the third."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "[U8; 32]"
            ],
            "args_name": [
              "candidate_id",
              "offer",
              "vouching"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "1d03",
            "name": "AutoUnbid",
            "docs": [
              "A candidate was dropped (due to an excess of bids in the system)."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "candidate"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1d04",
            "name": "Unbid",
            "docs": [
              "A candidate was dropped (by their request)."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "candidate"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1d05",
            "name": "Unvouch",
            "docs": [
              "A candidate was dropped (by request of who vouched for them)."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "candidate"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1d06",
            "name": "Inducted",
            "docs": [
              "A group of candidates have been inducted. The batch's primary is the first value, the",
              "batch in full is the second."
            ],
            "args": [
              "[U8; 32]",
              "Vec\u003c[U8; 32]\u003e"
            ],
            "args_name": [
              "primary",
              "candidates"
            ],
            "args_type_name": [
              "AccountId",
              "Vec\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "1d07",
            "name": "SuspendedMemberJudgement",
            "docs": [
              "A suspended member has been judged."
            ],
            "args": [
              "[U8; 32]",
              "Bool"
            ],
            "args_name": [
              "who",
              "judged"
            ],
            "args_type_name": [
              "AccountId",
              "bool"
            ]
          },
          {
            "lookup": "1d08",
            "name": "CandidateSuspended",
            "docs": [
              "A candidate has been suspended"
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "candidate"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1d09",
            "name": "MemberSuspended",
            "docs": [
              "A member has been suspended"
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "member"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1d0a",
            "name": "Challenged",
            "docs": [
              "A member has been challenged"
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "member"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1d0b",
            "name": "Vote",
            "docs": [
              "A vote has been placed"
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "Bool"
            ],
            "args_name": [
              "candidate",
              "voter",
              "vote"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "bool"
            ]
          },
          {
            "lookup": "1d0c",
            "name": "DefenderVote",
            "docs": [
              "A vote has been placed for a defending member"
            ],
            "args": [
              "[U8; 32]",
              "Bool"
            ],
            "args_name": [
              "voter",
              "vote"
            ],
            "args_type_name": [
              "AccountId",
              "bool"
            ]
          },
          {
            "lookup": "1d0d",
            "name": "NewParams",
            "docs": [
              "A new set of \\[params\\] has been set for the group."
            ],
            "args": [
              "pallet_society:GroupParams"
            ],
            "args_name": [
              "params"
            ],
            "args_type_name": [
              "GroupParamsFor"
            ]
          },
          {
            "lookup": "1d0e",
            "name": "Unfounded",
            "docs": [
              "Society is unfounded."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "founder"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1d0f",
            "name": "Deposit",
            "docs": [
              "Some funds were deposited into the society account."
            ],
            "args": [
              "U128"
            ],
            "args_name": [
              "value"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "1d10",
            "name": "Elevated",
            "docs": [
              "A \\[member\\] got elevated to \\[rank\\]."
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_name": [
              "member",
              "rank"
            ],
            "args_type_name": [
              "AccountId",
              "Rank"
            ]
          }
        ],
        "events_value": {
          "type": 88
        },
        "constants": [
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 580,
            "constants_value": "70792f736f636965",
            "docs": [
              " The societies's pallet id"
            ]
          },
          {
            "name": "GraceStrikes",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The maximum number of strikes before a member gets funds slashed."
            ]
          },
          {
            "name": "PeriodSpend",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c52ebca2b1000000000000000000",
            "docs": [
              " The amount of incentive paid within each period. Doesn't include VoterTip."
            ]
          },
          {
            "name": "VotingPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00770100",
            "docs": [
              " The number of blocks on which new candidates should be voted on. Together with",
              " `ClaimPeriod`, this sums to the number of blocks between candidate intake periods."
            ]
          },
          {
            "name": "ClaimPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00770100",
            "docs": [
              " The number of blocks on which new candidates can claim their membership and be the",
              " named head."
            ]
          },
          {
            "name": "MaxLockDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "009cda01",
            "docs": [
              " The maximum duration of the payout lock."
            ]
          },
          {
            "name": "ChallengePeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80130300",
            "docs": [
              " The number of blocks between membership challenges."
            ]
          },
          {
            "name": "MaxPayouts",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The maximum number of payouts a member may have waiting unclaimed."
            ]
          },
          {
            "name": "MaxBids",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The maximum number of bids at once."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotMember",
            "doc": [
              "User is not a member."
            ]
          },
          {
            "name": "AlreadyMember",
            "doc": [
              "User is already a member."
            ]
          },
          {
            "name": "Suspended",
            "doc": [
              "User is suspended."
            ]
          },
          {
            "name": "NotSuspended",
            "doc": [
              "User is not suspended."
            ]
          },
          {
            "name": "NoPayout",
            "doc": [
              "Nothing to payout."
            ]
          },
          {
            "name": "AlreadyFounded",
            "doc": [
              "Society already founded."
            ]
          },
          {
            "name": "InsufficientPot",
            "doc": [
              "Not enough in pot to accept candidate."
            ]
          },
          {
            "name": "AlreadyVouching",
            "doc": [
              "Member is already vouching or banned from vouching again."
            ]
          },
          {
            "name": "NotVouchingOnBidder",
            "doc": [
              "Member is not vouching."
            ]
          },
          {
            "name": "Head",
            "doc": [
              "Cannot remove the head of the chain."
            ]
          },
          {
            "name": "Founder",
            "doc": [
              "Cannot remove the founder."
            ]
          },
          {
            "name": "AlreadyBid",
            "doc": [
              "User has already made a bid."
            ]
          },
          {
            "name": "AlreadyCandidate",
            "doc": [
              "User is already a candidate."
            ]
          },
          {
            "name": "NotCandidate",
            "doc": [
              "User is not a candidate."
            ]
          },
          {
            "name": "MaxMembers",
            "doc": [
              "Too many members in the society."
            ]
          },
          {
            "name": "NotFounder",
            "doc": [
              "The caller is not the founder."
            ]
          },
          {
            "name": "NotHead",
            "doc": [
              "The caller is not the head."
            ]
          },
          {
            "name": "NotApproved",
            "doc": [
              "The membership cannot be claimed as the candidate was not clearly approved."
            ]
          },
          {
            "name": "NotRejected",
            "doc": [
              "The candidate cannot be kicked as the candidate was not clearly rejected."
            ]
          },
          {
            "name": "Approved",
            "doc": [
              "The candidacy cannot be dropped as the candidate was clearly approved."
            ]
          },
          {
            "name": "Rejected",
            "doc": [
              "The candidacy cannot be bestowed as the candidate was clearly rejected."
            ]
          },
          {
            "name": "InProgress",
            "doc": [
              "The candidacy cannot be concluded as the voting is still in progress."
            ]
          },
          {
            "name": "TooEarly",
            "doc": [
              "The candidacy cannot be pruned until a full additional intake period has passed."
            ]
          },
          {
            "name": "Voted",
            "doc": [
              "The skeptic already voted."
            ]
          },
          {
            "name": "Expired",
            "doc": [
              "The skeptic need not vote on candidates from expired rounds."
            ]
          },
          {
            "name": "NotBidder",
            "doc": [
              "User is not a bidder."
            ]
          },
          {
            "name": "NoDefender",
            "doc": [
              "There is no defender currently."
            ]
          },
          {
            "name": "NotGroup",
            "doc": [
              "Group doesn't exist."
            ]
          },
          {
            "name": "AlreadyElevated",
            "doc": [
              "The member is already elevated to this rank."
            ]
          },
          {
            "name": "AlreadyPunished",
            "doc": [
              "The skeptic has already been punished for this offence."
            ]
          },
          {
            "name": "InsufficientFunds",
            "doc": [
              "Funds are insufficient to pay off society debts."
            ]
          },
          {
            "name": "NoVotes",
            "doc": [
              "The candidate/defender has no stale votes to remove."
            ]
          }
        ],
        "errors_value": {
          "type": 643
        },
        "index": 29
      },
      {
        "name": "Recovery",
        "prefix": "Recovery",
        "storage": [
          {
            "name": "Recoverable",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_recovery:RecoveryConfig",
                "keys_id": 0,
                "value_id": 644
              }
            },
            "fallback": "0x00",
            "docs": [
              " The set of recoverable accounts and their recovery configuration."
            ]
          },
          {
            "name": "ActiveRecoveries",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "[U8; 32]"
                ],
                "value": "pallet_recovery:ActiveRecovery",
                "keys_id": 638,
                "value_id": 646
              }
            },
            "fallback": "0x00",
            "docs": [
              " Active recovery attempts.",
              "",
              " First account is the account to be recovered, and the second account",
              " is the user trying to recover the account."
            ]
          },
          {
            "name": "Proxy",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "[U8; 32]",
                "keys_id": 0,
                "value_id": 0
              }
            },
            "fallback": "0x00",
            "docs": [
              " The list of allowed proxy accounts.",
              "",
              " Map from the user who can access it to the recovered account."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1e00",
            "name": "as_recovered",
            "docs": [
              "See [`Pallet::as_recovered`]."
            ],
            "args": [
              {
                "name": "account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "1e01",
            "name": "set_recovered",
            "docs": [
              "See [`Pallet::set_recovered`]."
            ],
            "args": [
              {
                "name": "lost",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "rescuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1e02",
            "name": "create_recovery",
            "docs": [
              "See [`Pallet::create_recovery`]."
            ],
            "args": [
              {
                "name": "friends",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "threshold",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "delay_period",
                "type": "U32",
                "type_name": "BlockNumberFor"
              }
            ]
          },
          {
            "lookup": "1e03",
            "name": "initiate_recovery",
            "docs": [
              "See [`Pallet::initiate_recovery`]."
            ],
            "args": [
              {
                "name": "account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1e04",
            "name": "vouch_recovery",
            "docs": [
              "See [`Pallet::vouch_recovery`]."
            ],
            "args": [
              {
                "name": "lost",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "rescuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1e05",
            "name": "claim_recovery",
            "docs": [
              "See [`Pallet::claim_recovery`]."
            ],
            "args": [
              {
                "name": "account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1e06",
            "name": "close_recovery",
            "docs": [
              "See [`Pallet::close_recovery`]."
            ],
            "args": [
              {
                "name": "rescuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1e07",
            "name": "remove_recovery",
            "docs": [
              "See [`Pallet::remove_recovery`]."
            ],
            "args": null
          },
          {
            "lookup": "1e08",
            "name": "cancel_recovered",
            "docs": [
              "See [`Pallet::cancel_recovered`]."
            ],
            "args": [
              {
                "name": "account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 310
        },
        "events": [
          {
            "lookup": "1e00",
            "name": "RecoveryCreated",
            "docs": [
              "A recovery process has been set up for an account."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "account"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "1e01",
            "name": "RecoveryInitiated",
            "docs": [
              "A recovery process has been initiated for lost account by rescuer account."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "lost_account",
              "rescuer_account"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1e02",
            "name": "RecoveryVouched",
            "docs": [
              "A recovery process for lost account by rescuer account has been vouched for by sender."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "lost_account",
              "rescuer_account",
              "sender"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1e03",
            "name": "RecoveryClosed",
            "docs": [
              "A recovery process for lost account by rescuer account has been closed."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "lost_account",
              "rescuer_account"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1e04",
            "name": "AccountRecovered",
            "docs": [
              "Lost account has been successfully recovered by rescuer account."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "lost_account",
              "rescuer_account"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "1e05",
            "name": "RecoveryRemoved",
            "docs": [
              "A recovery process has been removed for an account."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "lost_account"
            ],
            "args_type_name": [
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 91
        },
        "constants": [
          {
            "name": "ConfigDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00406352bfc601000000000000000000",
            "docs": [
              " The base amount of currency needed to reserve for creating a recovery configuration.",
              "",
              " This is held for an additional storage item whose value size is",
              " `2 + sizeof(BlockNumber, Balance)` bytes."
            ]
          },
          {
            "name": "FriendDepositFactor",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00203d88792d00000000000000000000",
            "docs": [
              " The amount of currency needed per additional user when creating a recovery",
              " configuration.",
              "",
              " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage",
              " value."
            ]
          },
          {
            "name": "MaxFriends",
            "type": "U32",
            "type_value": 4,
            "constants_value": "09000000",
            "docs": [
              " The maximum amount of friends allowed in a recovery configuration.",
              "",
              " NOTE: The threshold programmed in this Pallet uses u16, so it does",
              " not really make sense to have a limit here greater than u16::MAX.",
              " But also, that is a lot more than you should probably set this value",
              " to anyway..."
            ]
          },
          {
            "name": "RecoveryDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00406352bfc601000000000000000000",
            "docs": [
              " The base amount of currency needed to reserve for starting a recovery.",
              "",
              " This is primarily held for deterring malicious recovery attempts, and should",
              " have a value large enough that a bad actor would choose not to place this",
              " deposit. It also acts to fund additional storage item whose value size is",
              " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable",
              " threshold."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotAllowed",
            "doc": [
              "User is not allowed to make a call on behalf of this account"
            ]
          },
          {
            "name": "ZeroThreshold",
            "doc": [
              "Threshold must be greater than zero"
            ]
          },
          {
            "name": "NotEnoughFriends",
            "doc": [
              "Friends list must be greater than zero and threshold"
            ]
          },
          {
            "name": "MaxFriends",
            "doc": [
              "Friends list must be less than max friends"
            ]
          },
          {
            "name": "NotSorted",
            "doc": [
              "Friends list must be sorted and free of duplicates"
            ]
          },
          {
            "name": "NotRecoverable",
            "doc": [
              "This account is not set up for recovery"
            ]
          },
          {
            "name": "AlreadyRecoverable",
            "doc": [
              "This account is already set up for recovery"
            ]
          },
          {
            "name": "AlreadyStarted",
            "doc": [
              "A recovery process has already started for this account"
            ]
          },
          {
            "name": "NotStarted",
            "doc": [
              "A recovery process has not started for this rescuer"
            ]
          },
          {
            "name": "NotFriend",
            "doc": [
              "This account is not a friend who can vouch"
            ]
          },
          {
            "name": "DelayPeriod",
            "doc": [
              "The friend must wait until the delay period to vouch for this recovery"
            ]
          },
          {
            "name": "AlreadyVouched",
            "doc": [
              "This user has already vouched for this recovery"
            ]
          },
          {
            "name": "Threshold",
            "doc": [
              "The threshold for recovering this account has not been met"
            ]
          },
          {
            "name": "StillActive",
            "doc": [
              "There are still active recovery attempts that need to be closed"
            ]
          },
          {
            "name": "AlreadyProxy",
            "doc": [
              "This account is already set up for recovery"
            ]
          },
          {
            "name": "BadState",
            "doc": [
              "Some internal state is broken."
            ]
          }
        ],
        "errors_value": {
          "type": 647
        },
        "index": 30
      },
      {
        "name": "Vesting",
        "prefix": "Vesting",
        "storage": [
          {
            "name": "Vesting",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cpallet_vesting:vesting_info:VestingInfo\u003e",
                "keys_id": 0,
                "value_id": 648
              }
            },
            "fallback": "0x00",
            "docs": [
              " Information regarding the vesting of a given account."
            ]
          },
          {
            "name": "StorageVersion",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_vesting:Releases",
              "PlainTypeValue": 650
            },
            "fallback": "0x00",
            "docs": [
              " Storage version of the pallet.",
              "",
              " New networks start with latest version, as determined by the genesis build."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "1f00",
            "name": "vest",
            "docs": [
              "See [`Pallet::vest`]."
            ],
            "args": null
          },
          {
            "lookup": "1f01",
            "name": "vest_other",
            "docs": [
              "See [`Pallet::vest_other`]."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "1f02",
            "name": "vested_transfer",
            "docs": [
              "See [`Pallet::vested_transfer`]."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "schedule",
                "type": "pallet_vesting:vesting_info:VestingInfo",
                "type_name": "VestingInfo\u003cBalanceOf, BlockNumberFor\u003e"
              }
            ]
          },
          {
            "lookup": "1f03",
            "name": "force_vested_transfer",
            "docs": [
              "See [`Pallet::force_vested_transfer`]."
            ],
            "args": [
              {
                "name": "source",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "schedule",
                "type": "pallet_vesting:vesting_info:VestingInfo",
                "type_name": "VestingInfo\u003cBalanceOf, BlockNumberFor\u003e"
              }
            ]
          },
          {
            "lookup": "1f04",
            "name": "merge_schedules",
            "docs": [
              "See [`Pallet::merge_schedules`]."
            ],
            "args": [
              {
                "name": "schedule1_index",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "schedule2_index",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 311
        },
        "events": [
          {
            "lookup": "1f00",
            "name": "VestingUpdated",
            "docs": [
              "The amount vested has been updated. This could indicate a change in funds available.",
              "The balance given is the amount which is left unvested (and thus locked)."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "account",
              "unvested"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "1f01",
            "name": "VestingCompleted",
            "docs": [
              "An \\[account\\] has become fully vested."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "account"
            ],
            "args_type_name": [
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 92
        },
        "constants": [
          {
            "name": "MinVestedTransfer",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          },
          {
            "name": "MaxVestingSchedules",
            "type": "U32",
            "type_value": 4,
            "constants_value": "1c000000",
            "docs": null
          }
        ],
        "errors": [
          {
            "name": "NotVesting",
            "doc": [
              "The account given is not vesting."
            ]
          },
          {
            "name": "AtMaxVestingSchedules",
            "doc": [
              "The account already has `MaxVestingSchedules` count of schedules and thus",
              "cannot add another one. Consider merging existing schedules in order to add another."
            ]
          },
          {
            "name": "AmountLow",
            "doc": [
              "Amount being transferred is too low to create a vesting schedule."
            ]
          },
          {
            "name": "ScheduleIndexOutOfBounds",
            "doc": [
              "An index was out of bounds of the vesting schedules."
            ]
          },
          {
            "name": "InvalidScheduleParams",
            "doc": [
              "Failed to create a new schedule because some parameter was invalid."
            ]
          }
        ],
        "errors_value": {
          "type": 651
        },
        "index": 31
      },
      {
        "name": "Scheduler",
        "prefix": "Scheduler",
        "storage": [
          {
            "name": "IncompleteSince",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "Agenda",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003coption\u003cpallet_scheduler:Scheduled\u003e\u003e",
                "keys_id": 4,
                "value_id": 652
              }
            },
            "fallback": "0x00",
            "docs": [
              " Items to be executed, indexed by the block number that they should be executed on."
            ]
          },
          {
            "name": "Lookup",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:U32U32",
                "keys_id": 1,
                "value_id": 94
              }
            },
            "fallback": "0x00",
            "docs": [
              " Lookup from a name to the block number and index of the task.",
              "",
              " For v3 -\u003e v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
              " identities."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2000",
            "name": "schedule",
            "docs": [
              "See [`Pallet::schedule`]."
            ],
            "args": [
              {
                "name": "when",
                "type": "U32",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "maybe_periodic",
                "type": "option\u003cTuple:U32U32\u003e",
                "type_name": "Option\u003cschedule::Period\u003cBlockNumberFor\u003e\u003e"
              },
              {
                "name": "priority",
                "type": "U8",
                "type_name": "schedule::Priority"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "2001",
            "name": "cancel",
            "docs": [
              "See [`Pallet::cancel`]."
            ],
            "args": [
              {
                "name": "when",
                "type": "U32",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2002",
            "name": "schedule_named",
            "docs": [
              "See [`Pallet::schedule_named`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "[U8; 32]",
                "type_name": "TaskName"
              },
              {
                "name": "when",
                "type": "U32",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "maybe_periodic",
                "type": "option\u003cTuple:U32U32\u003e",
                "type_name": "Option\u003cschedule::Period\u003cBlockNumberFor\u003e\u003e"
              },
              {
                "name": "priority",
                "type": "U8",
                "type_name": "schedule::Priority"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "2003",
            "name": "cancel_named",
            "docs": [
              "See [`Pallet::cancel_named`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "[U8; 32]",
                "type_name": "TaskName"
              }
            ]
          },
          {
            "lookup": "2004",
            "name": "schedule_after",
            "docs": [
              "See [`Pallet::schedule_after`]."
            ],
            "args": [
              {
                "name": "after",
                "type": "U32",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "maybe_periodic",
                "type": "option\u003cTuple:U32U32\u003e",
                "type_name": "Option\u003cschedule::Period\u003cBlockNumberFor\u003e\u003e"
              },
              {
                "name": "priority",
                "type": "U8",
                "type_name": "schedule::Priority"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "2005",
            "name": "schedule_named_after",
            "docs": [
              "See [`Pallet::schedule_named_after`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "[U8; 32]",
                "type_name": "TaskName"
              },
              {
                "name": "after",
                "type": "U32",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "maybe_periodic",
                "type": "option\u003cTuple:U32U32\u003e",
                "type_name": "Option\u003cschedule::Period\u003cBlockNumberFor\u003e\u003e"
              },
              {
                "name": "priority",
                "type": "U8",
                "type_name": "schedule::Priority"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 313
        },
        "events": [
          {
            "lookup": "2000",
            "name": "Scheduled",
            "docs": [
              "Scheduled some task."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "when",
              "index"
            ],
            "args_type_name": [
              "BlockNumberFor",
              "u32"
            ]
          },
          {
            "lookup": "2001",
            "name": "Canceled",
            "docs": [
              "Canceled some task."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "when",
              "index"
            ],
            "args_type_name": [
              "BlockNumberFor",
              "u32"
            ]
          },
          {
            "lookup": "2002",
            "name": "Dispatched",
            "docs": [
              "Dispatched some task."
            ],
            "args": [
              "Tuple:U32U32",
              "option\u003c[U8; 32]\u003e",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "task",
              "id",
              "result"
            ],
            "args_type_name": [
              "TaskAddress\u003cBlockNumberFor\u003e",
              "Option\u003cTaskName\u003e",
              "DispatchResult"
            ]
          },
          {
            "lookup": "2003",
            "name": "CallUnavailable",
            "docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ],
            "args": [
              "Tuple:U32U32",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_name": [
              "task",
              "id"
            ],
            "args_type_name": [
              "TaskAddress\u003cBlockNumberFor\u003e",
              "Option\u003cTaskName\u003e"
            ]
          },
          {
            "lookup": "2004",
            "name": "PeriodicFailed",
            "docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ],
            "args": [
              "Tuple:U32U32",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_name": [
              "task",
              "id"
            ],
            "args_type_name": [
              "TaskAddress\u003cBlockNumberFor\u003e",
              "Option\u003cTaskName\u003e"
            ]
          },
          {
            "lookup": "2005",
            "name": "PermanentlyOverweight",
            "docs": [
              "The given task can never be executed since it is overweight."
            ],
            "args": [
              "Tuple:U32U32",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_name": [
              "task",
              "id"
            ],
            "args_type_name": [
              "TaskAddress\u003cBlockNumberFor\u003e",
              "Option\u003cTaskName\u003e"
            ]
          }
        ],
        "events_value": {
          "type": 93
        },
        "constants": [
          {
            "name": "MaximumWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "0b00806e87740113cccccccccccccccc",
            "docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "name": "MaxScheduledPerBlock",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum number of scheduled calls in the queue for a single block.",
              "",
              " NOTE:",
              " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
              " higher limit under `runtime-benchmarks` feature."
            ]
          }
        ],
        "errors": [
          {
            "name": "FailedToSchedule",
            "doc": [
              "Failed to schedule a call"
            ]
          },
          {
            "name": "NotFound",
            "doc": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "name": "TargetBlockNumberInPast",
            "doc": [
              "Given target block number is in the past."
            ]
          },
          {
            "name": "RescheduleNoChange",
            "doc": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "name": "Named",
            "doc": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "errors_value": {
          "type": 656
        },
        "index": 32
      },
      {
        "name": "Glutton",
        "prefix": "Glutton",
        "storage": [
          {
            "name": "Compute",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 97
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " The proportion of the remaining `ref_time` to consume during `on_idle`.",
              "",
              " `1.0` is mapped to `100%`. Must be at most [`crate::RESOURCE_HARD_LIMIT`]. Setting this to",
              " over `1.0` could stall the chain."
            ]
          },
          {
            "name": "Storage",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 97
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " The proportion of the remaining `proof_size` to consume during `on_idle`.",
              "",
              " `1.0` is mapped to `100%`. Must be at most [`crate::RESOURCE_HARD_LIMIT`]. Setting this to",
              " over `1.0` could stall the chain."
            ]
          },
          {
            "name": "TrashData",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "[U8; 1024]",
                "keys_id": 4,
                "value_id": 657
              }
            },
            "fallback": "0x00",
            "docs": [
              " Storage map used for wasting proof size.",
              "",
              " It contains no meaningful data - hence the name \"Trash\". The maximal number of entries is",
              " set to 65k, which is just below the next jump at 16^4. This is important to reduce the proof",
              " size benchmarking overestimate. The assumption here is that we won't have more than 65k *",
              " 1KiB = 65MiB of proof size wasting in practice. However, this limit is not enforced, so the",
              " pallet would also work out of the box with more entries, but its benchmarked proof weight",
              " would possibly be underestimated in that case."
            ]
          },
          {
            "name": "TrashDataCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The current number of entries in `TrashData`."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2100",
            "name": "initialize_pallet",
            "docs": [
              "See [`Pallet::initialize_pallet`]."
            ],
            "args": [
              {
                "name": "new_count",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "witness_count",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cu32\u003e"
              }
            ]
          },
          {
            "lookup": "2101",
            "name": "set_compute",
            "docs": [
              "See [`Pallet::set_compute`]."
            ],
            "args": [
              {
                "name": "compute",
                "type": "U64",
                "type_name": "FixedU64"
              }
            ]
          },
          {
            "lookup": "2102",
            "name": "set_storage",
            "docs": [
              "See [`Pallet::set_storage`]."
            ],
            "args": [
              {
                "name": "storage",
                "type": "U64",
                "type_name": "FixedU64"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 315
        },
        "events": [
          {
            "lookup": "2100",
            "name": "PalletInitialized",
            "docs": [
              "The pallet has been (re)initialized."
            ],
            "args": [
              "Bool"
            ],
            "args_name": [
              "reinit"
            ],
            "args_type_name": [
              "bool"
            ]
          },
          {
            "lookup": "2101",
            "name": "ComputationLimitSet",
            "docs": [
              "The computation limit has been updated."
            ],
            "args": [
              "U64"
            ],
            "args_name": [
              "compute"
            ],
            "args_type_name": [
              "FixedU64"
            ]
          },
          {
            "lookup": "2102",
            "name": "StorageLimitSet",
            "docs": [
              "The storage limit has been updated."
            ],
            "args": [
              "U64"
            ],
            "args_name": [
              "storage"
            ],
            "args_type_name": [
              "FixedU64"
            ]
          }
        ],
        "events_value": {
          "type": 96
        },
        "errors": [
          {
            "name": "AlreadyInitialized",
            "doc": [
              "The pallet was already initialized.",
              "",
              "Set `witness_count` to `Some` to bypass this error."
            ]
          },
          {
            "name": "InsaneLimit",
            "doc": [
              "The limit was over [`crate::RESOURCE_HARD_LIMIT`]."
            ]
          }
        ],
        "errors_value": {
          "type": 658
        },
        "index": 33
      },
      {
        "name": "Preimage",
        "prefix": "Preimage",
        "storage": [
          {
            "name": "StatusFor",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_preimage:RequestStatus",
                "keys_id": 12,
                "value_id": 659
              }
            },
            "fallback": "0x00",
            "docs": [
              " The request status of a given hash."
            ]
          },
          {
            "name": "PreimageFor",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256",
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 661,
                "value_id": 662
              }
            },
            "fallback": "0x00",
            "docs": null
          }
        ],
        "calls": [
          {
            "lookup": "2200",
            "name": "note_preimage",
            "docs": [
              "See [`Pallet::note_preimage`]."
            ],
            "args": [
              {
                "name": "bytes",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "2201",
            "name": "unnote_preimage",
            "docs": [
              "See [`Pallet::unnote_preimage`]."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "2202",
            "name": "request_preimage",
            "docs": [
              "See [`Pallet::request_preimage`]."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "2203",
            "name": "unrequest_preimage",
            "docs": [
              "See [`Pallet::unrequest_preimage`]."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 316
        },
        "events": [
          {
            "lookup": "2200",
            "name": "Noted",
            "docs": [
              "A preimage has been noted."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "2201",
            "name": "Requested",
            "docs": [
              "A preimage has been requested."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "2202",
            "name": "Cleared",
            "docs": [
              "A preimage has ben cleared."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          }
        ],
        "events_value": {
          "type": 98
        },
        "errors": [
          {
            "name": "TooBig",
            "doc": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "name": "AlreadyNoted",
            "doc": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "name": "NotAuthorized",
            "doc": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "name": "NotNoted",
            "doc": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "name": "Requested",
            "doc": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "name": "NotRequested",
            "doc": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          }
        ],
        "errors_value": {
          "type": 663
        },
        "index": 34
      },
      {
        "name": "Proxy",
        "prefix": "Proxy",
        "storage": [
          {
            "name": "Proxies",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@665U128",
                "keys_id": 0,
                "value_id": 664
              }
            },
            "fallback": "0x0000000000000000000000000000000000",
            "docs": [
              " The set of account proxies. Maps the account which has delegated to the accounts",
              " which are being delegated to, together with the amount held on deposit."
            ]
          },
          {
            "name": "Announcements",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@669U128",
                "keys_id": 0,
                "value_id": 668
              }
            },
            "fallback": "0x0000000000000000000000000000000000",
            "docs": [
              " The announcements made by the proxy (key)."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2300",
            "name": "proxy",
            "docs": [
              "See [`Pallet::proxy`]."
            ],
            "args": [
              {
                "name": "real",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "force_proxy_type",
                "type": "option\u003ckitchensink_runtime:ProxyType\u003e",
                "type_name": "Option\u003cProxyType\u003e"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "2301",
            "name": "add_proxy",
            "docs": [
              "See [`Pallet::add_proxy`]."
            ],
            "args": [
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "proxy_type",
                "type": "kitchensink_runtime:ProxyType",
                "type_name": "ProxyType"
              },
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumberFor"
              }
            ]
          },
          {
            "lookup": "2302",
            "name": "remove_proxy",
            "docs": [
              "See [`Pallet::remove_proxy`]."
            ],
            "args": [
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "proxy_type",
                "type": "kitchensink_runtime:ProxyType",
                "type_name": "ProxyType"
              },
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumberFor"
              }
            ]
          },
          {
            "lookup": "2303",
            "name": "remove_proxies",
            "docs": [
              "See [`Pallet::remove_proxies`]."
            ],
            "args": null
          },
          {
            "lookup": "2304",
            "name": "create_pure",
            "docs": [
              "See [`Pallet::create_pure`]."
            ],
            "args": [
              {
                "name": "proxy_type",
                "type": "kitchensink_runtime:ProxyType",
                "type_name": "ProxyType"
              },
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "index",
                "type": "U16",
                "type_name": "u16"
              }
            ]
          },
          {
            "lookup": "2305",
            "name": "kill_pure",
            "docs": [
              "See [`Pallet::kill_pure`]."
            ],
            "args": [
              {
                "name": "spawner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "proxy_type",
                "type": "kitchensink_runtime:ProxyType",
                "type_name": "ProxyType"
              },
              {
                "name": "index",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "height",
                "type": "compact\u003cU32\u003e",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "ext_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2306",
            "name": "announce",
            "docs": [
              "See [`Pallet::announce`]."
            ],
            "args": [
              {
                "name": "real",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "CallHashOf"
              }
            ]
          },
          {
            "lookup": "2307",
            "name": "remove_announcement",
            "docs": [
              "See [`Pallet::remove_announcement`]."
            ],
            "args": [
              {
                "name": "real",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "CallHashOf"
              }
            ]
          },
          {
            "lookup": "2308",
            "name": "reject_announcement",
            "docs": [
              "See [`Pallet::reject_announcement`]."
            ],
            "args": [
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "CallHashOf"
              }
            ]
          },
          {
            "lookup": "2309",
            "name": "proxy_announced",
            "docs": [
              "See [`Pallet::proxy_announced`]."
            ],
            "args": [
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "real",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "force_proxy_type",
                "type": "option\u003ckitchensink_runtime:ProxyType\u003e",
                "type_name": "Option\u003cProxyType\u003e"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 317
        },
        "events": [
          {
            "lookup": "2300",
            "name": "ProxyExecuted",
            "docs": [
              "A proxy was executed correctly, with the given."
            ],
            "args": [
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "result"
            ],
            "args_type_name": [
              "DispatchResult"
            ]
          },
          {
            "lookup": "2301",
            "name": "PureCreated",
            "docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "kitchensink_runtime:ProxyType",
              "U16"
            ],
            "args_name": [
              "pure",
              "who",
              "proxy_type",
              "disambiguation_index"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "ProxyType",
              "u16"
            ]
          },
          {
            "lookup": "2302",
            "name": "Announced",
            "docs": [
              "An announcement was placed to make a call in the future."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "H256"
            ],
            "args_name": [
              "real",
              "proxy",
              "call_hash"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "CallHashOf"
            ]
          },
          {
            "lookup": "2303",
            "name": "ProxyAdded",
            "docs": [
              "A proxy was added."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "kitchensink_runtime:ProxyType",
              "U32"
            ],
            "args_name": [
              "delegator",
              "delegatee",
              "proxy_type",
              "delay"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "ProxyType",
              "BlockNumberFor"
            ]
          },
          {
            "lookup": "2304",
            "name": "ProxyRemoved",
            "docs": [
              "A proxy was removed."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "kitchensink_runtime:ProxyType",
              "U32"
            ],
            "args_name": [
              "delegator",
              "delegatee",
              "proxy_type",
              "delay"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "ProxyType",
              "BlockNumberFor"
            ]
          }
        ],
        "events_value": {
          "type": 99
        },
        "constants": [
          {
            "name": "ProxyDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00f09e544c3900000000000000000000",
            "docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "name": "ProxyDepositFactor",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0060aa7714b400000000000000000000",
            "docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "name": "MaxProxies",
            "type": "U32",
            "type_value": 4,
            "constants_value": "20000000",
            "docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "name": "MaxPending",
            "type": "U32",
            "type_value": 4,
            "constants_value": "20000000",
            "docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "name": "AnnouncementDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00f09e544c3900000000000000000000",
            "docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "name": "AnnouncementDepositFactor",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00c054ef286801000000000000000000",
            "docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "errors": [
          {
            "name": "TooMany",
            "doc": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "name": "NotFound",
            "doc": [
              "Proxy registration not found."
            ]
          },
          {
            "name": "NotProxy",
            "doc": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "name": "Unproxyable",
            "doc": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "name": "Duplicate",
            "doc": [
              "Account is already a proxy."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "name": "Unannounced",
            "doc": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "name": "NoSelfProxy",
            "doc": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "errors_value": {
          "type": 672
        },
        "index": 35
      },
      {
        "name": "Multisig",
        "prefix": "Multisig",
        "storage": [
          {
            "name": "Multisigs",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "[U8; 32]"
                ],
                "value": "pallet_multisig:Multisig",
                "keys_id": 673,
                "value_id": 674
              }
            },
            "fallback": "0x00",
            "docs": [
              " The set of open multisig operations."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2400",
            "name": "as_multi_threshold_1",
            "docs": [
              "See [`Pallet::as_multi_threshold_1`]."
            ],
            "args": [
              {
                "name": "other_signatories",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "2401",
            "name": "as_multi",
            "docs": [
              "See [`Pallet::as_multi`]."
            ],
            "args": [
              {
                "name": "threshold",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "other_signatories",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "maybe_timepoint",
                "type": "option\u003cpallet_multisig:Timepoint\u003e",
                "type_name": "Option\u003cTimepoint\u003cBlockNumberFor\u003e\u003e"
              },
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              },
              {
                "name": "max_weight",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          },
          {
            "lookup": "2402",
            "name": "approve_as_multi",
            "docs": [
              "See [`Pallet::approve_as_multi`]."
            ],
            "args": [
              {
                "name": "threshold",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "other_signatories",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "maybe_timepoint",
                "type": "option\u003cpallet_multisig:Timepoint\u003e",
                "type_name": "Option\u003cTimepoint\u003cBlockNumberFor\u003e\u003e"
              },
              {
                "name": "call_hash",
                "type": "[U8; 32]",
                "type_name": "[u8; 32]"
              },
              {
                "name": "max_weight",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          },
          {
            "lookup": "2403",
            "name": "cancel_as_multi",
            "docs": [
              "See [`Pallet::cancel_as_multi`]."
            ],
            "args": [
              {
                "name": "threshold",
                "type": "U16",
                "type_name": "u16"
              },
              {
                "name": "other_signatories",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "timepoint",
                "type": "pallet_multisig:Timepoint",
                "type_name": "Timepoint\u003cBlockNumberFor\u003e"
              },
              {
                "name": "call_hash",
                "type": "[U8; 32]",
                "type_name": "[u8; 32]"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 319
        },
        "events": [
          {
            "lookup": "2400",
            "name": "NewMultisig",
            "docs": [
              "A new multisig operation has begun."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "approving",
              "multisig",
              "call_hash"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "CallHash"
            ]
          },
          {
            "lookup": "2401",
            "name": "MultisigApproval",
            "docs": [
              "A multisig operation has been approved by someone."
            ],
            "args": [
              "[U8; 32]",
              "pallet_multisig:Timepoint",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "approving",
              "timepoint",
              "multisig",
              "call_hash"
            ],
            "args_type_name": [
              "AccountId",
              "Timepoint\u003cBlockNumberFor\u003e",
              "AccountId",
              "CallHash"
            ]
          },
          {
            "lookup": "2402",
            "name": "MultisigExecuted",
            "docs": [
              "A multisig operation has been executed."
            ],
            "args": [
              "[U8; 32]",
              "pallet_multisig:Timepoint",
              "[U8; 32]",
              "[U8; 32]",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "approving",
              "timepoint",
              "multisig",
              "call_hash",
              "result"
            ],
            "args_type_name": [
              "AccountId",
              "Timepoint\u003cBlockNumberFor\u003e",
              "AccountId",
              "CallHash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "2403",
            "name": "MultisigCancelled",
            "docs": [
              "A multisig operation has been cancelled."
            ],
            "args": [
              "[U8; 32]",
              "pallet_multisig:Timepoint",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "cancelling",
              "timepoint",
              "multisig",
              "call_hash"
            ],
            "args_type_name": [
              "AccountId",
              "Timepoint\u003cBlockNumberFor\u003e",
              "AccountId",
              "CallHash"
            ]
          }
        ],
        "events_value": {
          "type": 102
        },
        "constants": [
          {
            "name": "DepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00f01c0adbed01000000000000000000",
            "docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "name": "DepositFactor",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000cc7b9fae00000000000000000000",
            "docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "name": "MaxSignatories",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "errors": [
          {
            "name": "MinimumThreshold",
            "doc": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "name": "AlreadyApproved",
            "doc": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "name": "NoApprovalsNeeded",
            "doc": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "name": "TooFewSignatories",
            "doc": [
              "There are too few signatories in the list."
            ]
          },
          {
            "name": "TooManySignatories",
            "doc": [
              "There are too many signatories in the list."
            ]
          },
          {
            "name": "SignatoriesOutOfOrder",
            "doc": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "name": "SenderInSignatories",
            "doc": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "name": "NotFound",
            "doc": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "name": "NotOwner",
            "doc": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "name": "NoTimepoint",
            "doc": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "name": "WrongTimepoint",
            "doc": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "name": "UnexpectedTimepoint",
            "doc": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "name": "MaxWeightTooLow",
            "doc": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "name": "AlreadyStored",
            "doc": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "errors_value": {
          "type": 675
        },
        "index": 36
      },
      {
        "name": "Bounties",
        "prefix": "Bounties",
        "storage": [
          {
            "name": "BountyCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Number of bounty proposals that have been made."
            ]
          },
          {
            "name": "Bounties",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_bounties:Bounty",
                "keys_id": 4,
                "value_id": 676
              }
            },
            "fallback": "0x00",
            "docs": [
              " Bounties that have been made."
            ]
          },
          {
            "name": "BountyDescriptions",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 678
              }
            },
            "fallback": "0x00",
            "docs": [
              " The description of each bounty."
            ]
          },
          {
            "name": "BountyApprovals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU32\u003e",
              "PlainTypeValue": 579
            },
            "fallback": "0x00",
            "docs": [
              " Bounty indices that have been approved but not yet funded."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2500",
            "name": "propose_bounty",
            "docs": [
              "See [`Pallet::propose_bounty`]."
            ],
            "args": [
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "description",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "2501",
            "name": "approve_bounty",
            "docs": [
              "See [`Pallet::approve_bounty`]."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "2502",
            "name": "propose_curator",
            "docs": [
              "See [`Pallet::propose_curator`]."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "curator",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "fee",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "2503",
            "name": "unassign_curator",
            "docs": [
              "See [`Pallet::unassign_curator`]."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "2504",
            "name": "accept_curator",
            "docs": [
              "See [`Pallet::accept_curator`]."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "2505",
            "name": "award_bounty",
            "docs": [
              "See [`Pallet::award_bounty`]."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2506",
            "name": "claim_bounty",
            "docs": [
              "See [`Pallet::claim_bounty`]."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "2507",
            "name": "close_bounty",
            "docs": [
              "See [`Pallet::close_bounty`]."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "2508",
            "name": "extend_bounty_expiry",
            "docs": [
              "See [`Pallet::extend_bounty_expiry`]."
            ],
            "args": [
              {
                "name": "bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "remark",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 321
        },
        "events": [
          {
            "lookup": "2500",
            "name": "BountyProposed",
            "docs": [
              "New bounty proposal."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "BountyIndex"
            ]
          },
          {
            "lookup": "2501",
            "name": "BountyRejected",
            "docs": [
              "A bounty proposal was rejected; funds were slashed."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "index",
              "bond"
            ],
            "args_type_name": [
              "BountyIndex",
              "BalanceOf"
            ]
          },
          {
            "lookup": "2502",
            "name": "BountyBecameActive",
            "docs": [
              "A bounty proposal is funded and became active."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "BountyIndex"
            ]
          },
          {
            "lookup": "2503",
            "name": "BountyAwarded",
            "docs": [
              "A bounty is awarded to a beneficiary."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "index",
              "beneficiary"
            ],
            "args_type_name": [
              "BountyIndex",
              "AccountId"
            ]
          },
          {
            "lookup": "2504",
            "name": "BountyClaimed",
            "docs": [
              "A bounty is claimed by beneficiary."
            ],
            "args": [
              "U32",
              "U128",
              "[U8; 32]"
            ],
            "args_name": [
              "index",
              "payout",
              "beneficiary"
            ],
            "args_type_name": [
              "BountyIndex",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "2505",
            "name": "BountyCanceled",
            "docs": [
              "A bounty is cancelled."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "BountyIndex"
            ]
          },
          {
            "lookup": "2506",
            "name": "BountyExtended",
            "docs": [
              "A bounty expiry is extended."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "BountyIndex"
            ]
          }
        ],
        "events_value": {
          "type": 104
        },
        "constants": [
          {
            "name": "BountyDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The amount held on deposit for placing a bounty proposal."
            ]
          },
          {
            "name": "BountyDepositPayoutDelay",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80700000",
            "docs": [
              " The delay period for which a bounty beneficiary need to wait before claim the payout."
            ]
          },
          {
            "name": "BountyUpdatePeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00270600",
            "docs": [
              " Bounty duration in blocks."
            ]
          },
          {
            "name": "CuratorDepositMultiplier",
            "type": "U32",
            "type_value": 434,
            "constants_value": "20a10700",
            "docs": [
              " The curator deposit is calculated as a percentage of the curator fee.",
              "",
              " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
              " `CuratorDepositMin`."
            ]
          },
          {
            "name": "CuratorDepositMax",
            "type": "option\u003cU128\u003e",
            "type_value": 331,
            "constants_value": "010000c16ff28623000000000000000000",
            "docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "name": "CuratorDepositMin",
            "type": "option\u003cU128\u003e",
            "type_value": 331,
            "constants_value": "0100407a10f35a00000000000000000000",
            "docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "name": "BountyValueMinimum",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00406352bfc601000000000000000000",
            "docs": [
              " Minimum value for a bounty."
            ]
          },
          {
            "name": "DataDepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0010a5d4e80000000000000000000000",
            "docs": [
              " The amount held on deposit per byte within the tip report reason or bounty description."
            ]
          },
          {
            "name": "MaximumReasonLength",
            "type": "U32",
            "type_value": 4,
            "constants_value": "2c010000",
            "docs": [
              " Maximum acceptable reason length.",
              "",
              " Benchmarks depend on this value, be sure to update weights file when changing this value"
            ]
          }
        ],
        "errors": [
          {
            "name": "InsufficientProposersBalance",
            "doc": [
              "Proposer's balance is too low."
            ]
          },
          {
            "name": "InvalidIndex",
            "doc": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "name": "ReasonTooBig",
            "doc": [
              "The reason given is just too big."
            ]
          },
          {
            "name": "UnexpectedStatus",
            "doc": [
              "The bounty status is unexpected."
            ]
          },
          {
            "name": "RequireCurator",
            "doc": [
              "Require bounty curator."
            ]
          },
          {
            "name": "InvalidValue",
            "doc": [
              "Invalid bounty value."
            ]
          },
          {
            "name": "InvalidFee",
            "doc": [
              "Invalid bounty fee."
            ]
          },
          {
            "name": "PendingPayout",
            "doc": [
              "A bounty payout is pending.",
              "To cancel the bounty, you must unassign and slash the curator."
            ]
          },
          {
            "name": "Premature",
            "doc": [
              "The bounties cannot be claimed/closed because it's still in the countdown period."
            ]
          },
          {
            "name": "HasActiveChildBounty",
            "doc": [
              "The bounty cannot be closed because it has active child bounties."
            ]
          },
          {
            "name": "TooManyQueued",
            "doc": [
              "Too many approvals are already queued."
            ]
          }
        ],
        "errors_value": {
          "type": 679
        },
        "index": 37
      },
      {
        "name": "Tips",
        "prefix": "Tips",
        "storage": [
          {
            "name": "Tips",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_tips:OpenTip",
                "keys_id": 12,
                "value_id": 680
              }
            },
            "fallback": "0x00",
            "docs": [
              " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
              " This has the insecure enumerable hash function since the key itself is already",
              " guaranteed to be a secure hash."
            ]
          },
          {
            "name": "Reasons",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 12,
                "value_id": 13
              }
            },
            "fallback": "0x00",
            "docs": [
              " Simple preimage lookup from the reason's hash to the original data. Again, has an",
              " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2600",
            "name": "report_awesome",
            "docs": [
              "See [`Pallet::report_awesome`]."
            ],
            "args": [
              {
                "name": "reason",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2601",
            "name": "retract_tip",
            "docs": [
              "See [`Pallet::retract_tip`]."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "2602",
            "name": "tip_new",
            "docs": [
              "See [`Pallet::tip_new`]."
            ],
            "args": [
              {
                "name": "reason",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "tip_value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "2603",
            "name": "tip",
            "docs": [
              "See [`Pallet::tip`]."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "tip_value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "2604",
            "name": "close_tip",
            "docs": [
              "See [`Pallet::close_tip`]."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "2605",
            "name": "slash_tip",
            "docs": [
              "See [`Pallet::slash_tip`]."
            ],
            "args": [
              {
                "name": "hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 322
        },
        "events": [
          {
            "lookup": "2600",
            "name": "NewTip",
            "docs": [
              "A new tip suggestion has been opened."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "tip_hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "2601",
            "name": "TipClosing",
            "docs": [
              "A tip suggestion has reached threshold and is closing."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "tip_hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "2602",
            "name": "TipClosed",
            "docs": [
              "A tip suggestion has been closed."
            ],
            "args": [
              "H256",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "tip_hash",
              "who",
              "payout"
            ],
            "args_type_name": [
              "Hash",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "2603",
            "name": "TipRetracted",
            "docs": [
              "A tip suggestion has been retracted."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "tip_hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "2604",
            "name": "TipSlashed",
            "docs": [
              "A tip suggestion has been slashed."
            ],
            "args": [
              "H256",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "tip_hash",
              "finder",
              "deposit"
            ],
            "args_type_name": [
              "Hash",
              "AccountId",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 105
        },
        "constants": [
          {
            "name": "MaximumReasonLength",
            "type": "U32",
            "type_value": 4,
            "constants_value": "2c010000",
            "docs": [
              " Maximum acceptable reason length.",
              "",
              " Benchmarks depend on this value, be sure to update weights file when changing this value"
            ]
          },
          {
            "name": "DataDepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0010a5d4e80000000000000000000000",
            "docs": [
              " The amount held on deposit per byte within the tip report reason or bounty description."
            ]
          },
          {
            "name": "TipCountdown",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80700000",
            "docs": [
              " The period for which a tip remains open after is has achieved threshold tippers."
            ]
          },
          {
            "name": "TipFindersFee",
            "type": "U8",
            "type_value": 230,
            "constants_value": "14",
            "docs": [
              " The percent of the final tip which goes to the original reporter of the tip."
            ]
          },
          {
            "name": "TipReportDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The amount held on deposit for placing a tip report."
            ]
          }
        ],
        "errors": [
          {
            "name": "ReasonTooBig",
            "doc": [
              "The reason given is just too big."
            ]
          },
          {
            "name": "AlreadyKnown",
            "doc": [
              "The tip was already found/started."
            ]
          },
          {
            "name": "UnknownTip",
            "doc": [
              "The tip hash is unknown."
            ]
          },
          {
            "name": "NotFinder",
            "doc": [
              "The account attempting to retract the tip is not the finder of the tip."
            ]
          },
          {
            "name": "StillOpen",
            "doc": [
              "The tip cannot be claimed/closed because there are not enough tippers yet."
            ]
          },
          {
            "name": "Premature",
            "doc": [
              "The tip cannot be claimed/closed because it's still in the countdown period."
            ]
          }
        ],
        "errors_value": {
          "type": 681
        },
        "index": 38
      },
      {
        "name": "Assets",
        "prefix": "Assets",
        "storage": [
          {
            "name": "Asset",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_assets:types:AssetDetails",
                "keys_id": 4,
                "value_id": 682
              }
            },
            "fallback": "0x00",
            "docs": [
              " Details of an asset."
            ]
          },
          {
            "name": "Account",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_assets:types:AssetAccount",
                "keys_id": 528,
                "value_id": 684
              }
            },
            "fallback": "0x00",
            "docs": [
              " The holdings of a specific account for a specific asset."
            ]
          },
          {
            "name": "Approvals",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]",
                  "[U8; 32]"
                ],
                "value": "pallet_assets:types:Approval",
                "keys_id": 687,
                "value_id": 688
              }
            },
            "fallback": "0x00",
            "docs": [
              " Approved balance transfers. First balance is the amount approved for transfer. Second",
              " is the amount of `T::Currency` reserved for storing this.",
              " First key is the asset ID, second key is the owner and third key is the delegate."
            ]
          },
          {
            "name": "Metadata",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_assets:types:AssetMetadata",
                "keys_id": 4,
                "value_id": 689
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000",
            "docs": [
              " Metadata of an asset."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2700",
            "name": "create",
            "docs": [
              "See [`Pallet::create`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "min_balance",
                "type": "U128",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2701",
            "name": "force_create",
            "docs": [
              "See [`Pallet::force_create`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "is_sufficient",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "min_balance",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2702",
            "name": "start_destroy",
            "docs": [
              "See [`Pallet::start_destroy`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2703",
            "name": "destroy_accounts",
            "docs": [
              "See [`Pallet::destroy_accounts`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2704",
            "name": "destroy_approvals",
            "docs": [
              "See [`Pallet::destroy_approvals`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2705",
            "name": "finish_destroy",
            "docs": [
              "See [`Pallet::finish_destroy`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2706",
            "name": "mint",
            "docs": [
              "See [`Pallet::mint`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2707",
            "name": "burn",
            "docs": [
              "See [`Pallet::burn`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2708",
            "name": "transfer",
            "docs": [
              "See [`Pallet::transfer`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2709",
            "name": "transfer_keep_alive",
            "docs": [
              "See [`Pallet::transfer_keep_alive`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "270a",
            "name": "force_transfer",
            "docs": [
              "See [`Pallet::force_transfer`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "source",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "270b",
            "name": "freeze",
            "docs": [
              "See [`Pallet::freeze`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "270c",
            "name": "thaw",
            "docs": [
              "See [`Pallet::thaw`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "270d",
            "name": "freeze_asset",
            "docs": [
              "See [`Pallet::freeze_asset`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "270e",
            "name": "thaw_asset",
            "docs": [
              "See [`Pallet::thaw_asset`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "270f",
            "name": "transfer_ownership",
            "docs": [
              "See [`Pallet::transfer_ownership`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2710",
            "name": "set_team",
            "docs": [
              "See [`Pallet::set_team`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "issuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "freezer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2711",
            "name": "set_metadata",
            "docs": [
              "See [`Pallet::set_metadata`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "name",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "symbol",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "decimals",
                "type": "U8",
                "type_name": "u8"
              }
            ]
          },
          {
            "lookup": "2712",
            "name": "clear_metadata",
            "docs": [
              "See [`Pallet::clear_metadata`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2713",
            "name": "force_set_metadata",
            "docs": [
              "See [`Pallet::force_set_metadata`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "name",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "symbol",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "decimals",
                "type": "U8",
                "type_name": "u8"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2714",
            "name": "force_clear_metadata",
            "docs": [
              "See [`Pallet::force_clear_metadata`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2715",
            "name": "force_asset_status",
            "docs": [
              "See [`Pallet::force_asset_status`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "issuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "freezer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "min_balance",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              },
              {
                "name": "is_sufficient",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2716",
            "name": "approve_transfer",
            "docs": [
              "See [`Pallet::approve_transfer`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2717",
            "name": "cancel_approval",
            "docs": [
              "See [`Pallet::cancel_approval`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2718",
            "name": "force_cancel_approval",
            "docs": [
              "See [`Pallet::force_cancel_approval`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2719",
            "name": "transfer_approved",
            "docs": [
              "See [`Pallet::transfer_approved`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "destination",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "271a",
            "name": "touch",
            "docs": [
              "See [`Pallet::touch`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "271b",
            "name": "refund",
            "docs": [
              "See [`Pallet::refund`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "allow_burn",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "271c",
            "name": "set_min_balance",
            "docs": [
              "See [`Pallet::set_min_balance`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "min_balance",
                "type": "U128",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "271d",
            "name": "touch_other",
            "docs": [
              "See [`Pallet::touch_other`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "271e",
            "name": "refund_other",
            "docs": [
              "See [`Pallet::refund_other`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "271f",
            "name": "block",
            "docs": [
              "See [`Pallet::block`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 323
        },
        "events": [
          {
            "lookup": "2700",
            "name": "Created",
            "docs": [
              "Some asset class was created."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "creator",
              "owner"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2701",
            "name": "Issued",
            "docs": [
              "Some assets were issued."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "owner",
              "amount"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2702",
            "name": "Transferred",
            "docs": [
              "Some assets were transferred."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "from",
              "to",
              "amount"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2703",
            "name": "Burned",
            "docs": [
              "Some assets were destroyed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "owner",
              "balance"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2704",
            "name": "TeamChanged",
            "docs": [
              "The management team changed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "issuer",
              "admin",
              "freezer"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2705",
            "name": "OwnerChanged",
            "docs": [
              "The owner changed."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "owner"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "2706",
            "name": "Frozen",
            "docs": [
              "Some account `who` was frozen."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "who"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "2707",
            "name": "Thawed",
            "docs": [
              "Some account `who` was thawed."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "who"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "2708",
            "name": "AssetFrozen",
            "docs": [
              "Some asset `asset_id` was frozen."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "2709",
            "name": "AssetThawed",
            "docs": [
              "Some asset `asset_id` was thawed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "270a",
            "name": "AccountsDestroyed",
            "docs": [
              "Accounts were destroyed for given asset."
            ],
            "args": [
              "U32",
              "U32",
              "U32"
            ],
            "args_name": [
              "asset_id",
              "accounts_destroyed",
              "accounts_remaining"
            ],
            "args_type_name": [
              "AssetId",
              "u32",
              "u32"
            ]
          },
          {
            "lookup": "270b",
            "name": "ApprovalsDestroyed",
            "docs": [
              "Approvals were destroyed for given asset."
            ],
            "args": [
              "U32",
              "U32",
              "U32"
            ],
            "args_name": [
              "asset_id",
              "approvals_destroyed",
              "approvals_remaining"
            ],
            "args_type_name": [
              "AssetId",
              "u32",
              "u32"
            ]
          },
          {
            "lookup": "270c",
            "name": "DestructionStarted",
            "docs": [
              "An asset class is in the process of being destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "270d",
            "name": "Destroyed",
            "docs": [
              "An asset class was destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "270e",
            "name": "ForceCreated",
            "docs": [
              "Some asset class was force-created."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "owner"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "270f",
            "name": "MetadataSet",
            "docs": [
              "New metadata has been set for an asset."
            ],
            "args": [
              "U32",
              "Vec\u003cU8\u003e",
              "Vec\u003cU8\u003e",
              "U8",
              "Bool"
            ],
            "args_name": [
              "asset_id",
              "name",
              "symbol",
              "decimals",
              "is_frozen"
            ],
            "args_type_name": [
              "AssetId",
              "Bytes",
              "Bytes",
              "u8",
              "bool"
            ]
          },
          {
            "lookup": "2710",
            "name": "MetadataCleared",
            "docs": [
              "Metadata has been cleared for an asset."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "2711",
            "name": "ApprovedTransfer",
            "docs": [
              "(Additional) funds have been approved for transfer to a destination account."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "source",
              "delegate",
              "amount"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2712",
            "name": "ApprovalCancelled",
            "docs": [
              "An approval for account `delegate` was cancelled by `owner`."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "owner",
              "delegate"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2713",
            "name": "TransferredApproved",
            "docs": [
              "An `amount` was transferred in its entirety from `owner` to `destination` by",
              "the approved `delegate`."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "owner",
              "delegate",
              "destination",
              "amount"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2714",
            "name": "AssetStatusChanged",
            "docs": [
              "An asset has had its attributes changed by the `Force` origin."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "2715",
            "name": "AssetMinBalanceChanged",
            "docs": [
              "The min_balance of an asset has been updated by the asset owner."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "new_min_balance"
            ],
            "args_type_name": [
              "AssetId",
              "Balance"
            ]
          },
          {
            "lookup": "2716",
            "name": "Touched",
            "docs": [
              "Some account `who` was created with a deposit from `depositor`."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "who",
              "depositor"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2717",
            "name": "Blocked",
            "docs": [
              "Some account `who` was blocked."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "who"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 106
        },
        "constants": [
          {
            "name": "RemoveItemsLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "e8030000",
            "docs": [
              " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
              "",
              " Must be configured to result in a weight that makes each call fit in a block."
            ]
          },
          {
            "name": "AssetDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved for an asset."
            ]
          },
          {
            "name": "AssetAccountDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The amount of funds that must be reserved for a non-provider asset account to be",
              " maintained."
            ]
          },
          {
            "name": "MetadataDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved when adding metadata to your asset."
            ]
          },
          {
            "name": "MetadataDepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The additional funds that must be reserved for the number of bytes you store in your",
              " metadata."
            ]
          },
          {
            "name": "ApprovalDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The amount of funds that must be reserved when creating a new approval."
            ]
          },
          {
            "name": "StringLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum length of a name or symbol stored on-chain."
            ]
          }
        ],
        "errors": [
          {
            "name": "BalanceLow",
            "doc": [
              "Account balance must be greater than or equal to the transfer amount."
            ]
          },
          {
            "name": "NoAccount",
            "doc": [
              "The account to alter does not exist."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "name": "Unknown",
            "doc": [
              "The given asset ID is unknown."
            ]
          },
          {
            "name": "Frozen",
            "doc": [
              "The origin account is frozen."
            ]
          },
          {
            "name": "InUse",
            "doc": [
              "The asset ID is already taken."
            ]
          },
          {
            "name": "BadWitness",
            "doc": [
              "Invalid witness data given."
            ]
          },
          {
            "name": "MinBalanceZero",
            "doc": [
              "Minimum balance should be non-zero."
            ]
          },
          {
            "name": "UnavailableConsumer",
            "doc": [
              "Unable to increment the consumer reference counters on the account. Either no provider",
              "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
              "fewer then the maximum number of consumers has been reached."
            ]
          },
          {
            "name": "BadMetadata",
            "doc": [
              "Invalid metadata given."
            ]
          },
          {
            "name": "Unapproved",
            "doc": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "name": "WouldDie",
            "doc": [
              "The source account would not survive the transfer and it needs to stay alive."
            ]
          },
          {
            "name": "AlreadyExists",
            "doc": [
              "The asset-account already exists."
            ]
          },
          {
            "name": "NoDeposit",
            "doc": [
              "The asset-account doesn't have an associated deposit."
            ]
          },
          {
            "name": "WouldBurn",
            "doc": [
              "The operation would result in funds being burned."
            ]
          },
          {
            "name": "LiveAsset",
            "doc": [
              "The asset is a live asset and is actively being used. Usually emit for operations such",
              "as `start_destroy` which require the asset to be in a destroying state."
            ]
          },
          {
            "name": "AssetNotLive",
            "doc": [
              "The asset is not live, and likely being destroyed."
            ]
          },
          {
            "name": "IncorrectStatus",
            "doc": [
              "The asset status is not the expected status."
            ]
          },
          {
            "name": "NotFrozen",
            "doc": [
              "The asset should be frozen before the given operation."
            ]
          },
          {
            "name": "CallbackFailed",
            "doc": [
              "Callback action resulted in error"
            ]
          }
        ],
        "errors_value": {
          "type": 691
        },
        "index": 39
      },
      {
        "name": "PoolAssets",
        "prefix": "PoolAssets",
        "storage": [
          {
            "name": "Asset",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_assets:types:AssetDetails",
                "keys_id": 4,
                "value_id": 682
              }
            },
            "fallback": "0x00",
            "docs": [
              " Details of an asset."
            ]
          },
          {
            "name": "Account",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_assets:types:AssetAccount",
                "keys_id": 528,
                "value_id": 684
              }
            },
            "fallback": "0x00",
            "docs": [
              " The holdings of a specific account for a specific asset."
            ]
          },
          {
            "name": "Approvals",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]",
                  "[U8; 32]"
                ],
                "value": "pallet_assets:types:Approval",
                "keys_id": 687,
                "value_id": 688
              }
            },
            "fallback": "0x00",
            "docs": [
              " Approved balance transfers. First balance is the amount approved for transfer. Second",
              " is the amount of `T::Currency` reserved for storing this.",
              " First key is the asset ID, second key is the owner and third key is the delegate."
            ]
          },
          {
            "name": "Metadata",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_assets:types:AssetMetadata",
                "keys_id": 4,
                "value_id": 689
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000",
            "docs": [
              " Metadata of an asset."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2800",
            "name": "create",
            "docs": [
              "See [`Pallet::create`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "min_balance",
                "type": "U128",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2801",
            "name": "force_create",
            "docs": [
              "See [`Pallet::force_create`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "is_sufficient",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "min_balance",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2802",
            "name": "start_destroy",
            "docs": [
              "See [`Pallet::start_destroy`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2803",
            "name": "destroy_accounts",
            "docs": [
              "See [`Pallet::destroy_accounts`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2804",
            "name": "destroy_approvals",
            "docs": [
              "See [`Pallet::destroy_approvals`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2805",
            "name": "finish_destroy",
            "docs": [
              "See [`Pallet::finish_destroy`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2806",
            "name": "mint",
            "docs": [
              "See [`Pallet::mint`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2807",
            "name": "burn",
            "docs": [
              "See [`Pallet::burn`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2808",
            "name": "transfer",
            "docs": [
              "See [`Pallet::transfer`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2809",
            "name": "transfer_keep_alive",
            "docs": [
              "See [`Pallet::transfer_keep_alive`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "280a",
            "name": "force_transfer",
            "docs": [
              "See [`Pallet::force_transfer`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "source",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "280b",
            "name": "freeze",
            "docs": [
              "See [`Pallet::freeze`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "280c",
            "name": "thaw",
            "docs": [
              "See [`Pallet::thaw`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "280d",
            "name": "freeze_asset",
            "docs": [
              "See [`Pallet::freeze_asset`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "280e",
            "name": "thaw_asset",
            "docs": [
              "See [`Pallet::thaw_asset`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "280f",
            "name": "transfer_ownership",
            "docs": [
              "See [`Pallet::transfer_ownership`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2810",
            "name": "set_team",
            "docs": [
              "See [`Pallet::set_team`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "issuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "freezer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2811",
            "name": "set_metadata",
            "docs": [
              "See [`Pallet::set_metadata`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "name",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "symbol",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "decimals",
                "type": "U8",
                "type_name": "u8"
              }
            ]
          },
          {
            "lookup": "2812",
            "name": "clear_metadata",
            "docs": [
              "See [`Pallet::clear_metadata`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2813",
            "name": "force_set_metadata",
            "docs": [
              "See [`Pallet::force_set_metadata`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "name",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "symbol",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "decimals",
                "type": "U8",
                "type_name": "u8"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2814",
            "name": "force_clear_metadata",
            "docs": [
              "See [`Pallet::force_clear_metadata`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "2815",
            "name": "force_asset_status",
            "docs": [
              "See [`Pallet::force_asset_status`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "issuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "freezer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "min_balance",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              },
              {
                "name": "is_sufficient",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2816",
            "name": "approve_transfer",
            "docs": [
              "See [`Pallet::approve_transfer`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "2817",
            "name": "cancel_approval",
            "docs": [
              "See [`Pallet::cancel_approval`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2818",
            "name": "force_cancel_approval",
            "docs": [
              "See [`Pallet::force_cancel_approval`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2819",
            "name": "transfer_approved",
            "docs": [
              "See [`Pallet::transfer_approved`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "destination",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "281a",
            "name": "touch",
            "docs": [
              "See [`Pallet::touch`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              }
            ]
          },
          {
            "lookup": "281b",
            "name": "refund",
            "docs": [
              "See [`Pallet::refund`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "allow_burn",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "281c",
            "name": "set_min_balance",
            "docs": [
              "See [`Pallet::set_min_balance`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "min_balance",
                "type": "U128",
                "type_name": "Balance"
              }
            ]
          },
          {
            "lookup": "281d",
            "name": "touch_other",
            "docs": [
              "See [`Pallet::touch_other`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "281e",
            "name": "refund_other",
            "docs": [
              "See [`Pallet::refund_other`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "281f",
            "name": "block",
            "docs": [
              "See [`Pallet::block`]."
            ],
            "args": [
              {
                "name": "id",
                "type": "compact\u003cU32\u003e",
                "type_name": "AssetIdParameter"
              },
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 324
        },
        "events": [
          {
            "lookup": "2800",
            "name": "Created",
            "docs": [
              "Some asset class was created."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "creator",
              "owner"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2801",
            "name": "Issued",
            "docs": [
              "Some assets were issued."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "owner",
              "amount"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2802",
            "name": "Transferred",
            "docs": [
              "Some assets were transferred."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "from",
              "to",
              "amount"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2803",
            "name": "Burned",
            "docs": [
              "Some assets were destroyed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "owner",
              "balance"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2804",
            "name": "TeamChanged",
            "docs": [
              "The management team changed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "issuer",
              "admin",
              "freezer"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2805",
            "name": "OwnerChanged",
            "docs": [
              "The owner changed."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "owner"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "2806",
            "name": "Frozen",
            "docs": [
              "Some account `who` was frozen."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "who"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "2807",
            "name": "Thawed",
            "docs": [
              "Some account `who` was thawed."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "who"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "2808",
            "name": "AssetFrozen",
            "docs": [
              "Some asset `asset_id` was frozen."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "2809",
            "name": "AssetThawed",
            "docs": [
              "Some asset `asset_id` was thawed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "280a",
            "name": "AccountsDestroyed",
            "docs": [
              "Accounts were destroyed for given asset."
            ],
            "args": [
              "U32",
              "U32",
              "U32"
            ],
            "args_name": [
              "asset_id",
              "accounts_destroyed",
              "accounts_remaining"
            ],
            "args_type_name": [
              "AssetId",
              "u32",
              "u32"
            ]
          },
          {
            "lookup": "280b",
            "name": "ApprovalsDestroyed",
            "docs": [
              "Approvals were destroyed for given asset."
            ],
            "args": [
              "U32",
              "U32",
              "U32"
            ],
            "args_name": [
              "asset_id",
              "approvals_destroyed",
              "approvals_remaining"
            ],
            "args_type_name": [
              "AssetId",
              "u32",
              "u32"
            ]
          },
          {
            "lookup": "280c",
            "name": "DestructionStarted",
            "docs": [
              "An asset class is in the process of being destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "280d",
            "name": "Destroyed",
            "docs": [
              "An asset class was destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "280e",
            "name": "ForceCreated",
            "docs": [
              "Some asset class was force-created."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "owner"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          },
          {
            "lookup": "280f",
            "name": "MetadataSet",
            "docs": [
              "New metadata has been set for an asset."
            ],
            "args": [
              "U32",
              "Vec\u003cU8\u003e",
              "Vec\u003cU8\u003e",
              "U8",
              "Bool"
            ],
            "args_name": [
              "asset_id",
              "name",
              "symbol",
              "decimals",
              "is_frozen"
            ],
            "args_type_name": [
              "AssetId",
              "Bytes",
              "Bytes",
              "u8",
              "bool"
            ]
          },
          {
            "lookup": "2810",
            "name": "MetadataCleared",
            "docs": [
              "Metadata has been cleared for an asset."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "2811",
            "name": "ApprovedTransfer",
            "docs": [
              "(Additional) funds have been approved for transfer to a destination account."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "source",
              "delegate",
              "amount"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2812",
            "name": "ApprovalCancelled",
            "docs": [
              "An approval for account `delegate` was cancelled by `owner`."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "owner",
              "delegate"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2813",
            "name": "TransferredApproved",
            "docs": [
              "An `amount` was transferred in its entirety from `owner` to `destination` by",
              "the approved `delegate`."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "owner",
              "delegate",
              "destination",
              "amount"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "2814",
            "name": "AssetStatusChanged",
            "docs": [
              "An asset has had its attributes changed by the `Force` origin."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "asset_id"
            ],
            "args_type_name": [
              "AssetId"
            ]
          },
          {
            "lookup": "2815",
            "name": "AssetMinBalanceChanged",
            "docs": [
              "The min_balance of an asset has been updated by the asset owner."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "asset_id",
              "new_min_balance"
            ],
            "args_type_name": [
              "AssetId",
              "Balance"
            ]
          },
          {
            "lookup": "2816",
            "name": "Touched",
            "docs": [
              "Some account `who` was created with a deposit from `depositor`."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "who",
              "depositor"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2817",
            "name": "Blocked",
            "docs": [
              "Some account `who` was blocked."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "asset_id",
              "who"
            ],
            "args_type_name": [
              "AssetId",
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 107
        },
        "constants": [
          {
            "name": "RemoveItemsLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "e8030000",
            "docs": [
              " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
              "",
              " Must be configured to result in a weight that makes each call fit in a block."
            ]
          },
          {
            "name": "AssetDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved for an asset."
            ]
          },
          {
            "name": "AssetAccountDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The amount of funds that must be reserved for a non-provider asset account to be",
              " maintained."
            ]
          },
          {
            "name": "MetadataDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved when adding metadata to your asset."
            ]
          },
          {
            "name": "MetadataDepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The additional funds that must be reserved for the number of bytes you store in your",
              " metadata."
            ]
          },
          {
            "name": "ApprovalDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The amount of funds that must be reserved when creating a new approval."
            ]
          },
          {
            "name": "StringLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum length of a name or symbol stored on-chain."
            ]
          }
        ],
        "errors": [
          {
            "name": "BalanceLow",
            "doc": [
              "Account balance must be greater than or equal to the transfer amount."
            ]
          },
          {
            "name": "NoAccount",
            "doc": [
              "The account to alter does not exist."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "name": "Unknown",
            "doc": [
              "The given asset ID is unknown."
            ]
          },
          {
            "name": "Frozen",
            "doc": [
              "The origin account is frozen."
            ]
          },
          {
            "name": "InUse",
            "doc": [
              "The asset ID is already taken."
            ]
          },
          {
            "name": "BadWitness",
            "doc": [
              "Invalid witness data given."
            ]
          },
          {
            "name": "MinBalanceZero",
            "doc": [
              "Minimum balance should be non-zero."
            ]
          },
          {
            "name": "UnavailableConsumer",
            "doc": [
              "Unable to increment the consumer reference counters on the account. Either no provider",
              "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
              "fewer then the maximum number of consumers has been reached."
            ]
          },
          {
            "name": "BadMetadata",
            "doc": [
              "Invalid metadata given."
            ]
          },
          {
            "name": "Unapproved",
            "doc": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "name": "WouldDie",
            "doc": [
              "The source account would not survive the transfer and it needs to stay alive."
            ]
          },
          {
            "name": "AlreadyExists",
            "doc": [
              "The asset-account already exists."
            ]
          },
          {
            "name": "NoDeposit",
            "doc": [
              "The asset-account doesn't have an associated deposit."
            ]
          },
          {
            "name": "WouldBurn",
            "doc": [
              "The operation would result in funds being burned."
            ]
          },
          {
            "name": "LiveAsset",
            "doc": [
              "The asset is a live asset and is actively being used. Usually emit for operations such",
              "as `start_destroy` which require the asset to be in a destroying state."
            ]
          },
          {
            "name": "AssetNotLive",
            "doc": [
              "The asset is not live, and likely being destroyed."
            ]
          },
          {
            "name": "IncorrectStatus",
            "doc": [
              "The asset status is not the expected status."
            ]
          },
          {
            "name": "NotFrozen",
            "doc": [
              "The asset should be frozen before the given operation."
            ]
          },
          {
            "name": "CallbackFailed",
            "doc": [
              "Callback action resulted in error"
            ]
          }
        ],
        "errors_value": {
          "type": 692
        },
        "index": 40
      },
      {
        "name": "Mmr",
        "prefix": "Mmr",
        "storage": [
          {
            "name": "RootHash",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "H256",
              "PlainTypeValue": 12
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Latest MMR Root hash."
            ]
          },
          {
            "name": "NumberOfLeaves",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U64",
              "PlainTypeValue": 11
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Current size of the MMR (number of leaves)."
            ]
          },
          {
            "name": "Nodes",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "U64"
                ],
                "value": "H256",
                "keys_id": 11,
                "value_id": 12
              }
            },
            "fallback": "0x00",
            "docs": [
              " Hashes of the nodes in the MMR.",
              "",
              " Note this collection only contains MMR peaks, the inner nodes (and leaves)",
              " are pruned and only stored in the Offchain DB."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 41
      },
      {
        "name": "Lottery",
        "prefix": "Lottery",
        "storage": [
          {
            "name": "LotteryIndex",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": null
          },
          {
            "name": "Lottery",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_lottery:LotteryConfig",
              "PlainTypeValue": 693
            },
            "fallback": "0x00",
            "docs": [
              " The configuration for the current lottery."
            ]
          },
          {
            "name": "Participants",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:U32bounded_collections:bounded_vec:BoundedVec@695",
                "keys_id": 0,
                "value_id": 694
              }
            },
            "fallback": "0x0000000000",
            "docs": [
              " Users who have purchased a ticket. (Lottery Index, Tickets Purchased)"
            ]
          },
          {
            "name": "TicketsCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Total number of tickets sold."
            ]
          },
          {
            "name": "Tickets",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "[U8; 32]",
                "keys_id": 4,
                "value_id": 0
              }
            },
            "fallback": "0x00",
            "docs": [
              " Each ticket's owner.",
              "",
              " May have residual storage from previous lotteries. Use `TicketsCount` to see which ones",
              " are actually valid ticket mappings."
            ]
          },
          {
            "name": "CallIndices",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U8U8\u003e",
              "PlainTypeValue": 695
            },
            "fallback": "0x00",
            "docs": [
              " The calls stored in this pallet to be used in an active lottery if configured",
              " by `Config::ValidateCall`."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2a00",
            "name": "buy_ticket",
            "docs": [
              "See [`Pallet::buy_ticket`]."
            ],
            "args": [
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "2a01",
            "name": "set_calls",
            "docs": [
              "See [`Pallet::set_calls`]."
            ],
            "args": [
              {
                "name": "calls",
                "type": "Vec\u003cCall\u003e",
                "type_name": "Vec\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          },
          {
            "lookup": "2a02",
            "name": "start_lottery",
            "docs": [
              "See [`Pallet::start_lottery`]."
            ],
            "args": [
              {
                "name": "price",
                "type": "U128",
                "type_name": "BalanceOf"
              },
              {
                "name": "length",
                "type": "U32",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "delay",
                "type": "U32",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "repeat",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2a03",
            "name": "stop_repeat",
            "docs": [
              "See [`Pallet::stop_repeat`]."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 325
        },
        "events": [
          {
            "lookup": "2a00",
            "name": "LotteryStarted",
            "docs": [
              "A lottery has been started!"
            ],
            "args": null
          },
          {
            "lookup": "2a01",
            "name": "CallsUpdated",
            "docs": [
              "A new set of calls have been set!"
            ],
            "args": null
          },
          {
            "lookup": "2a02",
            "name": "Winner",
            "docs": [
              "A winner has been chosen!"
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "winner",
              "lottery_balance"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "2a03",
            "name": "TicketBought",
            "docs": [
              "A ticket has been bought!"
            ],
            "args": [
              "[U8; 32]",
              "Tuple:U8U8"
            ],
            "args_name": [
              "who",
              "call_index"
            ],
            "args_type_name": [
              "AccountId",
              "CallIndex"
            ]
          }
        ],
        "events_value": {
          "type": 108
        },
        "constants": [
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 580,
            "constants_value": "70792f6c6f74746f",
            "docs": [
              " The Lottery's pallet id"
            ]
          },
          {
            "name": "MaxCalls",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The max number of calls available in a single lottery."
            ]
          },
          {
            "name": "MaxGenerateRandom",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " Number of time we should try to generate a random number that has no modulo bias.",
              " The larger this number, the more potential computation is used for picking the winner,",
              " but also the more likely that the chosen winner is done fairly."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotConfigured",
            "doc": [
              "A lottery has not been configured."
            ]
          },
          {
            "name": "InProgress",
            "doc": [
              "A lottery is already in progress."
            ]
          },
          {
            "name": "AlreadyEnded",
            "doc": [
              "A lottery has already ended."
            ]
          },
          {
            "name": "InvalidCall",
            "doc": [
              "The call is not valid for an open lottery."
            ]
          },
          {
            "name": "AlreadyParticipating",
            "doc": [
              "You are already participating in the lottery with this call."
            ]
          },
          {
            "name": "TooManyCalls",
            "doc": [
              "Too many calls for a single lottery."
            ]
          },
          {
            "name": "EncodingFailed",
            "doc": [
              "Failed to encode calls"
            ]
          }
        ],
        "errors_value": {
          "type": 697
        },
        "index": 42
      },
      {
        "name": "Nis",
        "prefix": "Nis",
        "storage": [
          {
            "name": "QueueTotals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cTuple:U32U128\u003e",
              "PlainTypeValue": 698
            },
            "fallback": "
            "docs": [
              " The totals of items and balances within each queue. Saves a lot of storage reads in the",
              " case of sparsely packed queues.",
              "",
              " The vector is indexed by duration in `Period`s, offset by one, so information on the queue",
              " whose duration is one `Period` would be storage `0`."
            ]
          },
          {
            "name": "Queues",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cpallet_nis:pallet:Bid\u003e",
                "keys_id": 4,
                "value_id": 699
              }
            },
            "fallback": "0x00",
            "docs": [
              " The queues of bids. Indexed by duration (in `Period`s)."
            ]
          },
          {
            "name": "Summary",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_nis:pallet:SummaryRecord",
              "PlainTypeValue": 702
            },
            "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Summary information over the general state."
            ]
          },
          {
            "name": "Receipts",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nis:pallet:ReceiptRecord",
                "keys_id": 4,
                "value_id": 703
              }
            },
            "fallback": "0x00",
            "docs": [
              " The currently outstanding receipts, indexed according to the order of creation."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2b00",
            "name": "place_bid",
            "docs": [
              "See [`Pallet::place_bid`]."
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "duration",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2b01",
            "name": "retract_bid",
            "docs": [
              "See [`Pallet::retract_bid`]."
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "duration",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2b02",
            "name": "fund_deficit",
            "docs": [
              "See [`Pallet::fund_deficit`]."
            ],
            "args": null
          },
          {
            "lookup": "2b03",
            "name": "thaw_private",
            "docs": [
              "See [`Pallet::thaw_private`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReceiptIndex"
              },
              {
                "name": "maybe_proportion",
                "type": "option\u003cU64\u003e",
                "type_name": "Option\u003cPerquintill\u003e"
              }
            ]
          },
          {
            "lookup": "2b04",
            "name": "thaw_communal",
            "docs": [
              "See [`Pallet::thaw_communal`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReceiptIndex"
              }
            ]
          },
          {
            "lookup": "2b05",
            "name": "communify",
            "docs": [
              "See [`Pallet::communify`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReceiptIndex"
              }
            ]
          },
          {
            "lookup": "2b06",
            "name": "privatize",
            "docs": [
              "See [`Pallet::privatize`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ReceiptIndex"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 326
        },
        "events": [
          {
            "lookup": "2b00",
            "name": "BidPlaced",
            "docs": [
              "A bid was successfully placed."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U32"
            ],
            "args_name": [
              "who",
              "amount",
              "duration"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "u32"
            ]
          },
          {
            "lookup": "2b01",
            "name": "BidRetracted",
            "docs": [
              "A bid was successfully removed (before being accepted)."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U32"
            ],
            "args_name": [
              "who",
              "amount",
              "duration"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "u32"
            ]
          },
          {
            "lookup": "2b02",
            "name": "BidDropped",
            "docs": [
              "A bid was dropped from a queue because of another, more substantial, bid was present."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U32"
            ],
            "args_name": [
              "who",
              "amount",
              "duration"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "u32"
            ]
          },
          {
            "lookup": "2b03",
            "name": "Issued",
            "docs": [
              "A bid was accepted. The balance may not be released until expiry."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "U64",
              "U128"
            ],
            "args_name": [
              "index",
              "expiry",
              "who",
              "proportion",
              "amount"
            ],
            "args_type_name": [
              "ReceiptIndex",
              "BlockNumberFor",
              "AccountId",
              "Perquintill",
              "BalanceOf"
            ]
          },
          {
            "lookup": "2b04",
            "name": "Thawed",
            "docs": [
              "An receipt has been (at least partially) thawed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U64",
              "U128",
              "Bool"
            ],
            "args_name": [
              "index",
              "who",
              "proportion",
              "amount",
              "dropped"
            ],
            "args_type_name": [
              "ReceiptIndex",
              "AccountId",
              "Perquintill",
              "BalanceOf",
              "bool"
            ]
          },
          {
            "lookup": "2b05",
            "name": "Funded",
            "docs": [
              "An automatic funding of the deficit was made."
            ],
            "args": [
              "U128"
            ],
            "args_name": [
              "deficit"
            ],
            "args_type_name": [
              "BalanceOf"
            ]
          },
          {
            "lookup": "2b06",
            "name": "Transferred",
            "docs": [
              "A receipt was transfered."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U32"
            ],
            "args_name": [
              "from",
              "to",
              "index"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "ReceiptIndex"
            ]
          }
        ],
        "events_value": {
          "type": 110
        },
        "constants": [
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 580,
            "constants_value": "70792f6e69732020",
            "docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "name": "QueueCount",
            "type": "U32",
            "type_value": 4,
            "constants_value": "2c010000",
            "docs": [
              " Number of duration queues in total. This sets the maximum duration supported, which is",
              " this value multiplied by `Period`."
            ]
          },
          {
            "name": "MaxQueueLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "e8030000",
            "docs": [
              " Maximum number of items that may be in each duration queue.",
              "",
              " Must be larger than zero."
            ]
          },
          {
            "name": "FifoQueueLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "f4010000",
            "docs": [
              " Portion of the queue which is free from ordering and just a FIFO.",
              "",
              " Must be no greater than `MaxQueueLen`."
            ]
          },
          {
            "name": "BasePeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "002f0d00",
            "docs": [
              " The base period for the duration queues. This is the common multiple across all",
              " supported freezing durations that can be bid upon."
            ]
          },
          {
            "name": "MinBid",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The minimum amount of funds that may be placed in a bid. Note that this",
              " does not actually limit the amount which may be represented in a receipt since bids may",
              " be split up by the system.",
              "",
              " It should be at least big enough to ensure that there is no possible storage spam attack",
              " or queue-filling attack."
            ]
          },
          {
            "name": "MinReceipt",
            "type": "U64",
            "type_value": 111,
            "constants_value": "0000c16ff2862300",
            "docs": [
              " The minimum amount of funds which may intentionally be left remaining under a single",
              " receipt."
            ]
          },
          {
            "name": "IntakePeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The number of blocks between consecutive attempts to dequeue bids and create receipts.",
              "",
              " A larger value results in fewer storage hits each block, but a slower period to get to",
              " the target."
            ]
          },
          {
            "name": "MaxIntakeWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "0700d0ed902e139999999999999919",
            "docs": [
              " The maximum amount of bids that can consolidated into receipts in a single intake. A",
              " larger value here means less of the block available for transactions should there be a",
              " glut of bids."
            ]
          },
          {
            "name": "ThawThrottle",
            "type": "Tuple:U64U32",
            "type_value": 704,
            "constants_value": "0000d9e9ac2d780305000000",
            "docs": [
              " The maximum proportion which may be thawed and the period over which it is reset."
            ]
          }
        ],
        "errors": [
          {
            "name": "DurationTooSmall",
            "doc": [
              "The duration of the bid is less than one."
            ]
          },
          {
            "name": "DurationTooBig",
            "doc": [
              "The duration is the bid is greater than the number of queues."
            ]
          },
          {
            "name": "AmountTooSmall",
            "doc": [
              "The amount of the bid is less than the minimum allowed."
            ]
          },
          {
            "name": "BidTooLow",
            "doc": [
              "The queue for the bid's duration is full and the amount bid is too low to get in",
              "through replacing an existing bid."
            ]
          },
          {
            "name": "UnknownReceipt",
            "doc": [
              "Receipt index is unknown."
            ]
          },
          {
            "name": "NotOwner",
            "doc": [
              "Not the owner of the receipt."
            ]
          },
          {
            "name": "NotExpired",
            "doc": [
              "Bond not yet at expiry date."
            ]
          },
          {
            "name": "UnknownBid",
            "doc": [
              "The given bid for retraction is not found."
            ]
          },
          {
            "name": "PortionTooBig",
            "doc": [
              "The portion supplied is beyond the value of the receipt."
            ]
          },
          {
            "name": "Unfunded",
            "doc": [
              "Not enough funds are held to pay out."
            ]
          },
          {
            "name": "AlreadyFunded",
            "doc": [
              "There are enough funds for what is required."
            ]
          },
          {
            "name": "Throttled",
            "doc": [
              "The thaw throttle has been reached for this period."
            ]
          },
          {
            "name": "MakesDust",
            "doc": [
              "The operation would result in a receipt worth an insignficant value."
            ]
          },
          {
            "name": "AlreadyCommunal",
            "doc": [
              "The receipt is already communal."
            ]
          },
          {
            "name": "AlreadyPrivate",
            "doc": [
              "The receipt is already private."
            ]
          }
        ],
        "errors_value": {
          "type": 705
        },
        "index": 43
      },
      {
        "name": "Uniques",
        "prefix": "Uniques",
        "storage": [
          {
            "name": "Class",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_uniques:types:CollectionDetails",
                "keys_id": 4,
                "value_id": 706
              }
            },
            "fallback": "0x00",
            "docs": [
              " Details of a collection."
            ]
          },
          {
            "name": "OwnershipAcceptance",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 0,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " The collection, if any, of which an account is willing to take ownership."
            ]
          },
          {
            "name": "Account",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U32",
                  "U32"
                ],
                "value": "NULL",
                "keys_id": 707,
                "value_id": 32
              }
            },
            "fallback": "0x00",
            "docs": [
              " The items held by any given account; set out this way so that items owned by a single",
              " account can be enumerated."
            ]
          },
          {
            "name": "ClassAccount",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U32"
                ],
                "value": "NULL",
                "keys_id": 532,
                "value_id": 32
              }
            },
            "fallback": "0x00",
            "docs": [
              " The collections owned by any given account; set out this way so that collections owned by",
              " a single account can be enumerated."
            ]
          },
          {
            "name": "Asset",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_uniques:types:ItemDetails",
                "keys_id": 94,
                "value_id": 708
              }
            },
            "fallback": "0x00",
            "docs": [
              " The items in existence and their ownership details."
            ]
          },
          {
            "name": "ClassMetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_uniques:types:CollectionMetadata",
                "keys_id": 4,
                "value_id": 709
              }
            },
            "fallback": "0x00",
            "docs": [
              " Metadata of a collection."
            ]
          },
          {
            "name": "InstanceMetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_uniques:types:ItemMetadata",
                "keys_id": 94,
                "value_id": 710
              }
            },
            "fallback": "0x00",
            "docs": [
              " Metadata of an item."
            ]
          },
          {
            "name": "Attribute",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "option\u003cU32\u003e",
                  "Vec\u003cU8\u003e"
                ],
                "value": "Tuple:Vec\u003cU8\u003eU128",
                "keys_id": 711,
                "value_id": 712
              }
            },
            "fallback": "0x00",
            "docs": [
              " Attributes of a collection."
            ]
          },
          {
            "name": "ItemPriceOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "Tuple:U128option\u003c[U8; 32]\u003e",
                "keys_id": 94,
                "value_id": 713
              }
            },
            "fallback": "0x00",
            "docs": [
              " Price of an asset instance."
            ]
          },
          {
            "name": "CollectionMaxSupply",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " Keeps track of the number of items a collection might have."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2c00",
            "name": "create",
            "docs": [
              "See [`Pallet::create`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2c01",
            "name": "force_create",
            "docs": [
              "See [`Pallet::force_create`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "free_holding",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2c02",
            "name": "destroy",
            "docs": [
              "See [`Pallet::destroy`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "witness",
                "type": "pallet_uniques:types:DestroyWitness",
                "type_name": "DestroyWitness"
              }
            ]
          },
          {
            "lookup": "2c03",
            "name": "mint",
            "docs": [
              "See [`Pallet::mint`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2c04",
            "name": "burn",
            "docs": [
              "See [`Pallet::burn`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "check_owner",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "2c05",
            "name": "transfer",
            "docs": [
              "See [`Pallet::transfer`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2c06",
            "name": "redeposit",
            "docs": [
              "See [`Pallet::redeposit`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "items",
                "type": "Vec\u003cU32\u003e",
                "type_name": "Vec\u003cItemId\u003e"
              }
            ]
          },
          {
            "lookup": "2c07",
            "name": "freeze",
            "docs": [
              "See [`Pallet::freeze`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2c08",
            "name": "thaw",
            "docs": [
              "See [`Pallet::thaw`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2c09",
            "name": "freeze_collection",
            "docs": [
              "See [`Pallet::freeze_collection`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              }
            ]
          },
          {
            "lookup": "2c0a",
            "name": "thaw_collection",
            "docs": [
              "See [`Pallet::thaw_collection`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              }
            ]
          },
          {
            "lookup": "2c0b",
            "name": "transfer_ownership",
            "docs": [
              "See [`Pallet::transfer_ownership`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2c0c",
            "name": "set_team",
            "docs": [
              "See [`Pallet::set_team`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "issuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "freezer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2c0d",
            "name": "approve_transfer",
            "docs": [
              "See [`Pallet::approve_transfer`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2c0e",
            "name": "cancel_approval",
            "docs": [
              "See [`Pallet::cancel_approval`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "maybe_check_delegate",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "2c0f",
            "name": "force_item_status",
            "docs": [
              "See [`Pallet::force_item_status`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "issuer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "freezer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "free_holding",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2c10",
            "name": "set_attribute",
            "docs": [
              "See [`Pallet::set_attribute`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "key",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, KeyLimit\u003e"
              },
              {
                "name": "value",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, ValueLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2c11",
            "name": "clear_attribute",
            "docs": [
              "See [`Pallet::clear_attribute`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "key",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, KeyLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2c12",
            "name": "set_metadata",
            "docs": [
              "See [`Pallet::set_metadata`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, StringLimit\u003e"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2c13",
            "name": "clear_metadata",
            "docs": [
              "See [`Pallet::clear_metadata`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2c14",
            "name": "set_collection_metadata",
            "docs": [
              "See [`Pallet::set_collection_metadata`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, StringLimit\u003e"
              },
              {
                "name": "is_frozen",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2c15",
            "name": "clear_collection_metadata",
            "docs": [
              "See [`Pallet::clear_collection_metadata`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              }
            ]
          },
          {
            "lookup": "2c16",
            "name": "set_accept_ownership",
            "docs": [
              "See [`Pallet::set_accept_ownership`]."
            ],
            "args": [
              {
                "name": "maybe_collection",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cCollectionId\u003e"
              }
            ]
          },
          {
            "lookup": "2c17",
            "name": "set_collection_max_supply",
            "docs": [
              "See [`Pallet::set_collection_max_supply`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "max_supply",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2c18",
            "name": "set_price",
            "docs": [
              "See [`Pallet::set_price`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "price",
                "type": "option\u003cU128\u003e",
                "type_name": "Option\u003cItemPrice\u003e"
              },
              {
                "name": "whitelisted_buyer",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "2c19",
            "name": "buy_item",
            "docs": [
              "See [`Pallet::buy_item`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "bid_price",
                "type": "U128",
                "type_name": "ItemPrice"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 328
        },
        "events": [
          {
            "lookup": "2c00",
            "name": "Created",
            "docs": [
              "A `collection` was created."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "creator",
              "owner"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2c01",
            "name": "ForceCreated",
            "docs": [
              "A `collection` was force-created."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "owner"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId"
            ]
          },
          {
            "lookup": "2c02",
            "name": "Destroyed",
            "docs": [
              "A `collection` was destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "collection"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2c03",
            "name": "Issued",
            "docs": [
              "An `item` was issued."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "owner"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2c04",
            "name": "Transferred",
            "docs": [
              "An `item` was transferred."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "from",
              "to"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2c05",
            "name": "Burned",
            "docs": [
              "An `item` was destroyed."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "owner"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2c06",
            "name": "Frozen",
            "docs": [
              "Some `item` was frozen."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "collection",
              "item"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2c07",
            "name": "Thawed",
            "docs": [
              "Some `item` was thawed."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "collection",
              "item"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2c08",
            "name": "CollectionFrozen",
            "docs": [
              "Some `collection` was frozen."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "collection"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2c09",
            "name": "CollectionThawed",
            "docs": [
              "Some `collection` was thawed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "collection"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2c0a",
            "name": "OwnerChanged",
            "docs": [
              "The owner changed."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "new_owner"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId"
            ]
          },
          {
            "lookup": "2c0b",
            "name": "TeamChanged",
            "docs": [
              "The management team changed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "issuer",
              "admin",
              "freezer"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2c0c",
            "name": "ApprovedTransfer",
            "docs": [
              "An `item` of a `collection` has been approved by the `owner` for transfer by",
              "a `delegate`."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "owner",
              "delegate"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2c0d",
            "name": "ApprovalCancelled",
            "docs": [
              "An approval for a `delegate` account to transfer the `item` of an item",
              "`collection` was cancelled by its `owner`."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "owner",
              "delegate"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2c0e",
            "name": "ItemStatusChanged",
            "docs": [
              "A `collection` has had its attributes changed by the `Force` origin."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "collection"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2c0f",
            "name": "CollectionMetadataSet",
            "docs": [
              "New metadata has been set for a `collection`."
            ],
            "args": [
              "U32",
              "Vec\u003cU8\u003e",
              "Bool"
            ],
            "args_name": [
              "collection",
              "data",
              "is_frozen"
            ],
            "args_type_name": [
              "CollectionId",
              "BoundedVec\u003cu8, StringLimit\u003e",
              "bool"
            ]
          },
          {
            "lookup": "2c10",
            "name": "CollectionMetadataCleared",
            "docs": [
              "Metadata has been cleared for a `collection`."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "collection"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2c11",
            "name": "MetadataSet",
            "docs": [
              "New metadata has been set for an item."
            ],
            "args": [
              "U32",
              "U32",
              "Vec\u003cU8\u003e",
              "Bool"
            ],
            "args_name": [
              "collection",
              "item",
              "data",
              "is_frozen"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "BoundedVec\u003cu8, StringLimit\u003e",
              "bool"
            ]
          },
          {
            "lookup": "2c12",
            "name": "MetadataCleared",
            "docs": [
              "Metadata has been cleared for an item."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "collection",
              "item"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2c13",
            "name": "Redeposited",
            "docs": [
              "Metadata has been cleared for an item."
            ],
            "args": [
              "U32",
              "Vec\u003cU32\u003e"
            ],
            "args_name": [
              "collection",
              "successful_items"
            ],
            "args_type_name": [
              "CollectionId",
              "Vec\u003cItemId\u003e"
            ]
          },
          {
            "lookup": "2c14",
            "name": "AttributeSet",
            "docs": [
              "New attribute metadata has been set for a `collection` or `item`."
            ],
            "args": [
              "U32",
              "option\u003cU32\u003e",
              "Vec\u003cU8\u003e",
              "Vec\u003cU8\u003e"
            ],
            "args_name": [
              "collection",
              "maybe_item",
              "key",
              "value"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cItemId\u003e",
              "BoundedVec\u003cu8, KeyLimit\u003e",
              "BoundedVec\u003cu8, ValueLimit\u003e"
            ]
          },
          {
            "lookup": "2c15",
            "name": "AttributeCleared",
            "docs": [
              "Attribute metadata has been cleared for a `collection` or `item`."
            ],
            "args": [
              "U32",
              "option\u003cU32\u003e",
              "Vec\u003cU8\u003e"
            ],
            "args_name": [
              "collection",
              "maybe_item",
              "key"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cItemId\u003e",
              "BoundedVec\u003cu8, KeyLimit\u003e"
            ]
          },
          {
            "lookup": "2c16",
            "name": "OwnershipAcceptanceChanged",
            "docs": [
              "Ownership acceptance has changed for an account."
            ],
            "args": [
              "[U8; 32]",
              "option\u003cU32\u003e"
            ],
            "args_name": [
              "who",
              "maybe_collection"
            ],
            "args_type_name": [
              "AccountId",
              "Option\u003cCollectionId\u003e"
            ]
          },
          {
            "lookup": "2c17",
            "name": "CollectionMaxSupplySet",
            "docs": [
              "Max supply has been set for a collection."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "collection",
              "max_supply"
            ],
            "args_type_name": [
              "CollectionId",
              "u32"
            ]
          },
          {
            "lookup": "2c18",
            "name": "ItemPriceSet",
            "docs": [
              "The price was set for the instance."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_name": [
              "collection",
              "item",
              "price",
              "whitelisted_buyer"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "ItemPrice",
              "Option\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2c19",
            "name": "ItemPriceRemoved",
            "docs": [
              "The price for the instance was removed."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "collection",
              "item"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2c1a",
            "name": "ItemBought",
            "docs": [
              "An item was bought."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "price",
              "seller",
              "buyer"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "ItemPrice",
              "AccountId",
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 112
        },
        "constants": [
          {
            "name": "CollectionDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved for collection."
            ]
          },
          {
            "name": "ItemDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved for an item."
            ]
          },
          {
            "name": "MetadataDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved when adding metadata to your item."
            ]
          },
          {
            "name": "AttributeDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved when adding an attribute to an item."
            ]
          },
          {
            "name": "DepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The additional funds that must be reserved for the number of bytes store in metadata,",
              " either \"normal\" metadata or attribute metadata."
            ]
          },
          {
            "name": "StringLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80000000",
            "docs": [
              " The maximum length of data stored on-chain."
            ]
          },
          {
            "name": "KeyLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "20000000",
            "docs": [
              " The maximum length of an attribute key."
            ]
          },
          {
            "name": "ValueLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "40000000",
            "docs": [
              " The maximum length of an attribute value."
            ]
          }
        ],
        "errors": [
          {
            "name": "NoPermission",
            "doc": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "name": "UnknownCollection",
            "doc": [
              "The given item ID is unknown."
            ]
          },
          {
            "name": "AlreadyExists",
            "doc": [
              "The item ID has already been used for an item."
            ]
          },
          {
            "name": "WrongOwner",
            "doc": [
              "The owner turned out to be different to what was expected."
            ]
          },
          {
            "name": "BadWitness",
            "doc": [
              "Invalid witness data given."
            ]
          },
          {
            "name": "InUse",
            "doc": [
              "The item ID is already taken."
            ]
          },
          {
            "name": "Frozen",
            "doc": [
              "The item or collection is frozen."
            ]
          },
          {
            "name": "WrongDelegate",
            "doc": [
              "The delegate turned out to be different to what was expected."
            ]
          },
          {
            "name": "NoDelegate",
            "doc": [
              "There is no delegate approved."
            ]
          },
          {
            "name": "Unapproved",
            "doc": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "name": "Unaccepted",
            "doc": [
              "The named owner has not signed ownership of the collection is acceptable."
            ]
          },
          {
            "name": "Locked",
            "doc": [
              "The item is locked."
            ]
          },
          {
            "name": "MaxSupplyReached",
            "doc": [
              "All items have been minted."
            ]
          },
          {
            "name": "MaxSupplyAlreadySet",
            "doc": [
              "The max supply has already been set."
            ]
          },
          {
            "name": "MaxSupplyTooSmall",
            "doc": [
              "The provided max supply is less to the amount of items a collection already has."
            ]
          },
          {
            "name": "UnknownItem",
            "doc": [
              "The given item ID is unknown."
            ]
          },
          {
            "name": "NotForSale",
            "doc": [
              "Item is not for sale."
            ]
          },
          {
            "name": "BidTooLow",
            "doc": [
              "The provided bid is too low."
            ]
          }
        ],
        "errors_value": {
          "type": 714
        },
        "index": 44
      },
      {
        "name": "Nfts",
        "prefix": "Nfts",
        "storage": [
          {
            "name": "Collection",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nfts:types:CollectionDetails",
                "keys_id": 4,
                "value_id": 715
              }
            },
            "fallback": "0x00",
            "docs": [
              " Details of a collection."
            ]
          },
          {
            "name": "OwnershipAcceptance",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 0,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " The collection, if any, of which an account is willing to take ownership."
            ]
          },
          {
            "name": "Account",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U32",
                  "U32"
                ],
                "value": "NULL",
                "keys_id": 707,
                "value_id": 32
              }
            },
            "fallback": "0x00",
            "docs": [
              " The items held by any given account; set out this way so that items owned by a single",
              " account can be enumerated."
            ]
          },
          {
            "name": "CollectionAccount",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U32"
                ],
                "value": "NULL",
                "keys_id": 532,
                "value_id": 32
              }
            },
            "fallback": "0x00",
            "docs": [
              " The collections owned by any given account; set out this way so that collections owned by",
              " a single account can be enumerated."
            ]
          },
          {
            "name": "CollectionRoleOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "U8",
                "keys_id": 528,
                "value_id": 716
              }
            },
            "fallback": "0x00",
            "docs": [
              " The items in existence and their ownership details.",
              " Stores collection roles as per account."
            ]
          },
          {
            "name": "Item",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_nfts:types:ItemDetails",
                "keys_id": 94,
                "value_id": 718
              }
            },
            "fallback": "0x00",
            "docs": [
              " The items in existence and their ownership details."
            ]
          },
          {
            "name": "CollectionMetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nfts:types:CollectionMetadata",
                "keys_id": 4,
                "value_id": 724
              }
            },
            "fallback": "0x00",
            "docs": [
              " Metadata of a collection."
            ]
          },
          {
            "name": "ItemMetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_nfts:types:ItemMetadata",
                "keys_id": 94,
                "value_id": 725
              }
            },
            "fallback": "0x00",
            "docs": [
              " Metadata of an item."
            ]
          },
          {
            "name": "Attribute",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "option\u003cU32\u003e",
                  "pallet_nfts:types:AttributeNamespace",
                  "Vec\u003cU8\u003e"
                ],
                "value": "Tuple:Vec\u003cU8\u003epallet_nfts:types:AttributeDeposit",
                "keys_id": 727,
                "value_id": 728
              }
            },
            "fallback": "0x00",
            "docs": [
              " Attributes of a collection."
            ]
          },
          {
            "name": "ItemPriceOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "Tuple:U128option\u003c[U8; 32]\u003e",
                "keys_id": 94,
                "value_id": 713
              }
            },
            "fallback": "0x00",
            "docs": [
              " A price of an item."
            ]
          },
          {
            "name": "ItemAttributesApprovalsOf",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "Vec\u003c[U8; 32]\u003e",
                "keys_id": 94,
                "value_id": 730
              }
            },
            "fallback": "0x00",
            "docs": [
              " Item attribute approvals."
            ]
          },
          {
            "name": "NextCollectionId",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Stores the `CollectionId` that is going to be used for the next collection.",
              " This gets incremented whenever a new collection is created."
            ]
          },
          {
            "name": "PendingSwapOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_nfts:types:PendingSwap",
                "keys_id": 94,
                "value_id": 732
              }
            },
            "fallback": "0x00",
            "docs": [
              " Handles all the pending swaps."
            ]
          },
          {
            "name": "CollectionConfigOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nfts:types:CollectionConfig",
                "keys_id": 4,
                "value_id": 333
              }
            },
            "fallback": "0x00",
            "docs": [
              " Config of a collection."
            ]
          },
          {
            "name": "ItemConfigOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "U64",
                "keys_id": 94,
                "value_id": 343
              }
            },
            "fallback": "0x00",
            "docs": [
              " Config of an item."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2d00",
            "name": "create",
            "docs": [
              "See [`Pallet::create`]."
            ],
            "args": [
              {
                "name": "admin",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "config",
                "type": "pallet_nfts:types:CollectionConfig",
                "type_name": "CollectionConfigFor"
              }
            ]
          },
          {
            "lookup": "2d01",
            "name": "force_create",
            "docs": [
              "See [`Pallet::force_create`]."
            ],
            "args": [
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "config",
                "type": "pallet_nfts:types:CollectionConfig",
                "type_name": "CollectionConfigFor"
              }
            ]
          },
          {
            "lookup": "2d02",
            "name": "destroy",
            "docs": [
              "See [`Pallet::destroy`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "witness",
                "type": "pallet_nfts:types:DestroyWitness",
                "type_name": "DestroyWitness"
              }
            ]
          },
          {
            "lookup": "2d03",
            "name": "mint",
            "docs": [
              "See [`Pallet::mint`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "mint_to",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "witness_data",
                "type": "option\u003cpallet_nfts:types:MintWitness\u003e",
                "type_name": "Option\u003cMintWitness\u003cItemId, DepositBalanceOf\u003e\u003e"
              }
            ]
          },
          {
            "lookup": "2d04",
            "name": "force_mint",
            "docs": [
              "See [`Pallet::force_mint`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "mint_to",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "item_config",
                "type": "U64",
                "type_name": "ItemConfig"
              }
            ]
          },
          {
            "lookup": "2d05",
            "name": "burn",
            "docs": [
              "See [`Pallet::burn`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2d06",
            "name": "transfer",
            "docs": [
              "See [`Pallet::transfer`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "dest",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2d07",
            "name": "redeposit",
            "docs": [
              "See [`Pallet::redeposit`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "items",
                "type": "Vec\u003cU32\u003e",
                "type_name": "Vec\u003cItemId\u003e"
              }
            ]
          },
          {
            "lookup": "2d08",
            "name": "lock_item_transfer",
            "docs": [
              "See [`Pallet::lock_item_transfer`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2d09",
            "name": "unlock_item_transfer",
            "docs": [
              "See [`Pallet::unlock_item_transfer`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2d0a",
            "name": "lock_collection",
            "docs": [
              "See [`Pallet::lock_collection`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "lock_settings",
                "type": "U64",
                "type_name": "CollectionSettings"
              }
            ]
          },
          {
            "lookup": "2d0b",
            "name": "transfer_ownership",
            "docs": [
              "See [`Pallet::transfer_ownership`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2d0c",
            "name": "set_team",
            "docs": [
              "See [`Pallet::set_team`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "issuer",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              },
              {
                "name": "admin",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              },
              {
                "name": "freezer",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "2d0d",
            "name": "force_collection_owner",
            "docs": [
              "See [`Pallet::force_collection_owner`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "owner",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2d0e",
            "name": "force_collection_config",
            "docs": [
              "See [`Pallet::force_collection_config`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "config",
                "type": "pallet_nfts:types:CollectionConfig",
                "type_name": "CollectionConfigFor"
              }
            ]
          },
          {
            "lookup": "2d0f",
            "name": "approve_transfer",
            "docs": [
              "See [`Pallet::approve_transfer`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "maybe_deadline",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cBlockNumberFor\u003e"
              }
            ]
          },
          {
            "lookup": "2d10",
            "name": "cancel_approval",
            "docs": [
              "See [`Pallet::cancel_approval`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2d11",
            "name": "clear_all_transfer_approvals",
            "docs": [
              "See [`Pallet::clear_all_transfer_approvals`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2d12",
            "name": "lock_item_properties",
            "docs": [
              "See [`Pallet::lock_item_properties`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "lock_metadata",
                "type": "Bool",
                "type_name": "bool"
              },
              {
                "name": "lock_attributes",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "2d13",
            "name": "set_attribute",
            "docs": [
              "See [`Pallet::set_attribute`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "namespace",
                "type": "pallet_nfts:types:AttributeNamespace",
                "type_name": "AttributeNamespace\u003cAccountId\u003e"
              },
              {
                "name": "key",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, KeyLimit\u003e"
              },
              {
                "name": "value",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, ValueLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2d14",
            "name": "force_set_attribute",
            "docs": [
              "See [`Pallet::force_set_attribute`]."
            ],
            "args": [
              {
                "name": "set_as",
                "type": "option\u003c[U8; 32]\u003e",
                "type_name": "Option\u003cAccountId\u003e"
              },
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "namespace",
                "type": "pallet_nfts:types:AttributeNamespace",
                "type_name": "AttributeNamespace\u003cAccountId\u003e"
              },
              {
                "name": "key",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, KeyLimit\u003e"
              },
              {
                "name": "value",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, ValueLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2d15",
            "name": "clear_attribute",
            "docs": [
              "See [`Pallet::clear_attribute`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "namespace",
                "type": "pallet_nfts:types:AttributeNamespace",
                "type_name": "AttributeNamespace\u003cAccountId\u003e"
              },
              {
                "name": "key",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, KeyLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2d16",
            "name": "approve_item_attributes",
            "docs": [
              "See [`Pallet::approve_item_attributes`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "2d17",
            "name": "cancel_item_attributes_approval",
            "docs": [
              "See [`Pallet::cancel_item_attributes_approval`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "delegate",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "witness",
                "type": "U32",
                "type_name": "CancelAttributesApprovalWitness"
              }
            ]
          },
          {
            "lookup": "2d18",
            "name": "set_metadata",
            "docs": [
              "See [`Pallet::set_metadata`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, StringLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2d19",
            "name": "clear_metadata",
            "docs": [
              "See [`Pallet::clear_metadata`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2d1a",
            "name": "set_collection_metadata",
            "docs": [
              "See [`Pallet::set_collection_metadata`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "BoundedVec\u003cu8, StringLimit\u003e"
              }
            ]
          },
          {
            "lookup": "2d1b",
            "name": "clear_collection_metadata",
            "docs": [
              "See [`Pallet::clear_collection_metadata`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              }
            ]
          },
          {
            "lookup": "2d1c",
            "name": "set_accept_ownership",
            "docs": [
              "See [`Pallet::set_accept_ownership`]."
            ],
            "args": [
              {
                "name": "maybe_collection",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cCollectionId\u003e"
              }
            ]
          },
          {
            "lookup": "2d1d",
            "name": "set_collection_max_supply",
            "docs": [
              "See [`Pallet::set_collection_max_supply`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "max_supply",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "2d1e",
            "name": "update_mint_settings",
            "docs": [
              "See [`Pallet::update_mint_settings`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "mint_settings",
                "type": "pallet_nfts:types:MintSettings",
                "type_name": "MintSettings\u003cBalanceOf, BlockNumberFor, CollectionId\u003e"
              }
            ]
          },
          {
            "lookup": "2d1f",
            "name": "set_price",
            "docs": [
              "See [`Pallet::set_price`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "price",
                "type": "option\u003cU128\u003e",
                "type_name": "Option\u003cItemPrice\u003e"
              },
              {
                "name": "whitelisted_buyer",
                "type": "option\u003csp_runtime:multiaddress:MultiAddress\u003e",
                "type_name": "Option\u003cAccountIdLookupOf\u003e"
              }
            ]
          },
          {
            "lookup": "2d20",
            "name": "buy_item",
            "docs": [
              "See [`Pallet::buy_item`]."
            ],
            "args": [
              {
                "name": "collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "bid_price",
                "type": "U128",
                "type_name": "ItemPrice"
              }
            ]
          },
          {
            "lookup": "2d21",
            "name": "pay_tips",
            "docs": [
              "See [`Pallet::pay_tips`]."
            ],
            "args": [
              {
                "name": "tips",
                "type": "Vec\u003cpallet_nfts:types:ItemTip\u003e",
                "type_name": "BoundedVec\u003cItemTipOf, MaxTips\u003e"
              }
            ]
          },
          {
            "lookup": "2d22",
            "name": "create_swap",
            "docs": [
              "See [`Pallet::create_swap`]."
            ],
            "args": [
              {
                "name": "offered_collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "offered_item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "desired_collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "maybe_desired_item",
                "type": "option\u003cU32\u003e",
                "type_name": "Option\u003cItemId\u003e"
              },
              {
                "name": "maybe_price",
                "type": "option\u003cpallet_nfts:types:PriceWithDirection\u003e",
                "type_name": "Option\u003cPriceWithDirection\u003cItemPrice\u003e\u003e"
              },
              {
                "name": "duration",
                "type": "U32",
                "type_name": "BlockNumberFor"
              }
            ]
          },
          {
            "lookup": "2d23",
            "name": "cancel_swap",
            "docs": [
              "See [`Pallet::cancel_swap`]."
            ],
            "args": [
              {
                "name": "offered_collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "offered_item",
                "type": "U32",
                "type_name": "ItemId"
              }
            ]
          },
          {
            "lookup": "2d24",
            "name": "claim_swap",
            "docs": [
              "See [`Pallet::claim_swap`]."
            ],
            "args": [
              {
                "name": "send_collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "send_item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "receive_collection",
                "type": "U32",
                "type_name": "CollectionId"
              },
              {
                "name": "receive_item",
                "type": "U32",
                "type_name": "ItemId"
              },
              {
                "name": "witness_price",
                "type": "option\u003cpallet_nfts:types:PriceWithDirection\u003e",
                "type_name": "Option\u003cPriceWithDirection\u003cItemPrice\u003e\u003e"
              }
            ]
          },
          {
            "lookup": "2d25",
            "name": "mint_pre_signed",
            "docs": [
              "See [`Pallet::mint_pre_signed`]."
            ],
            "args": [
              {
                "name": "mint_data",
                "type": "pallet_nfts:types:PreSignedMint",
                "type_name": "Box\u003cPreSignedMintOf\u003e"
              },
              {
                "name": "signature",
                "type": "sp_runtime:MultiSignature",
                "type_name": "OffchainSignature"
              },
              {
                "name": "signer",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "2d26",
            "name": "set_attributes_pre_signed",
            "docs": [
              "See [`Pallet::set_attributes_pre_signed`]."
            ],
            "args": [
              {
                "name": "data",
                "type": "pallet_nfts:types:PreSignedAttributes",
                "type_name": "PreSignedAttributesOf"
              },
              {
                "name": "signature",
                "type": "sp_runtime:MultiSignature",
                "type_name": "OffchainSignature"
              },
              {
                "name": "signer",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 332
        },
        "events": [
          {
            "lookup": "2d00",
            "name": "Created",
            "docs": [
              "A `collection` was created."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "creator",
              "owner"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2d01",
            "name": "ForceCreated",
            "docs": [
              "A `collection` was force-created."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "owner"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId"
            ]
          },
          {
            "lookup": "2d02",
            "name": "Destroyed",
            "docs": [
              "A `collection` was destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "collection"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2d03",
            "name": "Issued",
            "docs": [
              "An `item` was issued."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "owner"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2d04",
            "name": "Transferred",
            "docs": [
              "An `item` was transferred."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "from",
              "to"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2d05",
            "name": "Burned",
            "docs": [
              "An `item` was destroyed."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "owner"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2d06",
            "name": "ItemTransferLocked",
            "docs": [
              "An `item` became non-transferable."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "collection",
              "item"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2d07",
            "name": "ItemTransferUnlocked",
            "docs": [
              "An `item` became transferable."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "collection",
              "item"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2d08",
            "name": "ItemPropertiesLocked",
            "docs": [
              "`item` metadata or attributes were locked."
            ],
            "args": [
              "U32",
              "U32",
              "Bool",
              "Bool"
            ],
            "args_name": [
              "collection",
              "item",
              "lock_metadata",
              "lock_attributes"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "bool",
              "bool"
            ]
          },
          {
            "lookup": "2d09",
            "name": "CollectionLocked",
            "docs": [
              "Some `collection` was locked."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "collection"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2d0a",
            "name": "OwnerChanged",
            "docs": [
              "The owner changed."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "new_owner"
            ],
            "args_type_name": [
              "CollectionId",
              "AccountId"
            ]
          },
          {
            "lookup": "2d0b",
            "name": "TeamChanged",
            "docs": [
              "The management team changed."
            ],
            "args": [
              "U32",
              "option\u003c[U8; 32]\u003e",
              "option\u003c[U8; 32]\u003e",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_name": [
              "collection",
              "issuer",
              "admin",
              "freezer"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cAccountId\u003e",
              "Option\u003cAccountId\u003e",
              "Option\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2d0c",
            "name": "TransferApproved",
            "docs": [
              "An `item` of a `collection` has been approved by the `owner` for transfer by",
              "a `delegate`."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "option\u003cU32\u003e"
            ],
            "args_name": [
              "collection",
              "item",
              "owner",
              "delegate",
              "deadline"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId",
              "Option\u003cBlockNumberFor\u003e"
            ]
          },
          {
            "lookup": "2d0d",
            "name": "ApprovalCancelled",
            "docs": [
              "An approval for a `delegate` account to transfer the `item` of an item",
              "`collection` was cancelled by its `owner`."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "owner",
              "delegate"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2d0e",
            "name": "AllApprovalsCancelled",
            "docs": [
              "All approvals of an item got cancelled."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "owner"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2d0f",
            "name": "CollectionConfigChanged",
            "docs": [
              "A `collection` has had its config changed by the `Force` origin."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "collection"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2d10",
            "name": "CollectionMetadataSet",
            "docs": [
              "New metadata has been set for a `collection`."
            ],
            "args": [
              "U32",
              "Vec\u003cU8\u003e"
            ],
            "args_name": [
              "collection",
              "data"
            ],
            "args_type_name": [
              "CollectionId",
              "BoundedVec\u003cu8, StringLimit\u003e"
            ]
          },
          {
            "lookup": "2d11",
            "name": "CollectionMetadataCleared",
            "docs": [
              "Metadata has been cleared for a `collection`."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "collection"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2d12",
            "name": "ItemMetadataSet",
            "docs": [
              "New metadata has been set for an item."
            ],
            "args": [
              "U32",
              "U32",
              "Vec\u003cU8\u003e"
            ],
            "args_name": [
              "collection",
              "item",
              "data"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "BoundedVec\u003cu8, StringLimit\u003e"
            ]
          },
          {
            "lookup": "2d13",
            "name": "ItemMetadataCleared",
            "docs": [
              "Metadata has been cleared for an item."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "collection",
              "item"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2d14",
            "name": "Redeposited",
            "docs": [
              "The deposit for a set of `item`s within a `collection` has been updated."
            ],
            "args": [
              "U32",
              "Vec\u003cU32\u003e"
            ],
            "args_name": [
              "collection",
              "successful_items"
            ],
            "args_type_name": [
              "CollectionId",
              "Vec\u003cItemId\u003e"
            ]
          },
          {
            "lookup": "2d15",
            "name": "AttributeSet",
            "docs": [
              "New attribute metadata has been set for a `collection` or `item`."
            ],
            "args": [
              "U32",
              "option\u003cU32\u003e",
              "Vec\u003cU8\u003e",
              "Vec\u003cU8\u003e",
              "pallet_nfts:types:AttributeNamespace"
            ],
            "args_name": [
              "collection",
              "maybe_item",
              "key",
              "value",
              "namespace"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cItemId\u003e",
              "BoundedVec\u003cu8, KeyLimit\u003e",
              "BoundedVec\u003cu8, ValueLimit\u003e",
              "AttributeNamespace\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2d16",
            "name": "AttributeCleared",
            "docs": [
              "Attribute metadata has been cleared for a `collection` or `item`."
            ],
            "args": [
              "U32",
              "option\u003cU32\u003e",
              "Vec\u003cU8\u003e",
              "pallet_nfts:types:AttributeNamespace"
            ],
            "args_name": [
              "collection",
              "maybe_item",
              "key",
              "namespace"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cItemId\u003e",
              "BoundedVec\u003cu8, KeyLimit\u003e",
              "AttributeNamespace\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2d17",
            "name": "ItemAttributesApprovalAdded",
            "docs": [
              "A new approval to modify item attributes was added."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "delegate"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2d18",
            "name": "ItemAttributesApprovalRemoved",
            "docs": [
              "A new approval to modify item attributes was removed."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "delegate"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId"
            ]
          },
          {
            "lookup": "2d19",
            "name": "OwnershipAcceptanceChanged",
            "docs": [
              "Ownership acceptance has changed for an account."
            ],
            "args": [
              "[U8; 32]",
              "option\u003cU32\u003e"
            ],
            "args_name": [
              "who",
              "maybe_collection"
            ],
            "args_type_name": [
              "AccountId",
              "Option\u003cCollectionId\u003e"
            ]
          },
          {
            "lookup": "2d1a",
            "name": "CollectionMaxSupplySet",
            "docs": [
              "Max supply has been set for a collection."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "collection",
              "max_supply"
            ],
            "args_type_name": [
              "CollectionId",
              "u32"
            ]
          },
          {
            "lookup": "2d1b",
            "name": "CollectionMintSettingsUpdated",
            "docs": [
              "Mint settings for a collection had changed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "collection"
            ],
            "args_type_name": [
              "CollectionId"
            ]
          },
          {
            "lookup": "2d1c",
            "name": "NextCollectionIdIncremented",
            "docs": [
              "Event gets emitted when the `NextCollectionId` gets incremented."
            ],
            "args": [
              "option\u003cU32\u003e"
            ],
            "args_name": [
              "next_id"
            ],
            "args_type_name": [
              "Option\u003cCollectionId\u003e"
            ]
          },
          {
            "lookup": "2d1d",
            "name": "ItemPriceSet",
            "docs": [
              "The price was set for the item."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_name": [
              "collection",
              "item",
              "price",
              "whitelisted_buyer"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "ItemPrice",
              "Option\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2d1e",
            "name": "ItemPriceRemoved",
            "docs": [
              "The price for the item was removed."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "collection",
              "item"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId"
            ]
          },
          {
            "lookup": "2d1f",
            "name": "ItemBought",
            "docs": [
              "An item was bought."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "collection",
              "item",
              "price",
              "seller",
              "buyer"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "ItemPrice",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "2d20",
            "name": "TipSent",
            "docs": [
              "A tip was sent."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "collection",
              "item",
              "sender",
              "receiver",
              "amount"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "AccountId",
              "DepositBalanceOf"
            ]
          },
          {
            "lookup": "2d21",
            "name": "SwapCreated",
            "docs": [
              "An `item` swap intent was created."
            ],
            "args": [
              "U32",
              "U32",
              "U32",
              "option\u003cU32\u003e",
              "option\u003cpallet_nfts:types:PriceWithDirection\u003e",
              "U32"
            ],
            "args_name": [
              "offered_collection",
              "offered_item",
              "desired_collection",
              "desired_item",
              "price",
              "deadline"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "CollectionId",
              "Option\u003cItemId\u003e",
              "Option\u003cPriceWithDirection\u003cItemPrice\u003e\u003e",
              "BlockNumberFor"
            ]
          },
          {
            "lookup": "2d22",
            "name": "SwapCancelled",
            "docs": [
              "The swap was cancelled."
            ],
            "args": [
              "U32",
              "U32",
              "U32",
              "option\u003cU32\u003e",
              "option\u003cpallet_nfts:types:PriceWithDirection\u003e",
              "U32"
            ],
            "args_name": [
              "offered_collection",
              "offered_item",
              "desired_collection",
              "desired_item",
              "price",
              "deadline"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "CollectionId",
              "Option\u003cItemId\u003e",
              "Option\u003cPriceWithDirection\u003cItemPrice\u003e\u003e",
              "BlockNumberFor"
            ]
          },
          {
            "lookup": "2d23",
            "name": "SwapClaimed",
            "docs": [
              "The swap has been claimed."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]",
              "U32",
              "U32",
              "[U8; 32]",
              "option\u003cpallet_nfts:types:PriceWithDirection\u003e",
              "U32"
            ],
            "args_name": [
              "sent_collection",
              "sent_item",
              "sent_item_owner",
              "received_collection",
              "received_item",
              "received_item_owner",
              "price",
              "deadline"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AccountId",
              "CollectionId",
              "ItemId",
              "AccountId",
              "Option\u003cPriceWithDirection\u003cItemPrice\u003e\u003e",
              "BlockNumberFor"
            ]
          },
          {
            "lookup": "2d24",
            "name": "PreSignedAttributesSet",
            "docs": [
              "New attributes have been set for an `item` of the `collection`."
            ],
            "args": [
              "U32",
              "U32",
              "pallet_nfts:types:AttributeNamespace"
            ],
            "args_name": [
              "collection",
              "item",
              "namespace"
            ],
            "args_type_name": [
              "CollectionId",
              "ItemId",
              "AttributeNamespace\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "2d25",
            "name": "PalletAttributeSet",
            "docs": [
              "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`",
              "within that `collection`."
            ],
            "args": [
              "U32",
              "option\u003cU32\u003e",
              "pallet_nfts:types:PalletAttributes",
              "Vec\u003cU8\u003e"
            ],
            "args_name": [
              "collection",
              "item",
              "attribute",
              "value"
            ],
            "args_type_name": [
              "CollectionId",
              "Option\u003cItemId\u003e",
              "PalletAttributes\u003cCollectionId\u003e",
              "BoundedVec\u003cu8, ValueLimit\u003e"
            ]
          }
        ],
        "events_value": {
          "type": 117
        },
        "constants": [
          {
            "name": "CollectionDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved for collection."
            ]
          },
          {
            "name": "ItemDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved for an item."
            ]
          },
          {
            "name": "MetadataDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved when adding metadata to your item."
            ]
          },
          {
            "name": "AttributeDepositBase",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The basic amount of funds that must be reserved when adding an attribute to an item."
            ]
          },
          {
            "name": "DepositPerByte",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " The additional funds that must be reserved for the number of bytes store in metadata,",
              " either \"normal\" metadata or attribute metadata."
            ]
          },
          {
            "name": "StringLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00010000",
            "docs": [
              " The maximum length of data stored on-chain."
            ]
          },
          {
            "name": "KeyLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "40000000",
            "docs": [
              " The maximum length of an attribute key."
            ]
          },
          {
            "name": "ValueLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00010000",
            "docs": [
              " The maximum length of an attribute value."
            ]
          },
          {
            "name": "ApprovalsLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "14000000",
            "docs": [
              " The maximum approvals an item could have."
            ]
          },
          {
            "name": "ItemAttributesApprovalsLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "14000000",
            "docs": [
              " The maximum attributes approvals an item could have."
            ]
          },
          {
            "name": "MaxTips",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The max number of tips a user could send."
            ]
          },
          {
            "name": "MaxDeadlineDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00349e00",
            "docs": [
              " The max duration in blocks for deadlines."
            ]
          },
          {
            "name": "MaxAttributesPerCall",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " The max number of attributes a user could set per call."
            ]
          },
          {
            "name": "Features",
            "type": "U64",
            "type_value": 733,
            "constants_value": "0000000000000000",
            "docs": [
              " Disables some of pallet's features."
            ]
          }
        ],
        "errors": [
          {
            "name": "NoPermission",
            "doc": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "name": "UnknownCollection",
            "doc": [
              "The given item ID is unknown."
            ]
          },
          {
            "name": "AlreadyExists",
            "doc": [
              "The item ID has already been used for an item."
            ]
          },
          {
            "name": "ApprovalExpired",
            "doc": [
              "The approval had a deadline that expired, so the approval isn't valid anymore."
            ]
          },
          {
            "name": "WrongOwner",
            "doc": [
              "The owner turned out to be different to what was expected."
            ]
          },
          {
            "name": "BadWitness",
            "doc": [
              "The witness data given does not match the current state of the chain."
            ]
          },
          {
            "name": "CollectionIdInUse",
            "doc": [
              "Collection ID is already taken."
            ]
          },
          {
            "name": "ItemsNonTransferable",
            "doc": [
              "Items within that collection are non-transferable."
            ]
          },
          {
            "name": "NotDelegate",
            "doc": [
              "The provided account is not a delegate."
            ]
          },
          {
            "name": "WrongDelegate",
            "doc": [
              "The delegate turned out to be different to what was expected."
            ]
          },
          {
            "name": "Unapproved",
            "doc": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "name": "Unaccepted",
            "doc": [
              "The named owner has not signed ownership acceptance of the collection."
            ]
          },
          {
            "name": "ItemLocked",
            "doc": [
              "The item is locked (non-transferable)."
            ]
          },
          {
            "name": "LockedItemAttributes",
            "doc": [
              "Item's attributes are locked."
            ]
          },
          {
            "name": "LockedCollectionAttributes",
            "doc": [
              "Collection's attributes are locked."
            ]
          },
          {
            "name": "LockedItemMetadata",
            "doc": [
              "Item's metadata is locked."
            ]
          },
          {
            "name": "LockedCollectionMetadata",
            "doc": [
              "Collection's metadata is locked."
            ]
          },
          {
            "name": "MaxSupplyReached",
            "doc": [
              "All items have been minted."
            ]
          },
          {
            "name": "MaxSupplyLocked",
            "doc": [
              "The max supply is locked and can't be changed."
            ]
          },
          {
            "name": "MaxSupplyTooSmall",
            "doc": [
              "The provided max supply is less than the number of items a collection already has."
            ]
          },
          {
            "name": "UnknownItem",
            "doc": [
              "The given item ID is unknown."
            ]
          },
          {
            "name": "UnknownSwap",
            "doc": [
              "Swap doesn't exist."
            ]
          },
          {
            "name": "MetadataNotFound",
            "doc": [
              "The given item has no metadata set."
            ]
          },
          {
            "name": "AttributeNotFound",
            "doc": [
              "The provided attribute can't be found."
            ]
          },
          {
            "name": "NotForSale",
            "doc": [
              "Item is not for sale."
            ]
          },
          {
            "name": "BidTooLow",
            "doc": [
              "The provided bid is too low."
            ]
          },
          {
            "name": "ReachedApprovalLimit",
            "doc": [
              "The item has reached its approval limit."
            ]
          },
          {
            "name": "DeadlineExpired",
            "doc": [
              "The deadline has already expired."
            ]
          },
          {
            "name": "WrongDuration",
            "doc": [
              "The duration provided should be less than or equal to `MaxDeadlineDuration`."
            ]
          },
          {
            "name": "MethodDisabled",
            "doc": [
              "The method is disabled by system settings."
            ]
          },
          {
            "name": "WrongSetting",
            "doc": [
              "The provided setting can't be set."
            ]
          },
          {
            "name": "InconsistentItemConfig",
            "doc": [
              "Item's config already exists and should be equal to the provided one."
            ]
          },
          {
            "name": "NoConfig",
            "doc": [
              "Config for a collection or an item can't be found."
            ]
          },
          {
            "name": "RolesNotCleared",
            "doc": [
              "Some roles were not cleared."
            ]
          },
          {
            "name": "MintNotStarted",
            "doc": [
              "Mint has not started yet."
            ]
          },
          {
            "name": "MintEnded",
            "doc": [
              "Mint has already ended."
            ]
          },
          {
            "name": "AlreadyClaimed",
            "doc": [
              "The provided Item was already used for claiming."
            ]
          },
          {
            "name": "IncorrectData",
            "doc": [
              "The provided data is incorrect."
            ]
          },
          {
            "name": "WrongOrigin",
            "doc": [
              "The extrinsic was sent by the wrong origin."
            ]
          },
          {
            "name": "WrongSignature",
            "doc": [
              "The provided signature is incorrect."
            ]
          },
          {
            "name": "IncorrectMetadata",
            "doc": [
              "The provided metadata might be too long."
            ]
          },
          {
            "name": "MaxAttributesLimitReached",
            "doc": [
              "Can't set more attributes per one call."
            ]
          },
          {
            "name": "WrongNamespace",
            "doc": [
              "The provided namespace isn't supported in this call."
            ]
          },
          {
            "name": "CollectionNotEmpty",
            "doc": [
              "Can't delete non-empty collections."
            ]
          },
          {
            "name": "WitnessRequired",
            "doc": [
              "The witness data should be provided."
            ]
          }
        ],
        "errors_value": {
          "type": 735
        },
        "index": 45
      },
      {
        "name": "NftFractionalization",
        "prefix": "NftFractionalization",
        "storage": [
          {
            "name": "NftToAsset",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_nft_fractionalization:types:Details",
                "keys_id": 94,
                "value_id": 736
              }
            },
            "fallback": "0x00",
            "docs": [
              " Keeps track of the corresponding NFT ID, asset ID and amount minted."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2e00",
            "name": "fractionalize",
            "docs": [
              "See [`Pallet::fractionalize`]."
            ],
            "args": [
              {
                "name": "nft_collection_id",
                "type": "U32",
                "type_name": "NftCollectionId"
              },
              {
                "name": "nft_id",
                "type": "U32",
                "type_name": "NftId"
              },
              {
                "name": "asset_id",
                "type": "U32",
                "type_name": "AssetIdOf"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "fractions",
                "type": "U128",
                "type_name": "AssetBalanceOf"
              }
            ]
          },
          {
            "lookup": "2e01",
            "name": "unify",
            "docs": [
              "See [`Pallet::unify`]."
            ],
            "args": [
              {
                "name": "nft_collection_id",
                "type": "U32",
                "type_name": "NftCollectionId"
              },
              {
                "name": "nft_id",
                "type": "U32",
                "type_name": "NftId"
              },
              {
                "name": "asset_id",
                "type": "U32",
                "type_name": "AssetIdOf"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 353
        },
        "events": [
          {
            "lookup": "2e00",
            "name": "NftFractionalized",
            "docs": [
              "An NFT was successfully fractionalized."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "nft_collection",
              "nft",
              "fractions",
              "asset",
              "beneficiary"
            ],
            "args_type_name": [
              "NftCollectionId",
              "NftId",
              "AssetBalanceOf",
              "AssetIdOf",
              "AccountId"
            ]
          },
          {
            "lookup": "2e01",
            "name": "NftUnified",
            "docs": [
              "An NFT was successfully returned back."
            ],
            "args": [
              "U32",
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "nft_collection",
              "nft",
              "asset",
              "beneficiary"
            ],
            "args_type_name": [
              "NftCollectionId",
              "NftId",
              "AssetIdOf",
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 124
        },
        "constants": [
          {
            "name": "Deposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The deposit paid by the user locking an NFT. The deposit is returned to the original NFT",
              " owner when the asset is unified and the NFT is unlocked."
            ]
          },
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 580,
            "constants_value": "6672616374696f6e",
            "docs": [
              " The pallet's id, used for deriving its sovereign account ID."
            ]
          },
          {
            "name": "NewAssetSymbol",
            "type": "Vec\u003cU8\u003e",
            "type_value": 690,
            "constants_value": "1046524143",
            "docs": [
              " The newly created asset's symbol."
            ]
          },
          {
            "name": "NewAssetName",
            "type": "Vec\u003cU8\u003e",
            "type_value": 690,
            "constants_value": "1046726163",
            "docs": [
              " The newly created asset's name."
            ]
          },
          {
            "name": "StringLimit",
            "type": "U32",
            "type_value": 4,
            "constants_value": "32000000",
            "docs": [
              " The maximum length of a name or symbol stored on-chain."
            ]
          }
        ],
        "errors": [
          {
            "name": "IncorrectAssetId",
            "doc": [
              "Asset ID does not correspond to locked NFT."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "name": "NftNotFound",
            "doc": [
              "NFT doesn't exist."
            ]
          },
          {
            "name": "NftNotFractionalized",
            "doc": [
              "NFT has not yet been fractionalised."
            ]
          }
        ],
        "errors_value": {
          "type": 737
        },
        "index": 46
      },
      {
        "name": "Salary",
        "prefix": "Salary",
        "storage": [
          {
            "name": "Status",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_salary:StatusType",
              "PlainTypeValue": 738
            },
            "fallback": "0x00",
            "docs": [
              " The overall status of the system."
            ]
          },
          {
            "name": "Claimant",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_salary:ClaimantStatus",
                "keys_id": 0,
                "value_id": 739
              }
            },
            "fallback": "0x00",
            "docs": [
              " The status of a claimant."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "2f00",
            "name": "init",
            "docs": [
              "See [`Pallet::init`]."
            ],
            "args": null
          },
          {
            "lookup": "2f01",
            "name": "bump",
            "docs": [
              "See [`Pallet::bump`]."
            ],
            "args": null
          },
          {
            "lookup": "2f02",
            "name": "induct",
            "docs": [
              "See [`Pallet::induct`]."
            ],
            "args": null
          },
          {
            "lookup": "2f03",
            "name": "register",
            "docs": [
              "See [`Pallet::register`]."
            ],
            "args": null
          },
          {
            "lookup": "2f04",
            "name": "payout",
            "docs": [
              "See [`Pallet::payout`]."
            ],
            "args": null
          },
          {
            "lookup": "2f05",
            "name": "payout_other",
            "docs": [
              "See [`Pallet::payout_other`]."
            ],
            "args": [
              {
                "name": "beneficiary",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "2f06",
            "name": "check_payment",
            "docs": [
              "See [`Pallet::check_payment`]."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 354
        },
        "events": [
          {
            "lookup": "2f00",
            "name": "Inducted",
            "docs": [
              "A member is inducted into the payroll."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "who"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "2f01",
            "name": "Registered",
            "docs": [
              "A member registered for a payout."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "2f02",
            "name": "Paid",
            "docs": [
              "A payment happened."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128",
              "NULL"
            ],
            "args_name": [
              "who",
              "beneficiary",
              "amount",
              "id"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "BalanceOf",
              "\u003cPaymaster as Pay\u003e::Id"
            ]
          },
          {
            "lookup": "2f03",
            "name": "CycleStarted",
            "docs": [
              "The next cycle begins."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "CycleIndexOf"
            ]
          }
        ],
        "events_value": {
          "type": 125
        },
        "constants": [
          {
            "name": "RegistrationPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "c8000000",
            "docs": [
              " The number of blocks within a cycle which accounts have to register their intent to",
              " claim.",
              "",
              " The number of blocks between sequential payout cycles is the sum of this and",
              " `PayoutPeriod`."
            ]
          },
          {
            "name": "PayoutPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "c8000000",
            "docs": [
              " The number of blocks within a cycle which accounts have to claim the payout.",
              "",
              " The number of blocks between sequential payout cycles is the sum of this and",
              " `RegistrationPeriod`."
            ]
          },
          {
            "name": "Budget",
            "type": "U128",
            "type_value": 6,
            "constants_value": "000064a7b3b6e00d0000000000000000",
            "docs": [
              " The total budget per cycle.",
              "",
              " This may change over the course of a cycle without any problem."
            ]
          }
        ],
        "errors": [
          {
            "name": "AlreadyStarted",
            "doc": [
              "The salary system has already been started."
            ]
          },
          {
            "name": "NotMember",
            "doc": [
              "The account is not a ranked member."
            ]
          },
          {
            "name": "AlreadyInducted",
            "doc": [
              "The account is already inducted."
            ]
          },
          {
            "name": "NotInducted",
            "doc": null
          },
          {
            "name": "NoClaim",
            "doc": [
              "The member does not have a current valid claim."
            ]
          },
          {
            "name": "ClaimZero",
            "doc": [
              "The member's claim is zero."
            ]
          },
          {
            "name": "TooLate",
            "doc": [
              "Current cycle's registration period is over."
            ]
          },
          {
            "name": "TooEarly",
            "doc": [
              "Current cycle's payment period is not yet begun."
            ]
          },
          {
            "name": "NotYet",
            "doc": [
              "Cycle is not yet over."
            ]
          },
          {
            "name": "NotStarted",
            "doc": [
              "The payout cycles have not yet started."
            ]
          },
          {
            "name": "Bankrupt",
            "doc": [
              "There is no budget left for the payout."
            ]
          },
          {
            "name": "PayError",
            "doc": [
              "There was some issue with the mechanism of payment."
            ]
          },
          {
            "name": "Inconclusive",
            "doc": [
              "The payment has neither failed nor succeeded yet."
            ]
          },
          {
            "name": "NotCurrent",
            "doc": [
              "The cycle is after that in which the payment was made."
            ]
          }
        ],
        "errors_value": {
          "type": 741
        },
        "index": 47
      },
      {
        "name": "CoreFellowship",
        "prefix": "CoreFellowship",
        "storage": [
          {
            "name": "Params",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_core_fellowship:ParamsType",
              "PlainTypeValue": 127
            },
            "fallback": "0x
            "docs": [
              " The overall status of the system."
            ]
          },
          {
            "name": "Member",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_core_fellowship:MemberStatus",
                "keys_id": 0,
                "value_id": 742
              }
            },
            "fallback": "0x00",
            "docs": [
              " The status of a claimant."
            ]
          },
          {
            "name": "MemberEvidence",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Tuple:pallet_core_fellowship:WishVec\u003cU8\u003e",
                "keys_id": 0,
                "value_id": 743
              }
            },
            "fallback": "0x00",
            "docs": [
              " Some evidence together with the desired outcome for which it was presented."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3000",
            "name": "bump",
            "docs": [
              "See [`Pallet::bump`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "3001",
            "name": "set_params",
            "docs": [
              "See [`Pallet::set_params`]."
            ],
            "args": [
              {
                "name": "params",
                "type": "pallet_core_fellowship:ParamsType",
                "type_name": "Box\u003cParamsOf\u003e"
              }
            ]
          },
          {
            "lookup": "3002",
            "name": "set_active",
            "docs": [
              "See [`Pallet::set_active`]."
            ],
            "args": [
              {
                "name": "is_active",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "3003",
            "name": "approve",
            "docs": [
              "See [`Pallet::approve`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "at_rank",
                "type": "U16",
                "type_name": "RankOf"
              }
            ]
          },
          {
            "lookup": "3004",
            "name": "induct",
            "docs": [
              "See [`Pallet::induct`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "3005",
            "name": "promote",
            "docs": [
              "See [`Pallet::promote`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "to_rank",
                "type": "U16",
                "type_name": "RankOf"
              }
            ]
          },
          {
            "lookup": "3006",
            "name": "offboard",
            "docs": [
              "See [`Pallet::offboard`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "3007",
            "name": "submit_evidence",
            "docs": [
              "See [`Pallet::submit_evidence`]."
            ],
            "args": [
              {
                "name": "wish",
                "type": "pallet_core_fellowship:Wish",
                "type_name": "Wish"
              },
              {
                "name": "evidence",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Evidence"
              }
            ]
          },
          {
            "lookup": "3008",
            "name": "import",
            "docs": [
              "See [`Pallet::import`]."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 355
        },
        "events": [
          {
            "lookup": "3000",
            "name": "ParamsChanged",
            "docs": [
              "Parameters for the pallet have changed."
            ],
            "args": [
              "pallet_core_fellowship:ParamsType"
            ],
            "args_name": [
              "params"
            ],
            "args_type_name": [
              "ParamsOf"
            ]
          },
          {
            "lookup": "3001",
            "name": "ActiveChanged",
            "docs": [
              "Member activity flag has been set."
            ],
            "args": [
              "[U8; 32]",
              "Bool"
            ],
            "args_name": [
              "who",
              "is_active"
            ],
            "args_type_name": [
              "AccountId",
              "bool"
            ]
          },
          {
            "lookup": "3002",
            "name": "Inducted",
            "docs": [
              "Member has begun being tracked in this pallet."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "who"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "3003",
            "name": "Offboarded",
            "docs": [
              "Member has been removed from being tracked in this pallet (i.e. because rank is now",
              "zero)."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "who"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "3004",
            "name": "Promoted",
            "docs": [
              "Member has been promoted to the given rank."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_name": [
              "who",
              "to_rank"
            ],
            "args_type_name": [
              "AccountId",
              "RankOf"
            ]
          },
          {
            "lookup": "3005",
            "name": "Demoted",
            "docs": [
              "Member has been demoted to the given (non-zero) rank."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_name": [
              "who",
              "to_rank"
            ],
            "args_type_name": [
              "AccountId",
              "RankOf"
            ]
          },
          {
            "lookup": "3006",
            "name": "Proven",
            "docs": [
              "Member has been proven at their current rank, postponing auto-demotion."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_name": [
              "who",
              "at_rank"
            ],
            "args_type_name": [
              "AccountId",
              "RankOf"
            ]
          },
          {
            "lookup": "3007",
            "name": "Requested",
            "docs": [
              "Member has stated evidence of their efforts their request for rank."
            ],
            "args": [
              "[U8; 32]",
              "pallet_core_fellowship:Wish"
            ],
            "args_name": [
              "who",
              "wish"
            ],
            "args_type_name": [
              "AccountId",
              "Wish"
            ]
          },
          {
            "lookup": "3008",
            "name": "EvidenceJudged",
            "docs": [
              "Some submitted evidence was judged and removed. There may or may not have been a change",
              "to the rank, but in any case, `last_proof` is reset."
            ],
            "args": [
              "[U8; 32]",
              "pallet_core_fellowship:Wish",
              "Vec\u003cU8\u003e",
              "U16",
              "option\u003cU16\u003e"
            ],
            "args_name": [
              "who",
              "wish",
              "evidence",
              "old_rank",
              "new_rank"
            ],
            "args_type_name": [
              "AccountId",
              "Wish",
              "Evidence",
              "u16",
              "Option\u003cu16\u003e"
            ]
          },
          {
            "lookup": "3009",
            "name": "Imported",
            "docs": [
              "Pre-ranked account has been inducted at their current rank."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_name": [
              "who",
              "rank"
            ],
            "args_type_name": [
              "AccountId",
              "RankOf"
            ]
          }
        ],
        "events_value": {
          "type": 126
        },
        "constants": [
          {
            "name": "EvidenceSize",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00400000",
            "docs": [
              " The maximum size in bytes submitted evidence is allowed to be."
            ]
          }
        ],
        "errors": [
          {
            "name": "Unranked",
            "doc": [
              "Member's rank is too low."
            ]
          },
          {
            "name": "Ranked",
            "doc": [
              "Member's rank is not zero."
            ]
          },
          {
            "name": "UnexpectedRank",
            "doc": [
              "Member's rank is not as expected - generally means that the rank provided to the call",
              "does not agree with the state of the system."
            ]
          },
          {
            "name": "InvalidRank",
            "doc": [
              "The given rank is invalid - this generally means it's not between 1 and `RANK_COUNT`."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The origin does not have enough permission to do this operation."
            ]
          },
          {
            "name": "NothingDoing",
            "doc": [
              "No work needs to be done at present for this member."
            ]
          },
          {
            "name": "AlreadyInducted",
            "doc": [
              "The candidate has already been inducted. This should never happen since it would",
              "require a candidate (rank 0) to already be tracked in the pallet."
            ]
          },
          {
            "name": "NotTracked",
            "doc": [
              "The candidate has not been inducted, so cannot be offboarded from this pallet."
            ]
          },
          {
            "name": "TooSoon",
            "doc": [
              "Operation cannot be done yet since not enough time has passed."
            ]
          }
        ],
        "errors_value": {
          "type": 744
        },
        "index": 48
      },
      {
        "name": "TransactionStorage",
        "prefix": "TransactionStorage",
        "storage": [
          {
            "name": "Transactions",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cpallet_transaction_storage:TransactionInfo\u003e",
                "keys_id": 4,
                "value_id": 745
              }
            },
            "fallback": "0x00",
            "docs": [
              " Collection of transaction metadata by block number."
            ]
          },
          {
            "name": "ChunkCount",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " Count indexed chunks for each block."
            ]
          },
          {
            "name": "ByteFee",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00",
            "docs": [
              " Storage fee per byte."
            ]
          },
          {
            "name": "EntryFee",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00",
            "docs": [
              " Storage fee per transaction."
            ]
          },
          {
            "name": "StoragePeriod",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Storage period for data in blocks. Should match `sp_storage_proof::DEFAULT_STORAGE_PERIOD`",
              " for block authoring."
            ]
          },
          {
            "name": "BlockTransactions",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_transaction_storage:TransactionInfo\u003e",
              "PlainTypeValue": 745
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "ProofChecked",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Bool",
              "PlainTypeValue": 43
            },
            "fallback": "0x00",
            "docs": [
              " Was the proof checked in this block?"
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3100",
            "name": "store",
            "docs": [
              "See [`Pallet::store`]."
            ],
            "args": [
              {
                "name": "data",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "3101",
            "name": "renew",
            "docs": [
              "See [`Pallet::renew`]."
            ],
            "args": [
              {
                "name": "block",
                "type": "U32",
                "type_name": "BlockNumberFor"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3102",
            "name": "check_proof",
            "docs": [
              "See [`Pallet::check_proof`]."
            ],
            "args": [
              {
                "name": "proof",
                "type": "sp_transaction_storage_proof:TransactionStorageProof",
                "type_name": "TransactionStorageProof"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 356
        },
        "events": [
          {
            "lookup": "3100",
            "name": "Stored",
            "docs": [
              "Stored data under specified index."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "u32"
            ]
          },
          {
            "lookup": "3101",
            "name": "Renewed",
            "docs": [
              "Renewed data under specified index."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "u32"
            ]
          },
          {
            "lookup": "3102",
            "name": "ProofChecked",
            "docs": [
              "Storage proof was successfully checked."
            ],
            "args": null
          }
        ],
        "events_value": {
          "type": 133
        },
        "errors": [
          {
            "name": "InsufficientFunds",
            "doc": [
              "Insufficient account balance."
            ]
          },
          {
            "name": "NotConfigured",
            "doc": [
              "Invalid configuration."
            ]
          },
          {
            "name": "RenewedNotFound",
            "doc": [
              "Renewed extrinsic is not found."
            ]
          },
          {
            "name": "EmptyTransaction",
            "doc": [
              "Attempting to store empty transaction"
            ]
          },
          {
            "name": "UnexpectedProof",
            "doc": [
              "Proof was not expected in this block."
            ]
          },
          {
            "name": "InvalidProof",
            "doc": [
              "Proof failed verification."
            ]
          },
          {
            "name": "MissingProof",
            "doc": [
              "Missing storage proof."
            ]
          },
          {
            "name": "MissingStateData",
            "doc": [
              "Unable to verify proof becasue state data is missing."
            ]
          },
          {
            "name": "DoubleCheck",
            "doc": [
              "Double proof check in the block."
            ]
          },
          {
            "name": "ProofNotChecked",
            "doc": [
              "Storage proof was not checked in the block."
            ]
          },
          {
            "name": "TransactionTooLarge",
            "doc": [
              "Transaction is too large."
            ]
          },
          {
            "name": "TooManyTransactions",
            "doc": [
              "Too many transactions in the block."
            ]
          },
          {
            "name": "BadContext",
            "doc": [
              "Attempted to call `store` outside of block execution."
            ]
          }
        ],
        "errors_value": {
          "type": 748
        },
        "index": 49
      },
      {
        "name": "VoterList",
        "prefix": "VoterList",
        "storage": [
          {
            "name": "ListNodes",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_bags_list:list:Node",
                "keys_id": 0,
                "value_id": 749
              }
            },
            "fallback": "0x00",
            "docs": [
              " A single node, within some bag.",
              "",
              " Nodes store links forward and back within their respective bags."
            ]
          },
          {
            "name": "CounterForListNodes",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "ListBags",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U64"
                ],
                "value": "pallet_bags_list:list:Bag",
                "keys_id": 11,
                "value_id": 750
              }
            },
            "fallback": "0x00",
            "docs": [
              " A bag stored in storage.",
              "",
              " Stores a `Bag` struct, which stores head and tail pointers to itself."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3200",
            "name": "rebag",
            "docs": [
              "See [`Pallet::rebag`]."
            ],
            "args": [
              {
                "name": "dislocated",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3201",
            "name": "put_in_front_of",
            "docs": [
              "See [`Pallet::put_in_front_of`]."
            ],
            "args": [
              {
                "name": "lighter",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3202",
            "name": "put_in_front_of_other",
            "docs": [
              "See [`Pallet::put_in_front_of_other`]."
            ],
            "args": [
              {
                "name": "heavier",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "lighter",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 358
        },
        "events": [
          {
            "lookup": "3200",
            "name": "Rebagged",
            "docs": [
              "Moved an account from one bag to another."
            ],
            "args": [
              "[U8; 32]",
              "U64",
              "U64"
            ],
            "args_name": [
              "who",
              "from",
              "to"
            ],
            "args_type_name": [
              "AccountId",
              "Score",
              "Score"
            ]
          },
          {
            "lookup": "3201",
            "name": "ScoreUpdated",
            "docs": [
              "Updated the score of some account to the given amount."
            ],
            "args": [
              "[U8; 32]",
              "U64"
            ],
            "args_name": [
              "who",
              "new_score"
            ],
            "args_type_name": [
              "AccountId",
              "Score"
            ]
          }
        ],
        "events_value": {
          "type": 134
        },
        "constants": [
          {
            "name": "BagThresholds",
            "type": "Vec\u003cU64\u003e",
            "type_value": 751,
            "constants_value": "210300407a10f35a00006a70ccd4a96000009ef3397fbc660000a907ccd5306d00003d9a67fb0c740000a9bfa275577b0000a6fdf73217830000034f5d91538b0000132445651494000078081001629d00000302f63c45a70000392e6f7fc7b10000f59c23c6f2bc00004ae76aafd1c80000598a64846fd50000129fb243d8e200003f22e1ac18f1000033a4844c3e000100e2e51b895710010076a2c0b0732101006789b407a3330100793ed8d7f646010078131b81815b01000c1cf38a567101004437eeb68a8801009eb56d1434a10100335e9f156abb010067c3c7a545d701003218f340e1f40100de0b230d59140200699c11f5ca350200ad50a2c4565902009ae41c471e7f0200d0244e6745a70200f984ad51f2d10200ace7a7984dff0200a118325b822f0300ffa4c76dbe620300580bfd8532990300a9afce6812d30300109ad81b95100400d9caa519f551040038df488970970400bee1727949e10400cc73401fc62f0500b304f91831830500828bffb4d9db05001235383d143a0600a5b42a473a9e060036662d09ab080700f73aeab4cb790700b87e93d707f20700ffec23c0d1710800b84b0beca2f90800c9dcae7afc89090091752ba867230a0064f1cd4f76c60a003609be76c3730b0078655fdff32b0c00a407f5a5b6ef0c0052f61be7c5bf0d00da71bb70e79c0e000de9127eed870f001477987fb7811000ebee65ef328b11001269fe325ca5120033f8428b3fd113008ba57a13fa0f15001b2b60d0ba6216000d1d37d0c3ca17006c64fa5c6b4919002622c7411de01a00045bb9245c901c00233d83f6c25b1e00c8771c79064420003013fddef64a2200aa8b6e848172240082c096c4b2bc260016a3faebb72b29008296524ae1c12b00a636a865a4812e00d0e2d4509e6d31009c0a9a2796883400e4faafb27fd53700e6e64d367e573b000e4bd66de7113f0088b17db746084300b07def72603e470034de249635b84b00d48bd57b077a5000d0bd20ef5b885500b8f0467801e85a0010f88aee139e60003892925301b066009c95e4fc8e236d00b4126d10dffe730028b43e5976487b00a08a1c7a42078300b09ab083a0428b002846b2f463029400c861a42ade4e9d0050d23d4ae630a700805101a7e1b1b10038e501b2ccdbbc002016527844b9c800388924ba9055d50070ca35a4aebce200805fb1355cfbf0008035685d241f0001a0c3dcd96b361001d07862e87e50210160e852d09f7d330190662c5816cf460110274c3340575b01804be277a22971013082b92dfc5a880180d276075a01a101b0f511592b34bb014031745f580cd701802f6cee59a4f40140ff799b521814026075607d2986350260fde999a60d590200e5e71c91d07e02c0df2575cff2a602a07fd975899ad102a067009d4cf0fe0220dc29a1321f2f0320ff526b0a5562038088caa383c29803e05683fb5c9bd203401dd75d9516100400317e39a06e5104c0b071129de1960480b48c9192b1e00480e8124aad242f05c007ca7082858205007c13c45623db0540836fe869523906c0700f81466c9d0640f09c5017d00707c0e624b301e37807c0332ac78510f10780074ca1e4ca700800d5a9eb8c8bf80800a849588ed3880900804254142c220a80a25170e826c50a00e8d5fafc5e720b801df64e00792a0c80d4fe64f923ee0c006dd038ee19be0d001e90a494209b0e0010bf570e0a860f00da6a9db0b57f1000bf64afd810891100bb5b60cd17a31200f963f3aed6ce1300d5f004766a0d1500e099770202601600103d663bdfc71700de3e2d4158461900ecdbadb2d8dc1a0045c70007e38c1c00b8bde0fc11581e00ba5c2a211a402000407de46dcb462200dea55b03136e2400aaf1f3fcfcb7260014226f63b62629006492803e8fbc2b008486a6c7fc7b2e002cf05fc09b673100da63f7ed32823400f0b13fbdb5ce3700f291c41047503b00422a1a3c3c0a3f002c24212f20004300ac9342d4b6354700cc6ed7a400af4b00c4d022773e70500020017d89f57d5500f86387cef3dc5a008c4c7f7e54926000206207f284a36600cc1e05cb49166d00b42a7a70c4f07300d43a90e278397b0038f461ec53f78200a07264b9b1318b0048c9b3d464f09300007fe998bd3b9d0010058f17921ca70000dfaf7f469cb100e80c880bd6c4bc0058bdcb7ddca0c80038d18d37a03bd50030d55bf01ca1e200704ac01a0fdef0ffffffffffffffff",
            "docs": [
              " The list of thresholds separating the various bags.",
              "",
              " Ids are separated into unsorted bags according to their score. This specifies the",
              " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
              " is less than or equal to its upper threshold.",
              "",
              " When ids are iterated, higher bags are iterated completely before lower bags. This means",
              " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
              " score, but peer ids within a particular bag are sorted in insertion order.",
              "",
              " # Expressing the constant",
              "",
              " This constant must be sorted in strictly increasing order. Duplicate items are not",
              " permitted.",
              "",
              " There is an implied upper limit of `Score::MAX`; that value does not need to be",
              " specified within the bag. For any two threshold lists, if one ends with",
              " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
              " lists will behave identically.",
              "",
              " # Calculation",
              "",
              " It is recommended to generate the set of thresholds in a geometric series, such that",
              " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
              " constant_ratio).max(threshold[k] + 1)` for all `k`.",
              "",
              " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
              "",
              " # Examples",
              "",
              " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
              "   iteration is strictly in insertion order.",
              " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
              "   the procedure given above, then the constant ratio is equal to 2.",
              " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
              "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
              " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
              "   into bag 0, an id with score 2 will fall into bag 1, etc.",
              "",
              " # Migration",
              "",
              " In the event that this list ever changes, a copy of the old bags list must be retained.",
              " With that `List::migrate` can be called, which will perform the appropriate migration."
            ]
          }
        ],
        "errors": [
          {
            "name": "List",
            "doc": [
              "A error in the list interface implementation."
            ],
            "fields": [
              {
                "type": "pallet_bags_list:list:ListError",
                "type_name": "ListError",
                "doc": null
              }
            ]
          }
        ],
        "errors_value": {
          "type": 752
        },
        "index": 50
      },
      {
        "name": "StateTrieMigration",
        "prefix": "StateTrieMigration",
        "storage": [
          {
            "name": "MigrationProcess",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_state_trie_migration:pallet:MigrationTask",
              "PlainTypeValue": 362
            },
            "fallback": "0x0000000000000000000000000000",
            "docs": [
              " Migration progress.",
              "",
              " This stores the snapshot of the last migrated keys. It can be set into motion and move",
              " forward by any of the means provided by this pallet."
            ]
          },
          {
            "name": "AutoLimits",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "option\u003cpallet_state_trie_migration:pallet:MigrationLimits\u003e",
              "PlainTypeValue": 360
            },
            "fallback": "0x00",
            "docs": [
              " The limits that are imposed on automatic migrations.",
              "",
              " If set to None, then no automatic migration happens."
            ]
          },
          {
            "name": "SignedMigrationMaxLimits",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_state_trie_migration:pallet:MigrationLimits",
              "PlainTypeValue": 361
            },
            "fallback": "0x00",
            "docs": [
              " The maximum limits that the signed migration could use.",
              "",
              " If not set, no signed submission is allowed."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3300",
            "name": "control_auto_migration",
            "docs": [
              "See [`Pallet::control_auto_migration`]."
            ],
            "args": [
              {
                "name": "maybe_config",
                "type": "option\u003cpallet_state_trie_migration:pallet:MigrationLimits\u003e",
                "type_name": "Option\u003cMigrationLimits\u003e"
              }
            ]
          },
          {
            "lookup": "3301",
            "name": "continue_migrate",
            "docs": [
              "See [`Pallet::continue_migrate`]."
            ],
            "args": [
              {
                "name": "limits",
                "type": "pallet_state_trie_migration:pallet:MigrationLimits",
                "type_name": "MigrationLimits"
              },
              {
                "name": "real_size_upper",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "witness_task",
                "type": "pallet_state_trie_migration:pallet:MigrationTask",
                "type_name": "MigrationTask"
              }
            ]
          },
          {
            "lookup": "3302",
            "name": "migrate_custom_top",
            "docs": [
              "See [`Pallet::migrate_custom_top`]."
            ],
            "args": [
              {
                "name": "keys",
                "type": "Vec\u003cVec\u003cU8\u003e\u003e",
                "type_name": "Vec\u003cVec\u003cu8\u003e\u003e"
              },
              {
                "name": "witness_size",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3303",
            "name": "migrate_custom_child",
            "docs": [
              "See [`Pallet::migrate_custom_child`]."
            ],
            "args": [
              {
                "name": "root",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              },
              {
                "name": "child_keys",
                "type": "Vec\u003cVec\u003cU8\u003e\u003e",
                "type_name": "Vec\u003cVec\u003cu8\u003e\u003e"
              },
              {
                "name": "total_size",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3304",
            "name": "set_signed_max_limits",
            "docs": [
              "See [`Pallet::set_signed_max_limits`]."
            ],
            "args": [
              {
                "name": "limits",
                "type": "pallet_state_trie_migration:pallet:MigrationLimits",
                "type_name": "MigrationLimits"
              }
            ]
          },
          {
            "lookup": "3305",
            "name": "force_set_progress",
            "docs": [
              "See [`Pallet::force_set_progress`]."
            ],
            "args": [
              {
                "name": "progress_top",
                "type": "pallet_state_trie_migration:pallet:Progress",
                "type_name": "ProgressOf"
              },
              {
                "name": "progress_child",
                "type": "pallet_state_trie_migration:pallet:Progress",
                "type_name": "ProgressOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 359
        },
        "events": [
          {
            "lookup": "3300",
            "name": "Migrated",
            "docs": [
              "Given number of `(top, child)` keys were migrated respectively, with the given",
              "`compute`."
            ],
            "args": [
              "U32",
              "U32",
              "pallet_state_trie_migration:pallet:MigrationCompute"
            ],
            "args_name": [
              "top",
              "child",
              "compute"
            ],
            "args_type_name": [
              "u32",
              "u32",
              "MigrationCompute"
            ]
          },
          {
            "lookup": "3301",
            "name": "Slashed",
            "docs": [
              "Some account got slashed by the given amount."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3302",
            "name": "AutoMigrationFinished",
            "docs": [
              "The auto migration task finished."
            ],
            "args": null
          },
          {
            "lookup": "3303",
            "name": "Halted",
            "docs": [
              "Migration got halted due to an error or miss-configuration."
            ],
            "args": [
              "pallet_state_trie_migration:pallet:Error"
            ],
            "args_name": [
              "error"
            ],
            "args_type_name": [
              "Error"
            ]
          }
        ],
        "events_value": {
          "type": 135
        },
        "constants": [
          {
            "name": "MaxKeyLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00020000",
            "docs": [
              " Maximal number of bytes that a key can have.",
              "",
              " FRAME itself does not limit the key length.",
              " The concrete value must therefore depend on your storage usage.",
              " A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number of",
              " keys which are then hashed and concatenated, resulting in arbitrarily long keys.",
              "",
              " Use the *state migration RPC* to retrieve the length of the longest key in your",
              " storage: \u003chttps://github.com/paritytech/substrate/issues/11642\u003e",
              "",
              " The migration will halt with a `Halted` event if this value is too small.",
              " Since there is no real penalty from over-estimating, it is advised to use a large",
              " value. The default is 512 byte.",
              "",
              " Some key lengths for reference:",
              " - [`frame_support::storage::StorageValue`]: 32 byte",
              " - [`frame_support::storage::StorageMap`]: 64 byte",
              " - [`frame_support::storage::StorageDoubleMap`]: 96 byte",
              "",
              " For more info see",
              " \u003chttps://www.shawntabrizi.com/substrate/querying-substrate-storage-via-rpc/\u003e"
            ]
          }
        ],
        "errors": [
          {
            "name": "MaxSignedLimits",
            "doc": [
              "Max signed limits not respected."
            ]
          },
          {
            "name": "KeyTooLong",
            "doc": [
              "A key was longer than the configured maximum.",
              "",
              "This means that the migration halted at the current [`Progress`] and",
              "can be resumed with a larger [`crate::Config::MaxKeyLen`] value.",
              "Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.",
              "The value should only be increased to avoid a storage migration for the currently",
              "stored [`crate::Progress::LastKey`]."
            ]
          },
          {
            "name": "NotEnoughFunds",
            "doc": [
              "submitter does not have enough funds."
            ]
          },
          {
            "name": "BadWitness",
            "doc": [
              "Bad witness data provided."
            ]
          },
          {
            "name": "SignedMigrationNotAllowed",
            "doc": [
              "Signed migration is not allowed because the maximum limit is not set yet."
            ]
          },
          {
            "name": "BadChildRoot",
            "doc": [
              "Bad child root provided."
            ]
          }
        ],
        "errors_value": {
          "type": 137
        },
        "index": 51
      },
      {
        "name": "ChildBounties",
        "prefix": "ChildBounties",
        "storage": [
          {
            "name": "ChildBountyCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Number of total child bounties."
            ]
          },
          {
            "name": "ParentChildBounties",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " Number of child bounties per parent bounty.",
              " Map of parent bounty index to number of child bounties."
            ]
          },
          {
            "name": "ChildBounties",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_child_bounties:ChildBounty",
                "keys_id": 94,
                "value_id": 754
              }
            },
            "fallback": "0x00",
            "docs": [
              " Child bounties that have been added."
            ]
          },
          {
            "name": "ChildBountyDescriptions",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 678
              }
            },
            "fallback": "0x00",
            "docs": [
              " The description of each child-bounty."
            ]
          },
          {
            "name": "ChildrenCuratorFees",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U128",
                "keys_id": 4,
                "value_id": 6
              }
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The cumulative child-bounty curator fee for each parent bounty."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3400",
            "name": "add_child_bounty",
            "docs": [
              "See [`Pallet::add_child_bounty`]."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "value",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "description",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "3401",
            "name": "propose_curator",
            "docs": [
              "See [`Pallet::propose_curator`]."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "curator",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "fee",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "3402",
            "name": "accept_curator",
            "docs": [
              "See [`Pallet::accept_curator`]."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "3403",
            "name": "unassign_curator",
            "docs": [
              "See [`Pallet::unassign_curator`]."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "3404",
            "name": "award_child_bounty",
            "docs": [
              "See [`Pallet::award_child_bounty`]."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "beneficiary",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3405",
            "name": "claim_child_bounty",
            "docs": [
              "See [`Pallet::claim_child_bounty`]."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          },
          {
            "lookup": "3406",
            "name": "close_child_bounty",
            "docs": [
              "See [`Pallet::close_child_bounty`]."
            ],
            "args": [
              {
                "name": "parent_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              },
              {
                "name": "child_bounty_id",
                "type": "compact\u003cU32\u003e",
                "type_name": "BountyIndex"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 365
        },
        "events": [
          {
            "lookup": "3400",
            "name": "Added",
            "docs": [
              "A child-bounty is added."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "index",
              "child_index"
            ],
            "args_type_name": [
              "BountyIndex",
              "BountyIndex"
            ]
          },
          {
            "lookup": "3401",
            "name": "Awarded",
            "docs": [
              "A child-bounty is awarded to a beneficiary."
            ],
            "args": [
              "U32",
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "index",
              "child_index",
              "beneficiary"
            ],
            "args_type_name": [
              "BountyIndex",
              "BountyIndex",
              "AccountId"
            ]
          },
          {
            "lookup": "3402",
            "name": "Claimed",
            "docs": [
              "A child-bounty is claimed by beneficiary."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "[U8; 32]"
            ],
            "args_name": [
              "index",
              "child_index",
              "payout",
              "beneficiary"
            ],
            "args_type_name": [
              "BountyIndex",
              "BountyIndex",
              "BalanceOf",
              "AccountId"
            ]
          },
          {
            "lookup": "3403",
            "name": "Canceled",
            "docs": [
              "A child-bounty is cancelled."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "index",
              "child_index"
            ],
            "args_type_name": [
              "BountyIndex",
              "BountyIndex"
            ]
          }
        ],
        "events_value": {
          "type": 138
        },
        "constants": [
          {
            "name": "MaxActiveChildBountyCount",
            "type": "U32",
            "type_value": 4,
            "constants_value": "05000000",
            "docs": [
              " Maximum number of child bounties that can be added to a parent bounty."
            ]
          },
          {
            "name": "ChildBountyValueMinimum",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " Minimum value for a child-bounty."
            ]
          }
        ],
        "errors": [
          {
            "name": "ParentBountyNotActive",
            "doc": [
              "The parent bounty is not in active state."
            ]
          },
          {
            "name": "InsufficientBountyBalance",
            "doc": [
              "The bounty balance is not enough to add new child-bounty."
            ]
          },
          {
            "name": "TooManyChildBounties",
            "doc": [
              "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."
            ]
          }
        ],
        "errors_value": {
          "type": 756
        },
        "index": 52
      },
      {
        "name": "Referenda",
        "prefix": "Referenda",
        "storage": [
          {
            "name": "ReferendumCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The next free referendum index, aka the number of referenda started so far."
            ]
          },
          {
            "name": "ReferendumInfoFor",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_referenda:types:ReferendumInfo@757",
                "keys_id": 4,
                "value_id": 757
              }
            },
            "fallback": "0x00",
            "docs": [
              " Information concerning any given referendum."
            ]
          },
          {
            "name": "TrackQueue",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16"
                ],
                "value": "Vec\u003cTuple:U32U128\u003e",
                "keys_id": 101,
                "value_id": 765
              }
            },
            "fallback": "0x00",
            "docs": [
              " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
              " conviction-weighted approvals.",
              "",
              " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
            ]
          },
          {
            "name": "DecidingCount",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16"
                ],
                "value": "U32",
                "keys_id": 101,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of referenda being decided currently."
            ]
          },
          {
            "name": "MetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "H256",
                "keys_id": 4,
                "value_id": 12
              }
            },
            "fallback": "0x00",
            "docs": [
              " The metadata is a general information concerning the referendum.",
              " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
              " dump or IPFS hash of a JSON file.",
              "",
              " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
              " large preimages."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3500",
            "name": "submit",
            "docs": [
              "See [`Pallet::submit`]."
            ],
            "args": [
              {
                "name": "proposal_origin",
                "type": "kitchensink_runtime:OriginCaller",
                "type_name": "Box\u003cPalletsOriginOf\u003e"
              },
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              },
              {
                "name": "enactment_moment",
                "type": "frame_support:traits:schedule:DispatchTime",
                "type_name": "DispatchTime\u003cBlockNumberFor\u003e"
              }
            ]
          },
          {
            "lookup": "3501",
            "name": "place_decision_deposit",
            "docs": [
              "See [`Pallet::place_decision_deposit`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3502",
            "name": "refund_decision_deposit",
            "docs": [
              "See [`Pallet::refund_decision_deposit`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3503",
            "name": "cancel",
            "docs": [
              "See [`Pallet::cancel`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3504",
            "name": "kill",
            "docs": [
              "See [`Pallet::kill`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3505",
            "name": "nudge_referendum",
            "docs": [
              "See [`Pallet::nudge_referendum`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3506",
            "name": "one_fewer_deciding",
            "docs": [
              "See [`Pallet::one_fewer_deciding`]."
            ],
            "args": [
              {
                "name": "track",
                "type": "U16",
                "type_name": "TrackIdOf"
              }
            ]
          },
          {
            "lookup": "3507",
            "name": "refund_submission_deposit",
            "docs": [
              "See [`Pallet::refund_submission_deposit`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3508",
            "name": "set_metadata",
            "docs": [
              "See [`Pallet::set_metadata`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              },
              {
                "name": "maybe_hash",
                "type": "option\u003cH256\u003e",
                "type_name": "Option\u003cPreimageHash\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 366
        },
        "events": [
          {
            "lookup": "3500",
            "name": "Submitted",
            "docs": [
              "A referendum has been submitted."
            ],
            "args": [
              "U32",
              "U16",
              "frame_support:traits:preimages:Bounded"
            ],
            "args_name": [
              "index",
              "track",
              "proposal"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "TrackIdOf",
              "BoundedCallOf"
            ]
          },
          {
            "lookup": "3501",
            "name": "DecisionDepositPlaced",
            "docs": [
              "The decision deposit has been placed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "index",
              "who",
              "amount"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3502",
            "name": "DecisionDepositRefunded",
            "docs": [
              "The decision deposit has been refunded."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "index",
              "who",
              "amount"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3503",
            "name": "DepositSlashed",
            "docs": [
              "A deposit has been slashaed."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3504",
            "name": "DecisionStarted",
            "docs": [
              "A referendum has moved into the deciding phase."
            ],
            "args": [
              "U32",
              "U16",
              "frame_support:traits:preimages:Bounded",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_name": [
              "index",
              "track",
              "proposal",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "TrackIdOf",
              "BoundedCallOf",
              "Tally"
            ]
          },
          {
            "lookup": "3505",
            "name": "ConfirmStarted",
            "docs": null,
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3506",
            "name": "ConfirmAborted",
            "docs": null,
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3507",
            "name": "Confirmed",
            "docs": [
              "A referendum has ended its confirmation phase and is ready for approval."
            ],
            "args": [
              "U32",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_name": [
              "index",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3508",
            "name": "Approved",
            "docs": [
              "A referendum has been approved and its proposal has been scheduled."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3509",
            "name": "Rejected",
            "docs": [
              "A proposal has been rejected by referendum."
            ],
            "args": [
              "U32",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_name": [
              "index",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "350a",
            "name": "TimedOut",
            "docs": [
              "A referendum has been timed out without being decided."
            ],
            "args": [
              "U32",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_name": [
              "index",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "350b",
            "name": "Cancelled",
            "docs": [
              "A referendum has been cancelled."
            ],
            "args": [
              "U32",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_name": [
              "index",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "350c",
            "name": "Killed",
            "docs": [
              "A referendum has been killed."
            ],
            "args": [
              "U32",
              "pallet_conviction_voting:types:Tally"
            ],
            "args_name": [
              "index",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "350d",
            "name": "SubmissionDepositRefunded",
            "docs": [
              "The submission deposit has been refunded."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "index",
              "who",
              "amount"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "350e",
            "name": "MetadataSet",
            "docs": [
              "Metadata for a referendum has been set."
            ],
            "args": [
              "U32",
              "H256"
            ],
            "args_name": [
              "index",
              "hash"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "PreimageHash"
            ]
          },
          {
            "lookup": "350f",
            "name": "MetadataCleared",
            "docs": [
              "Metadata for a referendum has been cleared."
            ],
            "args": [
              "U32",
              "H256"
            ],
            "args_name": [
              "index",
              "hash"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "PreimageHash"
            ]
          }
        ],
        "events_value": {
          "type": 139
        },
        "constants": [
          {
            "name": "SubmissionDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "name": "MaxQueued",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " Maximum size of the referendum queue for a single track."
            ]
          },
          {
            "name": "UndecidingTimeout",
            "type": "U32",
            "type_value": 4,
            "constants_value": "004e0c00",
            "docs": [
              " The number of blocks after submission that a referendum must begin being decided by.",
              " Once this passes, then anyone may cancel the referendum."
            ]
          },
          {
            "name": "AlarmInterval",
            "type": "U32",
            "type_value": 4,
            "constants_value": "01000000",
            "docs": [
              " Quantization level for the referendum wakeup scheduler. A higher number will result in",
              " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
              " automatic referendum status changes. Explicit servicing instructions are unaffected."
            ]
          },
          {
            "name": "Tracks",
            "type": "Vec\u003cTuple:U16pallet_referenda:types:TrackInfo\u003e",
            "type_value": 766,
            "constants_value": "04000010726f6f74010000000a000000000000000000000000000000040000000400000002000000040000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b0000000000ca9a3b",
            "docs": [
              " Information concerning the different referendum tracks."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotOngoing",
            "doc": [
              "Referendum is not ongoing."
            ]
          },
          {
            "name": "HasDeposit",
            "doc": [
              "Referendum's decision deposit is already paid."
            ]
          },
          {
            "name": "BadTrack",
            "doc": [
              "The track identifier given was invalid."
            ]
          },
          {
            "name": "Full",
            "doc": [
              "There are already a full complement of referenda in progress for this track."
            ]
          },
          {
            "name": "QueueEmpty",
            "doc": [
              "The queue of the track is empty."
            ]
          },
          {
            "name": "BadReferendum",
            "doc": [
              "The referendum index provided is invalid in this context."
            ]
          },
          {
            "name": "NothingToDo",
            "doc": [
              "There was nothing to do in the advancement."
            ]
          },
          {
            "name": "NoTrack",
            "doc": [
              "No track exists for the proposal origin."
            ]
          },
          {
            "name": "Unfinished",
            "doc": [
              "Any deposit cannot be refunded until after the decision is over."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The deposit refunder is not the depositor."
            ]
          },
          {
            "name": "NoDeposit",
            "doc": [
              "The deposit cannot be refunded since none was made."
            ]
          },
          {
            "name": "BadStatus",
            "doc": [
              "The referendum status is invalid for this operation."
            ]
          },
          {
            "name": "PreimageNotExist",
            "doc": [
              "The preimage does not exist."
            ]
          }
        ],
        "errors_value": {
          "type": 772
        },
        "index": 53
      },
      {
        "name": "Remark",
        "prefix": "",
        "storage": null,
        "calls": [
          {
            "lookup": "3600",
            "name": "store",
            "docs": [
              "See [`Pallet::store`]."
            ],
            "args": [
              {
                "name": "remark",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 368
        },
        "events": [
          {
            "lookup": "3600",
            "name": "Stored",
            "docs": [
              "Stored data off chain."
            ],
            "args": [
              "[U8; 32]",
              "H256"
            ],
            "args_name": [
              "sender",
              "content_hash"
            ],
            "args_type_name": [
              "AccountId",
              "sp_core::H256"
            ]
          }
        ],
        "events_value": {
          "type": 418
        },
        "errors": [
          {
            "name": "Empty",
            "doc": [
              "Attempting to store empty data."
            ]
          },
          {
            "name": "BadContext",
            "doc": [
              "Attempted to call `store` outside of block execution."
            ]
          }
        ],
        "errors_value": {
          "type": 773
        },
        "index": 54
      },
      {
        "name": "RootTesting",
        "prefix": "",
        "storage": null,
        "calls": [
          {
            "lookup": "3700",
            "name": "fill_block",
            "docs": [
              "See [`Pallet::fill_block`]."
            ],
            "args": [
              {
                "name": "ratio",
                "type": "U32",
                "type_name": "Perbill"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 369
        },
        "errors": null,
        "errors_value": null,
        "index": 55
      },
      {
        "name": "ConvictionVoting",
        "prefix": "ConvictionVoting",
        "storage": [
          {
            "name": "VotingFor",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U16"
                ],
                "value": "pallet_conviction_voting:vote:Voting",
                "keys_id": 774,
                "value_id": 775
              }
            },
            "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " All voting for a particular voter in a particular voting class. We store the balance for the",
              " number of votes that we have recorded."
            ]
          },
          {
            "name": "ClassLocksFor",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "Vec\u003cTuple:U16U128\u003e",
                "keys_id": 0,
                "value_id": 783
              }
            },
            "fallback": "0x00",
            "docs": [
              " The voting classes which have a non-zero lock requirement and the lock amounts which they",
              " require. The actual amount locked on behalf of this pallet should always be the maximum of",
              " this list."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3800",
            "name": "vote",
            "docs": [
              "See [`Pallet::vote`]."
            ],
            "args": [
              {
                "name": "poll_index",
                "type": "compact\u003cU32\u003e",
                "type_name": "PollIndexOf"
              },
              {
                "name": "vote",
                "type": "pallet_conviction_voting:vote:AccountVote",
                "type_name": "AccountVote\u003cBalanceOf\u003e"
              }
            ]
          },
          {
            "lookup": "3801",
            "name": "delegate",
            "docs": [
              "See [`Pallet::delegate`]."
            ],
            "args": [
              {
                "name": "class",
                "type": "U16",
                "type_name": "ClassOf"
              },
              {
                "name": "to",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "conviction",
                "type": "pallet_conviction_voting:conviction:Conviction",
                "type_name": "Conviction"
              },
              {
                "name": "balance",
                "type": "U128",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "3802",
            "name": "undelegate",
            "docs": [
              "See [`Pallet::undelegate`]."
            ],
            "args": [
              {
                "name": "class",
                "type": "U16",
                "type_name": "ClassOf"
              }
            ]
          },
          {
            "lookup": "3803",
            "name": "unlock",
            "docs": [
              "See [`Pallet::unlock`]."
            ],
            "args": [
              {
                "name": "class",
                "type": "U16",
                "type_name": "ClassOf"
              },
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3804",
            "name": "remove_vote",
            "docs": [
              "See [`Pallet::remove_vote`]."
            ],
            "args": [
              {
                "name": "class",
                "type": "option\u003cU16\u003e",
                "type_name": "Option\u003cClassOf\u003e"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "PollIndexOf"
              }
            ]
          },
          {
            "lookup": "3805",
            "name": "remove_other_vote",
            "docs": [
              "See [`Pallet::remove_other_vote`]."
            ],
            "args": [
              {
                "name": "target",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "class",
                "type": "U16",
                "type_name": "ClassOf"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "PollIndexOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 370
        },
        "events": [
          {
            "lookup": "3800",
            "name": "Delegated",
            "docs": [
              "An account has delegated their vote to another account. \\[who, target\\]"
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "",
              ""
            ],
            "args_type_name": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "3801",
            "name": "Undelegated",
            "docs": [
              "An \\[account\\] has cancelled a previous delegation operation."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              ""
            ],
            "args_type_name": [
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 419
        },
        "constants": [
          {
            "name": "MaxVotes",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00020000",
            "docs": [
              " The maximum number of concurrent votes an account may have.",
              "",
              " Also used to compute weight, an overly large value can lead to extrinsics with large",
              " weight estimation: see `delegate` for instance."
            ]
          },
          {
            "name": "VoteLockingPeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "002f0d00",
            "docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotOngoing",
            "doc": [
              "Poll is not ongoing."
            ]
          },
          {
            "name": "NotVoter",
            "doc": [
              "The given account did not vote on the poll."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "name": "NoPermissionYet",
            "doc": [
              "The actor has no permission to conduct the action right now but will do in the future."
            ]
          },
          {
            "name": "AlreadyDelegating",
            "doc": [
              "The account is already delegating."
            ]
          },
          {
            "name": "AlreadyVoting",
            "doc": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "name": "InsufficientFunds",
            "doc": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "name": "NotDelegating",
            "doc": [
              "The account is not currently delegating."
            ]
          },
          {
            "name": "Nonsense",
            "doc": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "name": "MaxVotesReached",
            "doc": [
              "Maximum number of votes reached."
            ]
          },
          {
            "name": "ClassNeeded",
            "doc": [
              "The class must be supplied since it is not easily determinable from the state."
            ]
          },
          {
            "name": "BadClass",
            "doc": [
              "The class ID supplied is invalid."
            ]
          }
        ],
        "errors_value": {
          "type": 786
        },
        "index": 56
      },
      {
        "name": "Whitelist",
        "prefix": "Whitelist",
        "storage": [
          {
            "name": "WhitelistedCall",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "NULL",
                "keys_id": 12,
                "value_id": 32
              }
            },
            "fallback": "0x00",
            "docs": null
          }
        ],
        "calls": [
          {
            "lookup": "3900",
            "name": "whitelist_call",
            "docs": [
              "See [`Pallet::whitelist_call`]."
            ],
            "args": [
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "PreimageHash"
              }
            ]
          },
          {
            "lookup": "3901",
            "name": "remove_whitelisted_call",
            "docs": [
              "See [`Pallet::remove_whitelisted_call`]."
            ],
            "args": [
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "PreimageHash"
              }
            ]
          },
          {
            "lookup": "3902",
            "name": "dispatch_whitelisted_call",
            "docs": [
              "See [`Pallet::dispatch_whitelisted_call`]."
            ],
            "args": [
              {
                "name": "call_hash",
                "type": "H256",
                "type_name": "PreimageHash"
              },
              {
                "name": "call_encoded_len",
                "type": "U32",
                "type_name": "u32"
              },
              {
                "name": "call_weight_witness",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          },
          {
            "lookup": "3903",
            "name": "dispatch_whitelisted_call_with_preimage",
            "docs": [
              "See [`Pallet::dispatch_whitelisted_call_with_preimage`]."
            ],
            "args": [
              {
                "name": "call",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003e::RuntimeCall\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 374
        },
        "events": [
          {
            "lookup": "3900",
            "name": "CallWhitelisted",
            "docs": null,
            "args": [
              "H256"
            ],
            "args_name": [
              "call_hash"
            ],
            "args_type_name": [
              "PreimageHash"
            ]
          },
          {
            "lookup": "3901",
            "name": "WhitelistedCallRemoved",
            "docs": null,
            "args": [
              "H256"
            ],
            "args_name": [
              "call_hash"
            ],
            "args_type_name": [
              "PreimageHash"
            ]
          },
          {
            "lookup": "3902",
            "name": "WhitelistedCallDispatched",
            "docs": null,
            "args": [
              "H256",
              "Result\u003cframe_support:dispatch:PostDispatchInfo,sp_runtime:DispatchErrorWithPostInfo\u003e"
            ],
            "args_name": [
              "call_hash",
              "result"
            ],
            "args_type_name": [
              "PreimageHash",
              "DispatchResultWithPostInfo"
            ]
          }
        ],
        "events_value": {
          "type": 420
        },
        "errors": [
          {
            "name": "UnavailablePreImage",
            "doc": [
              "The preimage of the call hash could not be loaded."
            ]
          },
          {
            "name": "UndecodableCall",
            "doc": [
              "The call could not be decoded."
            ]
          },
          {
            "name": "InvalidCallWeightWitness",
            "doc": [
              "The weight of the decoded call was higher than the witness."
            ]
          },
          {
            "name": "CallIsNotWhitelisted",
            "doc": [
              "The call was not whitelisted."
            ]
          },
          {
            "name": "CallAlreadyWhitelisted",
            "doc": [
              "The call was already whitelisted; No-Op."
            ]
          }
        ],
        "errors_value": {
          "type": 787
        },
        "index": 57
      },
      {
        "name": "AllianceMotion",
        "prefix": "AllianceMotion",
        "storage": [
          {
            "name": "Proposals",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cH256\u003e",
              "PlainTypeValue": 788
            },
            "fallback": "0x00",
            "docs": [
              " The hashes of the active proposals."
            ]
          },
          {
            "name": "ProposalOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "Call",
                "keys_id": 12,
                "value_id": 141
              }
            },
            "fallback": "0x00",
            "docs": [
              " Actual proposal for a given hash, if it's current."
            ]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Identity"
                ],
                "key_vec": [
                  "H256"
                ],
                "value": "pallet_collective:Votes",
                "keys_id": 12,
                "value_id": 564
              }
            },
            "fallback": "0x00",
            "docs": [
              " Votes on a given proposal, if it is ongoing."
            ]
          },
          {
            "name": "ProposalCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Proposals so far."
            ]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 89
            },
            "fallback": "0x00",
            "docs": [
              " The current members of the collective. This is stored sorted (just by value)."
            ]
          },
          {
            "name": "Prime",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "[U8; 32]",
              "PlainTypeValue": 0
            },
            "fallback": "0x00",
            "docs": [
              " The prime member that helps determine the default vote behavior in case of absentations."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3a00",
            "name": "set_members",
            "docs": [
              "See [`Pallet::set_members`]."
            ],
            "args": [
              {
                "name": "new_members",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "prime",
                "type": "option\u003c[U8; 32]\u003e",
                "type_name": "Option\u003cAccountId\u003e"
              },
              {
                "name": "old_count",
                "type": "U32",
                "type_name": "MemberCount"
              }
            ]
          },
          {
            "lookup": "3a01",
            "name": "execute",
            "docs": [
              "See [`Pallet::execute`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3a02",
            "name": "propose",
            "docs": [
              "See [`Pallet::propose`]."
            ],
            "args": [
              {
                "name": "threshold",
                "type": "compact\u003cU32\u003e",
                "type_name": "MemberCount"
              },
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3a03",
            "name": "vote",
            "docs": [
              "See [`Pallet::vote`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "3a05",
            "name": "disapprove_proposal",
            "docs": [
              "See [`Pallet::disapprove_proposal`]."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              }
            ]
          },
          {
            "lookup": "3a06",
            "name": "close",
            "docs": [
              "See [`Pallet::close`]."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "proposal_weight_bound",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 375
        },
        "events": [
          {
            "lookup": "3a00",
            "name": "Proposed",
            "docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "H256",
              "U32"
            ],
            "args_name": [
              "account",
              "proposal_index",
              "proposal_hash",
              "threshold"
            ],
            "args_type_name": [
              "AccountId",
              "ProposalIndex",
              "Hash",
              "MemberCount"
            ]
          },
          {
            "lookup": "3a01",
            "name": "Voted",
            "docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ],
            "args": [
              "[U8; 32]",
              "H256",
              "Bool",
              "U32",
              "U32"
            ],
            "args_name": [
              "account",
              "proposal_hash",
              "voted",
              "yes",
              "no"
            ],
            "args_type_name": [
              "AccountId",
              "Hash",
              "bool",
              "MemberCount",
              "MemberCount"
            ]
          },
          {
            "lookup": "3a02",
            "name": "Approved",
            "docs": [
              "A motion was approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "proposal_hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "3a03",
            "name": "Disapproved",
            "docs": [
              "A motion was not approved by the required threshold."
            ],
            "args": [
              "H256"
            ],
            "args_name": [
              "proposal_hash"
            ],
            "args_type_name": [
              "Hash"
            ]
          },
          {
            "lookup": "3a04",
            "name": "Executed",
            "docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "proposal_hash",
              "result"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "3a05",
            "name": "MemberExecuted",
            "docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ],
            "args": [
              "H256",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "proposal_hash",
              "result"
            ],
            "args_type_name": [
              "Hash",
              "DispatchResult"
            ]
          },
          {
            "lookup": "3a06",
            "name": "Closed",
            "docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ],
            "args": [
              "H256",
              "U32",
              "U32"
            ],
            "args_name": [
              "proposal_hash",
              "yes",
              "no"
            ],
            "args_type_name": [
              "Hash",
              "MemberCount",
              "MemberCount"
            ]
          }
        ],
        "events_value": {
          "type": 425
        },
        "constants": [
          {
            "name": "MaxProposalWeight",
            "type": "sp_weights:weight_v2:Weight",
            "type_value": 9,
            "constants_value": "070010a5d4e813ffffffffffffff7f",
            "docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotMember",
            "doc": [
              "Account is not a member"
            ]
          },
          {
            "name": "DuplicateProposal",
            "doc": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "name": "ProposalMissing",
            "doc": [
              "Proposal must exist"
            ]
          },
          {
            "name": "WrongIndex",
            "doc": [
              "Mismatched index"
            ]
          },
          {
            "name": "DuplicateVote",
            "doc": [
              "Duplicate vote ignored"
            ]
          },
          {
            "name": "AlreadyInitialized",
            "doc": [
              "Members are already initialized!"
            ]
          },
          {
            "name": "TooEarly",
            "doc": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "name": "TooManyProposals",
            "doc": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "name": "WrongProposalWeight",
            "doc": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "name": "WrongProposalLength",
            "doc": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "name": "PrimeAccountNotMember",
            "doc": [
              "Prime account is not a member"
            ]
          }
        ],
        "errors_value": {
          "type": 789
        },
        "index": 58
      },
      {
        "name": "Alliance",
        "prefix": "Alliance",
        "storage": [
          {
            "name": "Rule",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_alliance:types:Cid",
              "PlainTypeValue": 378
            },
            "fallback": "0x00",
            "docs": [
              " The IPFS CID of the alliance rule.",
              " Fellows can propose a new rule with a super-majority."
            ]
          },
          {
            "name": "Announcements",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_alliance:types:Cid\u003e",
              "PlainTypeValue": 790
            },
            "fallback": "0x00",
            "docs": [
              " The current IPFS CIDs of any announcements."
            ]
          },
          {
            "name": "DepositOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U128",
                "keys_id": 0,
                "value_id": 6
              }
            },
            "fallback": "0x00",
            "docs": [
              " Maps members to their candidacy deposit."
            ]
          },
          {
            "name": "Members",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "pallet_alliance:MemberRole"
                ],
                "value": "Vec\u003c[U8; 32]\u003e",
                "keys_id": 792,
                "value_id": 793
              }
            },
            "fallback": "0x00",
            "docs": [
              " Maps member type to members of each type."
            ]
          },
          {
            "name": "RetiringMembers",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 0,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " A set of members who gave a retirement notice. They can retire after the end of retirement",
              " period stored as a future block number."
            ]
          },
          {
            "name": "UnscrupulousAccounts",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003c[U8; 32]\u003e",
              "PlainTypeValue": 550
            },
            "fallback": "0x00",
            "docs": [
              " The current list of accounts deemed unscrupulous. These accounts non grata cannot submit",
              " candidacy."
            ]
          },
          {
            "name": "UnscrupulousWebsites",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cVec\u003cU8\u003e\u003e",
              "PlainTypeValue": 794
            },
            "fallback": "0x00",
            "docs": [
              " The current list of websites deemed unscrupulous."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3b00",
            "name": "propose",
            "docs": [
              "See [`Pallet::propose`]."
            ],
            "args": [
              {
                "name": "threshold",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              },
              {
                "name": "proposal",
                "type": "Call",
                "type_name": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3b01",
            "name": "vote",
            "docs": [
              "See [`Pallet::vote`]."
            ],
            "args": [
              {
                "name": "proposal",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "approve",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "3b03",
            "name": "init_members",
            "docs": [
              "See [`Pallet::init_members`]."
            ],
            "args": [
              {
                "name": "fellows",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              },
              {
                "name": "allies",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "3b04",
            "name": "disband",
            "docs": [
              "See [`Pallet::disband`]."
            ],
            "args": [
              {
                "name": "witness",
                "type": "pallet_alliance:types:DisbandWitness",
                "type_name": "DisbandWitness"
              }
            ]
          },
          {
            "lookup": "3b05",
            "name": "set_rule",
            "docs": [
              "See [`Pallet::set_rule`]."
            ],
            "args": [
              {
                "name": "rule",
                "type": "pallet_alliance:types:Cid",
                "type_name": "Cid"
              }
            ]
          },
          {
            "lookup": "3b06",
            "name": "announce",
            "docs": [
              "See [`Pallet::announce`]."
            ],
            "args": [
              {
                "name": "announcement",
                "type": "pallet_alliance:types:Cid",
                "type_name": "Cid"
              }
            ]
          },
          {
            "lookup": "3b07",
            "name": "remove_announcement",
            "docs": [
              "See [`Pallet::remove_announcement`]."
            ],
            "args": [
              {
                "name": "announcement",
                "type": "pallet_alliance:types:Cid",
                "type_name": "Cid"
              }
            ]
          },
          {
            "lookup": "3b08",
            "name": "join_alliance",
            "docs": [
              "See [`Pallet::join_alliance`]."
            ],
            "args": null
          },
          {
            "lookup": "3b09",
            "name": "nominate_ally",
            "docs": [
              "See [`Pallet::nominate_ally`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3b0a",
            "name": "elevate_ally",
            "docs": [
              "See [`Pallet::elevate_ally`]."
            ],
            "args": [
              {
                "name": "ally",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3b0b",
            "name": "give_retirement_notice",
            "docs": [
              "See [`Pallet::give_retirement_notice`]."
            ],
            "args": null
          },
          {
            "lookup": "3b0c",
            "name": "retire",
            "docs": [
              "See [`Pallet::retire`]."
            ],
            "args": null
          },
          {
            "lookup": "3b0d",
            "name": "kick_member",
            "docs": [
              "See [`Pallet::kick_member`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3b0e",
            "name": "add_unscrupulous_items",
            "docs": [
              "See [`Pallet::add_unscrupulous_items`]."
            ],
            "args": [
              {
                "name": "items",
                "type": "Vec\u003cpallet_alliance:UnscrupulousItem\u003e",
                "type_name": "Vec\u003cUnscrupulousItemOf\u003e"
              }
            ]
          },
          {
            "lookup": "3b0f",
            "name": "remove_unscrupulous_items",
            "docs": [
              "See [`Pallet::remove_unscrupulous_items`]."
            ],
            "args": [
              {
                "name": "items",
                "type": "Vec\u003cpallet_alliance:UnscrupulousItem\u003e",
                "type_name": "Vec\u003cUnscrupulousItemOf\u003e"
              }
            ]
          },
          {
            "lookup": "3b10",
            "name": "close",
            "docs": [
              "See [`Pallet::close`]."
            ],
            "args": [
              {
                "name": "proposal_hash",
                "type": "H256",
                "type_name": "Hash"
              },
              {
                "name": "index",
                "type": "compact\u003cU32\u003e",
                "type_name": "ProposalIndex"
              },
              {
                "name": "proposal_weight_bound",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              },
              {
                "name": "length_bound",
                "type": "compact\u003cU32\u003e",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3b11",
            "name": "abdicate_fellow_status",
            "docs": [
              "See [`Pallet::abdicate_fellow_status`]."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 376
        },
        "events": [
          {
            "lookup": "3b00",
            "name": "NewRuleSet",
            "docs": [
              "A new rule has been set."
            ],
            "args": [
              "pallet_alliance:types:Cid"
            ],
            "args_name": [
              "rule"
            ],
            "args_type_name": [
              "Cid"
            ]
          },
          {
            "lookup": "3b01",
            "name": "Announced",
            "docs": [
              "A new announcement has been proposed."
            ],
            "args": [
              "pallet_alliance:types:Cid"
            ],
            "args_name": [
              "announcement"
            ],
            "args_type_name": [
              "Cid"
            ]
          },
          {
            "lookup": "3b02",
            "name": "AnnouncementRemoved",
            "docs": [
              "An on-chain announcement has been removed."
            ],
            "args": [
              "pallet_alliance:types:Cid"
            ],
            "args_name": [
              "announcement"
            ],
            "args_type_name": [
              "Cid"
            ]
          },
          {
            "lookup": "3b03",
            "name": "MembersInitialized",
            "docs": [
              "Some accounts have been initialized as members (fellows/allies)."
            ],
            "args": [
              "Vec\u003c[U8; 32]\u003e",
              "Vec\u003c[U8; 32]\u003e"
            ],
            "args_name": [
              "fellows",
              "allies"
            ],
            "args_type_name": [
              "Vec\u003cAccountId\u003e",
              "Vec\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "3b04",
            "name": "NewAllyJoined",
            "docs": [
              "An account has been added as an Ally and reserved its deposit."
            ],
            "args": [
              "[U8; 32]",
              "option\u003c[U8; 32]\u003e",
              "option\u003cU128\u003e"
            ],
            "args_name": [
              "ally",
              "nominator",
              "reserved"
            ],
            "args_type_name": [
              "AccountId",
              "Option\u003cAccountId\u003e",
              "Option\u003cBalanceOf\u003e"
            ]
          },
          {
            "lookup": "3b05",
            "name": "AllyElevated",
            "docs": [
              "An ally has been elevated to Fellow."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "ally"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "3b06",
            "name": "MemberRetirementPeriodStarted",
            "docs": [
              "A member gave retirement notice and their retirement period started."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "member"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "3b07",
            "name": "MemberRetired",
            "docs": [
              "A member has retired with its deposit unreserved."
            ],
            "args": [
              "[U8; 32]",
              "option\u003cU128\u003e"
            ],
            "args_name": [
              "member",
              "unreserved"
            ],
            "args_type_name": [
              "AccountId",
              "Option\u003cBalanceOf\u003e"
            ]
          },
          {
            "lookup": "3b08",
            "name": "MemberKicked",
            "docs": [
              "A member has been kicked out with its deposit slashed."
            ],
            "args": [
              "[U8; 32]",
              "option\u003cU128\u003e"
            ],
            "args_name": [
              "member",
              "slashed"
            ],
            "args_type_name": [
              "AccountId",
              "Option\u003cBalanceOf\u003e"
            ]
          },
          {
            "lookup": "3b09",
            "name": "UnscrupulousItemAdded",
            "docs": [
              "Accounts or websites have been added into the list of unscrupulous items."
            ],
            "args": [
              "Vec\u003cpallet_alliance:UnscrupulousItem\u003e"
            ],
            "args_name": [
              "items"
            ],
            "args_type_name": [
              "Vec\u003cUnscrupulousItemOf\u003e"
            ]
          },
          {
            "lookup": "3b0a",
            "name": "UnscrupulousItemRemoved",
            "docs": [
              "Accounts or websites have been removed from the list of unscrupulous items."
            ],
            "args": [
              "Vec\u003cpallet_alliance:UnscrupulousItem\u003e"
            ],
            "args_name": [
              "items"
            ],
            "args_type_name": [
              "Vec\u003cUnscrupulousItemOf\u003e"
            ]
          },
          {
            "lookup": "3b0b",
            "name": "AllianceDisbanded",
            "docs": [
              "Alliance disbanded. Includes number deleted members and unreserved deposits."
            ],
            "args": [
              "U32",
              "U32",
              "U32"
            ],
            "args_name": [
              "fellow_members",
              "ally_members",
              "unreserved"
            ],
            "args_type_name": [
              "u32",
              "u32",
              "u32"
            ]
          },
          {
            "lookup": "3b0c",
            "name": "FellowAbdicated",
            "docs": [
              "A Fellow abdicated their voting rights. They are now an Ally."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "fellow"
            ],
            "args_type_name": [
              "AccountId"
            ]
          }
        ],
        "events_value": {
          "type": 426
        },
        "constants": [
          {
            "name": "MaxUnscrupulousItems",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of the unscrupulous items supported by the pallet."
            ]
          },
          {
            "name": "MaxWebsiteUrlLength",
            "type": "U32",
            "type_value": 4,
            "constants_value": "ff000000",
            "docs": [
              " The maximum length of a website URL."
            ]
          },
          {
            "name": "AllyDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0080c6a47e8d03000000000000000000",
            "docs": [
              " The deposit required for submitting candidacy."
            ]
          },
          {
            "name": "MaxAnnouncementsCount",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of announcements."
            ]
          },
          {
            "name": "MaxMembersCount",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " The maximum number of members per member role."
            ]
          }
        ],
        "errors": [
          {
            "name": "AllianceNotYetInitialized",
            "doc": [
              "The Alliance has not been initialized yet, therefore accounts cannot join it."
            ]
          },
          {
            "name": "AllianceAlreadyInitialized",
            "doc": [
              "The Alliance has been initialized, therefore cannot be initialized again."
            ]
          },
          {
            "name": "AlreadyMember",
            "doc": [
              "Account is already a member."
            ]
          },
          {
            "name": "NotMember",
            "doc": [
              "Account is not a member."
            ]
          },
          {
            "name": "NotAlly",
            "doc": [
              "Account is not an ally."
            ]
          },
          {
            "name": "NoVotingRights",
            "doc": [
              "Account does not have voting rights."
            ]
          },
          {
            "name": "AlreadyElevated",
            "doc": [
              "Account is already an elevated (fellow) member."
            ]
          },
          {
            "name": "AlreadyUnscrupulous",
            "doc": [
              "Item is already listed as unscrupulous."
            ]
          },
          {
            "name": "AccountNonGrata",
            "doc": [
              "Account has been deemed unscrupulous by the Alliance and is not welcome to join or be",
              "nominated."
            ]
          },
          {
            "name": "NotListedAsUnscrupulous",
            "doc": [
              "Item has not been deemed unscrupulous."
            ]
          },
          {
            "name": "TooManyUnscrupulousItems",
            "doc": [
              "The number of unscrupulous items exceeds `MaxUnscrupulousItems`."
            ]
          },
          {
            "name": "TooLongWebsiteUrl",
            "doc": [
              "Length of website URL exceeds `MaxWebsiteUrlLength`."
            ]
          },
          {
            "name": "InsufficientFunds",
            "doc": [
              "Balance is insufficient for the required deposit."
            ]
          },
          {
            "name": "WithoutIdentityDisplayAndWebsite",
            "doc": [
              "The account's identity does not have display field and website field."
            ]
          },
          {
            "name": "WithoutGoodIdentityJudgement",
            "doc": [
              "The account's identity has no good judgement."
            ]
          },
          {
            "name": "MissingProposalHash",
            "doc": [
              "The proposal hash is not found."
            ]
          },
          {
            "name": "MissingAnnouncement",
            "doc": [
              "The announcement is not found."
            ]
          },
          {
            "name": "TooManyMembers",
            "doc": [
              "Number of members exceeds `MaxMembersCount`."
            ]
          },
          {
            "name": "TooManyAnnouncements",
            "doc": [
              "Number of announcements exceeds `MaxAnnouncementsCount`."
            ]
          },
          {
            "name": "BadWitness",
            "doc": [
              "Invalid witness data given."
            ]
          },
          {
            "name": "AlreadyRetiring",
            "doc": [
              "Account already gave retirement notice"
            ]
          },
          {
            "name": "RetirementNoticeNotGiven",
            "doc": [
              "Account did not give a retirement notice required to retire."
            ]
          },
          {
            "name": "RetirementPeriodNotPassed",
            "doc": [
              "Retirement period has not passed."
            ]
          },
          {
            "name": "FellowsMissing",
            "doc": [
              "Fellows must be provided to initialize the Alliance."
            ]
          }
        ],
        "errors_value": {
          "type": 796
        },
        "index": 59
      },
      {
        "name": "NominationPools",
        "prefix": "NominationPools",
        "storage": [
          {
            "name": "MinJoinBond",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " Minimum amount to bond to join a pool."
            ]
          },
          {
            "name": "MinCreateBond",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U128",
              "PlainTypeValue": 6
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " Minimum bond required to create a pool.",
              "",
              " This is the amount that the depositor must put as their initial stake in the pool, as an",
              " indication of \"skin in the game\".",
              "",
              " This is the value that will always exist in the staking ledger of the pool bonded account",
              " while all other accounts leave."
            ]
          },
          {
            "name": "MaxPools",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of",
              " pools can exist."
            ]
          },
          {
            "name": "MaxPoolMembers",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Maximum number of members that can exist in the system. If `None`, then the count",
              " members are not bound on a system wide basis."
            ]
          },
          {
            "name": "MaxPoolMembersPerPool",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Maximum number of members that may belong to pool. If `None`, then the count of",
              " members is not bound on a per pool basis."
            ]
          },
          {
            "name": "GlobalMaxCommission",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 48
            },
            "fallback": "0x00",
            "docs": [
              " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
              " pool commissions that are \u003e `GlobalMaxCommission`, necessary if a future",
              " `GlobalMaxCommission` is lower than some current pool commissions."
            ]
          },
          {
            "name": "PoolMembers",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_nomination_pools:PoolMember",
                "keys_id": 0,
                "value_id": 797
              }
            },
            "fallback": "0x00",
            "docs": [
              " Active members.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "CounterForPoolMembers",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "BondedPools",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nomination_pools:BondedPoolInner",
                "keys_id": 4,
                "value_id": 800
              }
            },
            "fallback": "0x00",
            "docs": [
              " Storage for bonded pools."
            ]
          },
          {
            "name": "CounterForBondedPools",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "RewardPools",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nomination_pools:RewardPool",
                "keys_id": 4,
                "value_id": 805
              }
            },
            "fallback": "0x00",
            "docs": [
              " Reward pools. This is where there rewards for each pool accumulate. When a members payout is",
              " claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."
            ]
          },
          {
            "name": "CounterForRewardPools",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "SubPoolsStorage",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_nomination_pools:SubPools",
                "keys_id": 4,
                "value_id": 806
              }
            },
            "fallback": "0x00",
            "docs": [
              " Groups of unbonding pools. Each group of unbonding pools belongs to a",
              " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."
            ]
          },
          {
            "name": "CounterForSubPoolsStorage",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "Metadata",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 118
              }
            },
            "fallback": "0x00",
            "docs": [
              " Metadata for the pool."
            ]
          },
          {
            "name": "CounterForMetadata",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "LastPoolId",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Ever increasing number of all pools created so far."
            ]
          },
          {
            "name": "ReversePoolIdLookup",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 0,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " A reverse lookup from the pool's account id to its id.",
              "",
              " This is only used for slashing. In all other instances, the pool id is used, and the",
              " accounts are deterministically derived from it."
            ]
          },
          {
            "name": "CounterForReversePoolIdLookup",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "ClaimPermissions",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "pallet_nomination_pools:ClaimPermission",
                "keys_id": 0,
                "value_id": 392
              }
            },
            "fallback": "0x00",
            "docs": [
              " Map from a pool member account to their opted claim permission."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3c00",
            "name": "join",
            "docs": [
              "See [`Pallet::join`]."
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              }
            ]
          },
          {
            "lookup": "3c01",
            "name": "bond_extra",
            "docs": [
              "See [`Pallet::bond_extra`]."
            ],
            "args": [
              {
                "name": "extra",
                "type": "pallet_nomination_pools:BondExtra",
                "type_name": "BondExtra\u003cBalanceOf\u003e"
              }
            ]
          },
          {
            "lookup": "3c02",
            "name": "claim_payout",
            "docs": [
              "See [`Pallet::claim_payout`]."
            ],
            "args": null
          },
          {
            "lookup": "3c03",
            "name": "unbond",
            "docs": [
              "See [`Pallet::unbond`]."
            ],
            "args": [
              {
                "name": "member_account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "unbonding_points",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "3c04",
            "name": "pool_withdraw_unbonded",
            "docs": [
              "See [`Pallet::pool_withdraw_unbonded`]."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "num_slashing_spans",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3c05",
            "name": "withdraw_unbonded",
            "docs": [
              "See [`Pallet::withdraw_unbonded`]."
            ],
            "args": [
              {
                "name": "member_account",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "num_slashing_spans",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "3c06",
            "name": "create",
            "docs": [
              "See [`Pallet::create`]."
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "root",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "nominator",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "bouncer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3c07",
            "name": "create_with_pool_id",
            "docs": [
              "See [`Pallet::create_with_pool_id`]."
            ],
            "args": [
              {
                "name": "amount",
                "type": "compact\u003cU128\u003e",
                "type_name": "BalanceOf"
              },
              {
                "name": "root",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "nominator",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "bouncer",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              }
            ]
          },
          {
            "lookup": "3c08",
            "name": "nominate",
            "docs": [
              "See [`Pallet::nominate`]."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "validators",
                "type": "Vec\u003c[U8; 32]\u003e",
                "type_name": "Vec\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "3c09",
            "name": "set_state",
            "docs": [
              "See [`Pallet::set_state`]."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "state",
                "type": "pallet_nomination_pools:PoolState",
                "type_name": "PoolState"
              }
            ]
          },
          {
            "lookup": "3c0a",
            "name": "set_metadata",
            "docs": [
              "See [`Pallet::set_metadata`]."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "metadata",
                "type": "Vec\u003cU8\u003e",
                "type_name": "Bytes"
              }
            ]
          },
          {
            "lookup": "3c0b",
            "name": "set_configs",
            "docs": [
              "See [`Pallet::set_configs`]."
            ],
            "args": [
              {
                "name": "min_join_bond",
                "type": "pallet_nomination_pools:ConfigOp@388",
                "type_name": "ConfigOp\u003cBalanceOf\u003e"
              },
              {
                "name": "min_create_bond",
                "type": "pallet_nomination_pools:ConfigOp@388",
                "type_name": "ConfigOp\u003cBalanceOf\u003e"
              },
              {
                "name": "max_pools",
                "type": "pallet_nomination_pools:ConfigOp@389",
                "type_name": "ConfigOp\u003cu32\u003e"
              },
              {
                "name": "max_members",
                "type": "pallet_nomination_pools:ConfigOp@389",
                "type_name": "ConfigOp\u003cu32\u003e"
              },
              {
                "name": "max_members_per_pool",
                "type": "pallet_nomination_pools:ConfigOp@389",
                "type_name": "ConfigOp\u003cu32\u003e"
              },
              {
                "name": "global_max_commission",
                "type": "pallet_nomination_pools:ConfigOp@390",
                "type_name": "ConfigOp\u003cPerbill\u003e"
              }
            ]
          },
          {
            "lookup": "3c0c",
            "name": "update_roles",
            "docs": [
              "See [`Pallet::update_roles`]."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "new_root",
                "type": "pallet_nomination_pools:ConfigOp@391",
                "type_name": "ConfigOp\u003cAccountId\u003e"
              },
              {
                "name": "new_nominator",
                "type": "pallet_nomination_pools:ConfigOp@391",
                "type_name": "ConfigOp\u003cAccountId\u003e"
              },
              {
                "name": "new_bouncer",
                "type": "pallet_nomination_pools:ConfigOp@391",
                "type_name": "ConfigOp\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "3c0d",
            "name": "chill",
            "docs": [
              "See [`Pallet::chill`]."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              }
            ]
          },
          {
            "lookup": "3c0e",
            "name": "bond_extra_other",
            "docs": [
              "See [`Pallet::bond_extra_other`]."
            ],
            "args": [
              {
                "name": "member",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "extra",
                "type": "pallet_nomination_pools:BondExtra",
                "type_name": "BondExtra\u003cBalanceOf\u003e"
              }
            ]
          },
          {
            "lookup": "3c0f",
            "name": "set_claim_permission",
            "docs": [
              "See [`Pallet::set_claim_permission`]."
            ],
            "args": [
              {
                "name": "permission",
                "type": "pallet_nomination_pools:ClaimPermission",
                "type_name": "ClaimPermission"
              }
            ]
          },
          {
            "lookup": "3c10",
            "name": "claim_payout_other",
            "docs": [
              "See [`Pallet::claim_payout_other`]."
            ],
            "args": [
              {
                "name": "other",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "3c11",
            "name": "set_commission",
            "docs": [
              "See [`Pallet::set_commission`]."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "new_commission",
                "type": "option\u003cTuple:U32[U8; 32]\u003e",
                "type_name": "Option\u003c(Perbill, AccountId)\u003e"
              }
            ]
          },
          {
            "lookup": "3c12",
            "name": "set_commission_max",
            "docs": [
              "See [`Pallet::set_commission_max`]."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "max_commission",
                "type": "U32",
                "type_name": "Perbill"
              }
            ]
          },
          {
            "lookup": "3c13",
            "name": "set_commission_change_rate",
            "docs": [
              "See [`Pallet::set_commission_change_rate`]."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              },
              {
                "name": "change_rate",
                "type": "pallet_nomination_pools:CommissionChangeRate",
                "type_name": "CommissionChangeRate\u003cBlockNumberFor\u003e"
              }
            ]
          },
          {
            "lookup": "3c14",
            "name": "claim_commission",
            "docs": [
              "See [`Pallet::claim_commission`]."
            ],
            "args": [
              {
                "name": "pool_id",
                "type": "U32",
                "type_name": "PoolId"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 385
        },
        "events": [
          {
            "lookup": "3c00",
            "name": "Created",
            "docs": [
              "A pool has been created."
            ],
            "args": [
              "[U8; 32]",
              "U32"
            ],
            "args_name": [
              "depositor",
              "pool_id"
            ],
            "args_type_name": [
              "AccountId",
              "PoolId"
            ]
          },
          {
            "lookup": "3c01",
            "name": "Bonded",
            "docs": [
              "A member has became bonded in a pool."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "U128",
              "Bool"
            ],
            "args_name": [
              "member",
              "pool_id",
              "bonded",
              "joined"
            ],
            "args_type_name": [
              "AccountId",
              "PoolId",
              "BalanceOf",
              "bool"
            ]
          },
          {
            "lookup": "3c02",
            "name": "PaidOut",
            "docs": [
              "A payout has been made to a member."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "U128"
            ],
            "args_name": [
              "member",
              "pool_id",
              "payout"
            ],
            "args_type_name": [
              "AccountId",
              "PoolId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3c03",
            "name": "Unbonded",
            "docs": [
              "A member has unbonded from their pool.",
              "",
              "- `balance` is the corresponding balance of the number of points that has been",
              "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded",
              "  pool.",
              "- `points` is the number of points that are issued as a result of `balance` being",
              "dissolved into the corresponding unbonding pool.",
              "- `era` is the era in which the balance will be unbonded.",
              "In the absence of slashing, these values will match. In the presence of slashing, the",
              "number of points that are issued in the unbonding pool will be less than the amount",
              "requested to be unbonded."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "U128",
              "U128",
              "U32"
            ],
            "args_name": [
              "member",
              "pool_id",
              "balance",
              "points",
              "era"
            ],
            "args_type_name": [
              "AccountId",
              "PoolId",
              "BalanceOf",
              "BalanceOf",
              "EraIndex"
            ]
          },
          {
            "lookup": "3c04",
            "name": "Withdrawn",
            "docs": [
              "A member has withdrawn from their pool.",
              "",
              "The given number of `points` have been dissolved in return of `balance`.",
              "",
              "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
              "will be 1."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "U128",
              "U128"
            ],
            "args_name": [
              "member",
              "pool_id",
              "balance",
              "points"
            ],
            "args_type_name": [
              "AccountId",
              "PoolId",
              "BalanceOf",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3c05",
            "name": "Destroyed",
            "docs": [
              "A pool has been destroyed."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "pool_id"
            ],
            "args_type_name": [
              "PoolId"
            ]
          },
          {
            "lookup": "3c06",
            "name": "StateChanged",
            "docs": [
              "The state of a pool has changed"
            ],
            "args": [
              "U32",
              "pallet_nomination_pools:PoolState"
            ],
            "args_name": [
              "pool_id",
              "new_state"
            ],
            "args_type_name": [
              "PoolId",
              "PoolState"
            ]
          },
          {
            "lookup": "3c07",
            "name": "MemberRemoved",
            "docs": [
              "A member has been removed from a pool.",
              "",
              "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."
            ],
            "args": [
              "U32",
              "[U8; 32]"
            ],
            "args_name": [
              "pool_id",
              "member"
            ],
            "args_type_name": [
              "PoolId",
              "AccountId"
            ]
          },
          {
            "lookup": "3c08",
            "name": "RolesUpdated",
            "docs": [
              "The roles of a pool have been updated to the given new roles. Note that the depositor",
              "can never change."
            ],
            "args": [
              "option\u003c[U8; 32]\u003e",
              "option\u003c[U8; 32]\u003e",
              "option\u003c[U8; 32]\u003e"
            ],
            "args_name": [
              "root",
              "bouncer",
              "nominator"
            ],
            "args_type_name": [
              "Option\u003cAccountId\u003e",
              "Option\u003cAccountId\u003e",
              "Option\u003cAccountId\u003e"
            ]
          },
          {
            "lookup": "3c09",
            "name": "PoolSlashed",
            "docs": [
              "The active balance of pool `pool_id` has been slashed to `balance`."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "pool_id",
              "balance"
            ],
            "args_type_name": [
              "PoolId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3c0a",
            "name": "UnbondingPoolSlashed",
            "docs": [
              "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
            ],
            "args": [
              "U32",
              "U32",
              "U128"
            ],
            "args_name": [
              "pool_id",
              "era",
              "balance"
            ],
            "args_type_name": [
              "PoolId",
              "EraIndex",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3c0b",
            "name": "PoolCommissionUpdated",
            "docs": [
              "A pool's commission setting has been changed."
            ],
            "args": [
              "U32",
              "option\u003cTuple:U32[U8; 32]\u003e"
            ],
            "args_name": [
              "pool_id",
              "current"
            ],
            "args_type_name": [
              "PoolId",
              "Option\u003c(Perbill, AccountId)\u003e"
            ]
          },
          {
            "lookup": "3c0c",
            "name": "PoolMaxCommissionUpdated",
            "docs": [
              "A pool's maximum commission setting has been changed."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "pool_id",
              "max_commission"
            ],
            "args_type_name": [
              "PoolId",
              "Perbill"
            ]
          },
          {
            "lookup": "3c0d",
            "name": "PoolCommissionChangeRateUpdated",
            "docs": [
              "A pool's commission `change_rate` has been changed."
            ],
            "args": [
              "U32",
              "pallet_nomination_pools:CommissionChangeRate"
            ],
            "args_name": [
              "pool_id",
              "change_rate"
            ],
            "args_type_name": [
              "PoolId",
              "CommissionChangeRate\u003cBlockNumberFor\u003e"
            ]
          },
          {
            "lookup": "3c0e",
            "name": "PoolCommissionClaimed",
            "docs": [
              "Pool commission has been claimed."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "pool_id",
              "commission"
            ],
            "args_type_name": [
              "PoolId",
              "BalanceOf"
            ]
          }
        ],
        "events_value": {
          "type": 427
        },
        "constants": [
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 580,
            "constants_value": "70792f6e6f706c73",
            "docs": [
              " The nomination pool's pallet id."
            ]
          },
          {
            "name": "MaxPointsToBalance",
            "type": "U8",
            "type_value": 2,
            "constants_value": "0a",
            "docs": [
              " The maximum pool points-to-balance ratio that an `open` pool can have.",
              "",
              " This is important in the event slashing takes place and the pool's points-to-balance",
              " ratio becomes disproportional.",
              "",
              " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
              " are a function of number of points, and by setting this value to e.g. 10, you ensure",
              " that the total number of points in the system are at most 10 times the total_issuance of",
              " the chain, in the absolute worse case.",
              "",
              " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
              " Such a scenario would also be the equivalent of the pool being 90% slashed."
            ]
          }
        ],
        "errors": [
          {
            "name": "PoolNotFound",
            "doc": [
              "A (bonded) pool id does not exist."
            ]
          },
          {
            "name": "PoolMemberNotFound",
            "doc": [
              "An account is not a member."
            ]
          },
          {
            "name": "RewardPoolNotFound",
            "doc": [
              "A reward pool does not exist. In all cases this is a system logic error."
            ]
          },
          {
            "name": "SubPoolsNotFound",
            "doc": [
              "A sub pool does not exist."
            ]
          },
          {
            "name": "AccountBelongsToOtherPool",
            "doc": [
              "An account is already delegating in another pool. An account may only belong to one",
              "pool at a time."
            ]
          },
          {
            "name": "FullyUnbonding",
            "doc": [
              "The member is fully unbonded (and thus cannot access the bonded and reward pool",
              "anymore to, for example, collect rewards)."
            ]
          },
          {
            "name": "MaxUnbondingLimit",
            "doc": [
              "The member cannot unbond further chunks due to reaching the limit."
            ]
          },
          {
            "name": "CannotWithdrawAny",
            "doc": [
              "None of the funds can be withdrawn yet because the bonding duration has not passed."
            ]
          },
          {
            "name": "MinimumBondNotMet",
            "doc": [
              "The amount does not meet the minimum bond to either join or create a pool.",
              "",
              "The depositor can never unbond to a value less than",
              "`Pallet::depositor_min_bond`. The caller does not have nominating",
              "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."
            ]
          },
          {
            "name": "OverflowRisk",
            "doc": [
              "The transaction could not be executed due to overflow risk for the pool."
            ]
          },
          {
            "name": "NotDestroying",
            "doc": [
              "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for",
              "other members to be permissionlessly unbonded."
            ]
          },
          {
            "name": "NotNominator",
            "doc": [
              "The caller does not have nominating permissions for the pool."
            ]
          },
          {
            "name": "NotKickerOrDestroying",
            "doc": [
              "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
            ]
          },
          {
            "name": "NotOpen",
            "doc": [
              "The pool is not open to join"
            ]
          },
          {
            "name": "MaxPools",
            "doc": [
              "The system is maxed out on pools."
            ]
          },
          {
            "name": "MaxPoolMembers",
            "doc": [
              "Too many members in the pool or system."
            ]
          },
          {
            "name": "CanNotChangeState",
            "doc": [
              "The pools state cannot be changed."
            ]
          },
          {
            "name": "DoesNotHavePermission",
            "doc": [
              "The caller does not have adequate permissions."
            ]
          },
          {
            "name": "MetadataExceedsMaxLen",
            "doc": [
              "Metadata exceeds [`Config::MaxMetadataLen`]"
            ]
          },
          {
            "name": "Defensive",
            "doc": [
              "Some error occurred that should never happen. This should be reported to the",
              "maintainers."
            ],
            "fields": [
              {
                "type": "pallet_nomination_pools:pallet:DefensiveError",
                "type_name": "DefensiveError",
                "doc": null
              }
            ]
          },
          {
            "name": "PartialUnbondNotAllowedPermissionlessly",
            "doc": [
              "Partial unbonding now allowed permissionlessly."
            ]
          },
          {
            "name": "MaxCommissionRestricted",
            "doc": [
              "The pool's max commission cannot be set higher than the existing value."
            ]
          },
          {
            "name": "CommissionExceedsMaximum",
            "doc": [
              "The supplied commission exceeds the max allowed commission."
            ]
          },
          {
            "name": "CommissionExceedsGlobalMaximum",
            "doc": [
              "The supplied commission exceeds global maximum commission."
            ]
          },
          {
            "name": "CommissionChangeThrottled",
            "doc": [
              "Not enough blocks have surpassed since the last commission update."
            ]
          },
          {
            "name": "CommissionChangeRateNotAllowed",
            "doc": [
              "The submitted changes to commission change rate are not allowed."
            ]
          },
          {
            "name": "NoPendingCommission",
            "doc": [
              "There is no pending commission to claim."
            ]
          },
          {
            "name": "NoCommissionCurrentSet",
            "doc": [
              "No commission current has been set."
            ]
          },
          {
            "name": "PoolIdInUse",
            "doc": [
              "Pool id currently in use."
            ]
          },
          {
            "name": "InvalidPoolId",
            "doc": [
              "Pool id provided is not correct/usable."
            ]
          },
          {
            "name": "BondExtraRestricted",
            "doc": [
              "Bonding extra is restricted to the exact pending reward amount."
            ]
          }
        ],
        "errors_value": {
          "type": 812
        },
        "index": 60
      },
      {
        "name": "RankedPolls",
        "prefix": "RankedPolls",
        "storage": [
          {
            "name": "ReferendumCount",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " The next free referendum index, aka the number of referenda started so far."
            ]
          },
          {
            "name": "ReferendumInfoFor",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_referenda:types:ReferendumInfo@814",
                "keys_id": 4,
                "value_id": 814
              }
            },
            "fallback": "0x00",
            "docs": [
              " Information concerning any given referendum."
            ]
          },
          {
            "name": "TrackQueue",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16"
                ],
                "value": "Vec\u003cTuple:U32U32\u003e",
                "keys_id": 101,
                "value_id": 816
              }
            },
            "fallback": "0x00",
            "docs": [
              " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
              " conviction-weighted approvals.",
              "",
              " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
            ]
          },
          {
            "name": "DecidingCount",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16"
                ],
                "value": "U32",
                "keys_id": 101,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of referenda being decided currently."
            ]
          },
          {
            "name": "MetadataOf",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "H256",
                "keys_id": 4,
                "value_id": 12
              }
            },
            "fallback": "0x00",
            "docs": [
              " The metadata is a general information concerning the referendum.",
              " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
              " dump or IPFS hash of a JSON file.",
              "",
              " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
              " large preimages."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3d00",
            "name": "submit",
            "docs": [
              "See [`Pallet::submit`]."
            ],
            "args": [
              {
                "name": "proposal_origin",
                "type": "kitchensink_runtime:OriginCaller",
                "type_name": "Box\u003cPalletsOriginOf\u003e"
              },
              {
                "name": "proposal",
                "type": "frame_support:traits:preimages:Bounded",
                "type_name": "BoundedCallOf"
              },
              {
                "name": "enactment_moment",
                "type": "frame_support:traits:schedule:DispatchTime",
                "type_name": "DispatchTime\u003cBlockNumberFor\u003e"
              }
            ]
          },
          {
            "lookup": "3d01",
            "name": "place_decision_deposit",
            "docs": [
              "See [`Pallet::place_decision_deposit`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3d02",
            "name": "refund_decision_deposit",
            "docs": [
              "See [`Pallet::refund_decision_deposit`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3d03",
            "name": "cancel",
            "docs": [
              "See [`Pallet::cancel`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3d04",
            "name": "kill",
            "docs": [
              "See [`Pallet::kill`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3d05",
            "name": "nudge_referendum",
            "docs": [
              "See [`Pallet::nudge_referendum`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3d06",
            "name": "one_fewer_deciding",
            "docs": [
              "See [`Pallet::one_fewer_deciding`]."
            ],
            "args": [
              {
                "name": "track",
                "type": "U16",
                "type_name": "TrackIdOf"
              }
            ]
          },
          {
            "lookup": "3d07",
            "name": "refund_submission_deposit",
            "docs": [
              "See [`Pallet::refund_submission_deposit`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              }
            ]
          },
          {
            "lookup": "3d08",
            "name": "set_metadata",
            "docs": [
              "See [`Pallet::set_metadata`]."
            ],
            "args": [
              {
                "name": "index",
                "type": "U32",
                "type_name": "ReferendumIndex"
              },
              {
                "name": "maybe_hash",
                "type": "option\u003cH256\u003e",
                "type_name": "Option\u003cPreimageHash\u003e"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 396
        },
        "events": [
          {
            "lookup": "3d00",
            "name": "Submitted",
            "docs": [
              "A referendum has been submitted."
            ],
            "args": [
              "U32",
              "U16",
              "frame_support:traits:preimages:Bounded"
            ],
            "args_name": [
              "index",
              "track",
              "proposal"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "TrackIdOf",
              "BoundedCallOf"
            ]
          },
          {
            "lookup": "3d01",
            "name": "DecisionDepositPlaced",
            "docs": [
              "The decision deposit has been placed."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "index",
              "who",
              "amount"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3d02",
            "name": "DecisionDepositRefunded",
            "docs": [
              "The decision deposit has been refunded."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "index",
              "who",
              "amount"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3d03",
            "name": "DepositSlashed",
            "docs": [
              "A deposit has been slashaed."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3d04",
            "name": "DecisionStarted",
            "docs": [
              "A referendum has moved into the deciding phase."
            ],
            "args": [
              "U32",
              "U16",
              "frame_support:traits:preimages:Bounded",
              "pallet_ranked_collective:Tally"
            ],
            "args_name": [
              "index",
              "track",
              "proposal",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "TrackIdOf",
              "BoundedCallOf",
              "Tally"
            ]
          },
          {
            "lookup": "3d05",
            "name": "ConfirmStarted",
            "docs": null,
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3d06",
            "name": "ConfirmAborted",
            "docs": null,
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3d07",
            "name": "Confirmed",
            "docs": [
              "A referendum has ended its confirmation phase and is ready for approval."
            ],
            "args": [
              "U32",
              "pallet_ranked_collective:Tally"
            ],
            "args_name": [
              "index",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3d08",
            "name": "Approved",
            "docs": [
              "A referendum has been approved and its proposal has been scheduled."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "index"
            ],
            "args_type_name": [
              "ReferendumIndex"
            ]
          },
          {
            "lookup": "3d09",
            "name": "Rejected",
            "docs": [
              "A proposal has been rejected by referendum."
            ],
            "args": [
              "U32",
              "pallet_ranked_collective:Tally"
            ],
            "args_name": [
              "index",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3d0a",
            "name": "TimedOut",
            "docs": [
              "A referendum has been timed out without being decided."
            ],
            "args": [
              "U32",
              "pallet_ranked_collective:Tally"
            ],
            "args_name": [
              "index",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3d0b",
            "name": "Cancelled",
            "docs": [
              "A referendum has been cancelled."
            ],
            "args": [
              "U32",
              "pallet_ranked_collective:Tally"
            ],
            "args_name": [
              "index",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3d0c",
            "name": "Killed",
            "docs": [
              "A referendum has been killed."
            ],
            "args": [
              "U32",
              "pallet_ranked_collective:Tally"
            ],
            "args_name": [
              "index",
              "tally"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "Tally"
            ]
          },
          {
            "lookup": "3d0d",
            "name": "SubmissionDepositRefunded",
            "docs": [
              "The submission deposit has been refunded."
            ],
            "args": [
              "U32",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "index",
              "who",
              "amount"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "3d0e",
            "name": "MetadataSet",
            "docs": [
              "Metadata for a referendum has been set."
            ],
            "args": [
              "U32",
              "H256"
            ],
            "args_name": [
              "index",
              "hash"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "PreimageHash"
            ]
          },
          {
            "lookup": "3d0f",
            "name": "MetadataCleared",
            "docs": [
              "Metadata for a referendum has been cleared."
            ],
            "args": [
              "U32",
              "H256"
            ],
            "args_name": [
              "index",
              "hash"
            ],
            "args_type_name": [
              "ReferendumIndex",
              "PreimageHash"
            ]
          }
        ],
        "events_value": {
          "type": 428
        },
        "constants": [
          {
            "name": "SubmissionDeposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "0000c16ff28623000000000000000000",
            "docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "name": "MaxQueued",
            "type": "U32",
            "type_value": 4,
            "constants_value": "64000000",
            "docs": [
              " Maximum size of the referendum queue for a single track."
            ]
          },
          {
            "name": "UndecidingTimeout",
            "type": "U32",
            "type_value": 4,
            "constants_value": "004e0c00",
            "docs": [
              " The number of blocks after submission that a referendum must begin being decided by.",
              " Once this passes, then anyone may cancel the referendum."
            ]
          },
          {
            "name": "AlarmInterval",
            "type": "U32",
            "type_value": 4,
            "constants_value": "01000000",
            "docs": [
              " Quantization level for the referendum wakeup scheduler. A higher number will result in",
              " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
              " automatic referendum status changes. Explicit servicing instructions are unaffected."
            ]
          },
          {
            "name": "Tracks",
            "type": "Vec\u003cTuple:U16pallet_referenda:types:TrackInfo\u003e",
            "type_value": 766,
            "constants_value": "04000010726f6f74010000000a000000000000000000000000000000040000000400000002000000040000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b0000000000ca9a3b",
            "docs": [
              " Information concerning the different referendum tracks."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotOngoing",
            "doc": [
              "Referendum is not ongoing."
            ]
          },
          {
            "name": "HasDeposit",
            "doc": [
              "Referendum's decision deposit is already paid."
            ]
          },
          {
            "name": "BadTrack",
            "doc": [
              "The track identifier given was invalid."
            ]
          },
          {
            "name": "Full",
            "doc": [
              "There are already a full complement of referenda in progress for this track."
            ]
          },
          {
            "name": "QueueEmpty",
            "doc": [
              "The queue of the track is empty."
            ]
          },
          {
            "name": "BadReferendum",
            "doc": [
              "The referendum index provided is invalid in this context."
            ]
          },
          {
            "name": "NothingToDo",
            "doc": [
              "There was nothing to do in the advancement."
            ]
          },
          {
            "name": "NoTrack",
            "doc": [
              "No track exists for the proposal origin."
            ]
          },
          {
            "name": "Unfinished",
            "doc": [
              "Any deposit cannot be refunded until after the decision is over."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The deposit refunder is not the depositor."
            ]
          },
          {
            "name": "NoDeposit",
            "doc": [
              "The deposit cannot be refunded since none was made."
            ]
          },
          {
            "name": "BadStatus",
            "doc": [
              "The referendum status is invalid for this operation."
            ]
          },
          {
            "name": "PreimageNotExist",
            "doc": [
              "The preimage does not exist."
            ]
          }
        ],
        "errors_value": {
          "type": 817
        },
        "index": 61
      },
      {
        "name": "RankedCollective",
        "prefix": "RankedCollective",
        "storage": [
          {
            "name": "MemberCount",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16"
                ],
                "value": "U32",
                "keys_id": 101,
                "value_id": 4
              }
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of members in the collective who have at least the rank according to the index",
              " of the vec."
            ]
          },
          {
            "name": "Members",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U16",
                "keys_id": 0,
                "value_id": 818
              }
            },
            "fallback": "0x00",
            "docs": [
              " The current members of the collective."
            ]
          },
          {
            "name": "IdToIndex",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16",
                  "[U8; 32]"
                ],
                "value": "U32",
                "keys_id": 819,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " The index of each ranks's member into the group of members who have at least that rank."
            ]
          },
          {
            "name": "IndexToId",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16",
                  "U32"
                ],
                "value": "[U8; 32]",
                "keys_id": 820,
                "value_id": 0
              }
            },
            "fallback": "0x00",
            "docs": [
              " The members in the collective by index. All indices in the range `0..MemberCount` will",
              " return `Some`, however a member's index is not guaranteed to remain unchanged over time."
            ]
          },
          {
            "name": "Voting",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "[U8; 32]"
                ],
                "value": "pallet_ranked_collective:VoteRecord",
                "keys_id": 528,
                "value_id": 431
              }
            },
            "fallback": "0x00",
            "docs": [
              " Votes on a given proposal, if it is ongoing."
            ]
          },
          {
            "name": "VotingCleanup",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU8\u003e",
                "keys_id": 4,
                "value_id": 821
              }
            },
            "fallback": "0x00",
            "docs": null
          }
        ],
        "calls": [
          {
            "lookup": "3e00",
            "name": "add_member",
            "docs": [
              "See [`Pallet::add_member`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3e01",
            "name": "promote_member",
            "docs": [
              "See [`Pallet::promote_member`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3e02",
            "name": "demote_member",
            "docs": [
              "See [`Pallet::demote_member`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              }
            ]
          },
          {
            "lookup": "3e03",
            "name": "remove_member",
            "docs": [
              "See [`Pallet::remove_member`]."
            ],
            "args": [
              {
                "name": "who",
                "type": "sp_runtime:multiaddress:MultiAddress",
                "type_name": "AccountIdLookupOf"
              },
              {
                "name": "min_rank",
                "type": "U16",
                "type_name": "Rank"
              }
            ]
          },
          {
            "lookup": "3e04",
            "name": "vote",
            "docs": [
              "See [`Pallet::vote`]."
            ],
            "args": [
              {
                "name": "poll",
                "type": "U32",
                "type_name": "PollIndexOf"
              },
              {
                "name": "aye",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "3e05",
            "name": "cleanup_poll",
            "docs": [
              "See [`Pallet::cleanup_poll`]."
            ],
            "args": [
              {
                "name": "poll_index",
                "type": "U32",
                "type_name": "PollIndexOf"
              },
              {
                "name": "max",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 397
        },
        "events": [
          {
            "lookup": "3e00",
            "name": "MemberAdded",
            "docs": [
              "A member `who` has been added."
            ],
            "args": [
              "[U8; 32]"
            ],
            "args_name": [
              "who"
            ],
            "args_type_name": [
              "AccountId"
            ]
          },
          {
            "lookup": "3e01",
            "name": "RankChanged",
            "docs": [
              "The member `who`se rank has been changed to the given `rank`."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_name": [
              "who",
              "rank"
            ],
            "args_type_name": [
              "AccountId",
              "Rank"
            ]
          },
          {
            "lookup": "3e02",
            "name": "MemberRemoved",
            "docs": [
              "The member `who` of given `rank` has been removed from the collective."
            ],
            "args": [
              "[U8; 32]",
              "U16"
            ],
            "args_name": [
              "who",
              "rank"
            ],
            "args_type_name": [
              "AccountId",
              "Rank"
            ]
          },
          {
            "lookup": "3e03",
            "name": "Voted",
            "docs": [
              "The member `who` has voted for the `poll` with the given `vote` leading to an updated",
              "`tally`."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "pallet_ranked_collective:VoteRecord",
              "pallet_ranked_collective:Tally"
            ],
            "args_name": [
              "who",
              "poll",
              "vote",
              "tally"
            ],
            "args_type_name": [
              "AccountId",
              "PollIndexOf",
              "VoteRecord",
              "TallyOf"
            ]
          }
        ],
        "events_value": {
          "type": 430
        },
        "errors": [
          {
            "name": "AlreadyMember",
            "doc": [
              "Account is already a member."
            ]
          },
          {
            "name": "NotMember",
            "doc": [
              "Account is not a member."
            ]
          },
          {
            "name": "NotPolling",
            "doc": [
              "The given poll index is unknown or has closed."
            ]
          },
          {
            "name": "Ongoing",
            "doc": [
              "The given poll is still ongoing."
            ]
          },
          {
            "name": "NoneRemaining",
            "doc": [
              "There are no further records to be removed."
            ]
          },
          {
            "name": "Corruption",
            "doc": [
              "Unexpected error in state."
            ]
          },
          {
            "name": "RankTooLow",
            "doc": [
              "The member's rank is too low to vote."
            ]
          },
          {
            "name": "InvalidWitness",
            "doc": [
              "The information provided is incorrect."
            ]
          },
          {
            "name": "NoPermission",
            "doc": [
              "The origin is not sufficiently privileged to do the operation."
            ]
          }
        ],
        "errors_value": {
          "type": 822
        },
        "index": 62
      },
      {
        "name": "AssetConversion",
        "prefix": "AssetConversion",
        "storage": [
          {
            "name": "Pools",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "pallet_asset_conversion:types:NativeOrAssetId",
                  "pallet_asset_conversion:types:NativeOrAssetId"
                ],
                "value": "U32",
                "keys_id": 433,
                "value_id": 823
              }
            },
            "fallback": "0x00",
            "docs": [
              " Map from `PoolAssetId` to `PoolInfo`. This establishes whether a pool has been officially",
              " created rather than people sending tokens directly to a pool's public account."
            ]
          },
          {
            "name": "NextPoolAssetId",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Stores the `PoolAssetId` that is going to be used for the next lp token.",
              " This gets incremented whenever a new lp pool is created."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "3f00",
            "name": "create_pool",
            "docs": [
              "See [`Pallet::create_pool`]."
            ],
            "args": [
              {
                "name": "asset1",
                "type": "pallet_asset_conversion:types:NativeOrAssetId",
                "type_name": "MultiAssetId"
              },
              {
                "name": "asset2",
                "type": "pallet_asset_conversion:types:NativeOrAssetId",
                "type_name": "MultiAssetId"
              }
            ]
          },
          {
            "lookup": "3f01",
            "name": "add_liquidity",
            "docs": [
              "See [`Pallet::add_liquidity`]."
            ],
            "args": [
              {
                "name": "asset1",
                "type": "pallet_asset_conversion:types:NativeOrAssetId",
                "type_name": "MultiAssetId"
              },
              {
                "name": "asset2",
                "type": "pallet_asset_conversion:types:NativeOrAssetId",
                "type_name": "MultiAssetId"
              },
              {
                "name": "amount1_desired",
                "type": "U128",
                "type_name": "AssetBalance"
              },
              {
                "name": "amount2_desired",
                "type": "U128",
                "type_name": "AssetBalance"
              },
              {
                "name": "amount1_min",
                "type": "U128",
                "type_name": "AssetBalance"
              },
              {
                "name": "amount2_min",
                "type": "U128",
                "type_name": "AssetBalance"
              },
              {
                "name": "mint_to",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "3f02",
            "name": "remove_liquidity",
            "docs": [
              "See [`Pallet::remove_liquidity`]."
            ],
            "args": [
              {
                "name": "asset1",
                "type": "pallet_asset_conversion:types:NativeOrAssetId",
                "type_name": "MultiAssetId"
              },
              {
                "name": "asset2",
                "type": "pallet_asset_conversion:types:NativeOrAssetId",
                "type_name": "MultiAssetId"
              },
              {
                "name": "lp_token_burn",
                "type": "U128",
                "type_name": "AssetBalance"
              },
              {
                "name": "amount1_min_receive",
                "type": "U128",
                "type_name": "AssetBalance"
              },
              {
                "name": "amount2_min_receive",
                "type": "U128",
                "type_name": "AssetBalance"
              },
              {
                "name": "withdraw_to",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "3f03",
            "name": "swap_exact_tokens_for_tokens",
            "docs": [
              "See [`Pallet::swap_exact_tokens_for_tokens`]."
            ],
            "args": [
              {
                "name": "path",
                "type": "Vec\u003cpallet_asset_conversion:types:NativeOrAssetId\u003e",
                "type_name": "BoundedVec\u003cMultiAssetId, MaxSwapPathLength\u003e"
              },
              {
                "name": "amount_in",
                "type": "U128",
                "type_name": "AssetBalance"
              },
              {
                "name": "amount_out_min",
                "type": "U128",
                "type_name": "AssetBalance"
              },
              {
                "name": "send_to",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "keep_alive",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          },
          {
            "lookup": "3f04",
            "name": "swap_tokens_for_exact_tokens",
            "docs": [
              "See [`Pallet::swap_tokens_for_exact_tokens`]."
            ],
            "args": [
              {
                "name": "path",
                "type": "Vec\u003cpallet_asset_conversion:types:NativeOrAssetId\u003e",
                "type_name": "BoundedVec\u003cMultiAssetId, MaxSwapPathLength\u003e"
              },
              {
                "name": "amount_out",
                "type": "U128",
                "type_name": "AssetBalance"
              },
              {
                "name": "amount_in_max",
                "type": "U128",
                "type_name": "AssetBalance"
              },
              {
                "name": "send_to",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "keep_alive",
                "type": "Bool",
                "type_name": "bool"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 398
        },
        "events": [
          {
            "lookup": "3f00",
            "name": "PoolCreated",
            "docs": [
              "A successful call of the `CretaPool` extrinsic will create this event."
            ],
            "args": [
              "[U8; 32]",
              "Tuple:pallet_asset_conversion:types:NativeOrAssetIdpallet_asset_conversion:types:NativeOrAssetId",
              "[U8; 32]",
              "U32"
            ],
            "args_name": [
              "creator",
              "pool_id",
              "pool_account",
              "lp_token"
            ],
            "args_type_name": [
              "AccountId",
              "PoolIdOf",
              "AccountId",
              "PoolAssetId"
            ]
          },
          {
            "lookup": "3f01",
            "name": "LiquidityAdded",
            "docs": [
              "A successful call of the `AddLiquidity` extrinsic will create this event."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "Tuple:pallet_asset_conversion:types:NativeOrAssetIdpallet_asset_conversion:types:NativeOrAssetId",
              "U128",
              "U128",
              "U32",
              "U128"
            ],
            "args_name": [
              "who",
              "mint_to",
              "pool_id",
              "amount1_provided",
              "amount2_provided",
              "lp_token",
              "lp_token_minted"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "PoolIdOf",
              "AssetBalance",
              "AssetBalance",
              "PoolAssetId",
              "AssetBalance"
            ]
          },
          {
            "lookup": "3f02",
            "name": "LiquidityRemoved",
            "docs": [
              "A successful call of the `RemoveLiquidity` extrinsic will create this event."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "Tuple:pallet_asset_conversion:types:NativeOrAssetIdpallet_asset_conversion:types:NativeOrAssetId",
              "U128",
              "U128",
              "U32",
              "U128",
              "U32"
            ],
            "args_name": [
              "who",
              "withdraw_to",
              "pool_id",
              "amount1",
              "amount2",
              "lp_token",
              "lp_token_burned",
              "withdrawal_fee"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "PoolIdOf",
              "AssetBalance",
              "AssetBalance",
              "PoolAssetId",
              "AssetBalance",
              "Permill"
            ]
          },
          {
            "lookup": "3f03",
            "name": "SwapExecuted",
            "docs": [
              "Assets have been converted from one to another. Both `SwapExactTokenForToken`",
              "and `SwapTokenForExactToken` will generate this event."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "Vec\u003cpallet_asset_conversion:types:NativeOrAssetId\u003e",
              "U128",
              "U128"
            ],
            "args_name": [
              "who",
              "send_to",
              "path",
              "amount_in",
              "amount_out"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "BoundedVec\u003cMultiAssetId, MaxSwapPathLength\u003e",
              "AssetBalance",
              "AssetBalance"
            ]
          },
          {
            "lookup": "3f04",
            "name": "Transfer",
            "docs": [
              "An amount has been transferred from one account to another."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "pallet_asset_conversion:types:NativeOrAssetId",
              "U128"
            ],
            "args_name": [
              "from",
              "to",
              "asset",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "AccountId",
              "MultiAssetId",
              "AssetBalance"
            ]
          }
        ],
        "events_value": {
          "type": 432
        },
        "constants": [
          {
            "name": "LPFee",
            "type": "U32",
            "type_value": 4,
            "constants_value": "03000000",
            "docs": [
              " A % the liquidity providers will take of every swap. Represents 10ths of a percent."
            ]
          },
          {
            "name": "PoolSetupFee",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " A one-time fee to setup the pool."
            ]
          },
          {
            "name": "LiquidityWithdrawalFee",
            "type": "U32",
            "type_value": 434,
            "constants_value": "00000000",
            "docs": [
              " A fee to withdraw the liquidity."
            ]
          },
          {
            "name": "MintMinLiquidity",
            "type": "U128",
            "type_value": 6,
            "constants_value": "64000000000000000000000000000000",
            "docs": [
              " The minimum LP token amount that could be minted. Ameliorates rounding errors."
            ]
          },
          {
            "name": "MaxSwapPathLength",
            "type": "U32",
            "type_value": 4,
            "constants_value": "04000000",
            "docs": [
              " The max number of hops in a swap."
            ]
          },
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 580,
            "constants_value": "70792f6173636f6e",
            "docs": [
              " The pallet's id, used for deriving its sovereign account ID."
            ]
          },
          {
            "name": "AllowMultiAssetPools",
            "type": "Bool",
            "type_value": 43,
            "constants_value": "01",
            "docs": [
              " A setting to allow creating pools with both non-native assets."
            ]
          }
        ],
        "errors": [
          {
            "name": "EqualAssets",
            "doc": [
              "Provided assets are equal."
            ]
          },
          {
            "name": "UnsupportedAsset",
            "doc": [
              "Provided asset is not supported for pool."
            ]
          },
          {
            "name": "PoolExists",
            "doc": [
              "Pool already exists."
            ]
          },
          {
            "name": "WrongDesiredAmount",
            "doc": [
              "Desired amount can't be zero."
            ]
          },
          {
            "name": "AmountOneLessThanMinimal",
            "doc": [
              "Provided amount should be greater than or equal to the existential deposit/asset's",
              "minimal amount."
            ]
          },
          {
            "name": "AmountTwoLessThanMinimal",
            "doc": [
              "Provided amount should be greater than or equal to the existential deposit/asset's",
              "minimal amount."
            ]
          },
          {
            "name": "ReserveLeftLessThanMinimal",
            "doc": [
              "Reserve needs to always be greater than or equal to the existential deposit/asset's",
              "minimal amount."
            ]
          },
          {
            "name": "AmountOutTooHigh",
            "doc": [
              "Desired amount can't be equal to the pool reserve."
            ]
          },
          {
            "name": "PoolNotFound",
            "doc": [
              "The pool doesn't exist."
            ]
          },
          {
            "name": "Overflow",
            "doc": [
              "An overflow happened."
            ]
          },
          {
            "name": "AssetOneDepositDidNotMeetMinimum",
            "doc": [
              "The minimal amount requirement for the first token in the pair wasn't met."
            ]
          },
          {
            "name": "AssetTwoDepositDidNotMeetMinimum",
            "doc": [
              "The minimal amount requirement for the second token in the pair wasn't met."
            ]
          },
          {
            "name": "AssetOneWithdrawalDidNotMeetMinimum",
            "doc": [
              "The minimal amount requirement for the first token in the pair wasn't met."
            ]
          },
          {
            "name": "AssetTwoWithdrawalDidNotMeetMinimum",
            "doc": [
              "The minimal amount requirement for the second token in the pair wasn't met."
            ]
          },
          {
            "name": "OptimalAmountLessThanDesired",
            "doc": [
              "Optimal calculated amount is less than desired."
            ]
          },
          {
            "name": "InsufficientLiquidityMinted",
            "doc": [
              "Insufficient liquidity minted."
            ]
          },
          {
            "name": "ZeroLiquidity",
            "doc": [
              "Requested liquidity can't be zero."
            ]
          },
          {
            "name": "ZeroAmount",
            "doc": [
              "Amount can't be zero."
            ]
          },
          {
            "name": "InsufficientLiquidity",
            "doc": [
              "Insufficient liquidity in the pool."
            ]
          },
          {
            "name": "ProvidedMinimumNotSufficientForSwap",
            "doc": [
              "Calculated amount out is less than provided minimum amount."
            ]
          },
          {
            "name": "ProvidedMaximumNotSufficientForSwap",
            "doc": [
              "Provided maximum amount is not sufficient for swap."
            ]
          },
          {
            "name": "PoolMustContainNativeCurrency",
            "doc": [
              "Only pools with native on one side are valid."
            ]
          },
          {
            "name": "InvalidPath",
            "doc": [
              "The provided path must consists of 2 assets at least."
            ]
          },
          {
            "name": "PathError",
            "doc": [
              "It was not possible to calculate path data."
            ]
          },
          {
            "name": "NonUniquePath",
            "doc": [
              "The provided path must consists of unique assets."
            ]
          },
          {
            "name": "IncorrectPoolAssetId",
            "doc": [
              "It was not possible to get or increment the Id of the pool."
            ]
          },
          {
            "name": "CorrespondenceError",
            "doc": [
              "Unable to find an element in an array/vec that should have one-to-one correspondence",
              "with another. For example, an array of assets constituting a `path` should have a",
              "corresponding array of `amounts` along the path."
            ]
          }
        ],
        "errors_value": {
          "type": 824
        },
        "index": 63
      },
      {
        "name": "FastUnstake",
        "prefix": "FastUnstake",
        "storage": [
          {
            "name": "Head",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_fast_unstake:types:UnstakeRequest",
              "PlainTypeValue": 825
            },
            "fallback": "0x00",
            "docs": [
              " The current \"head of the queue\" being unstaked.",
              "",
              " The head in itself can be a batch of up to [`Config::BatchSize`] stakers."
            ]
          },
          {
            "name": "Queue",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]"
                ],
                "value": "U128",
                "keys_id": 0,
                "value_id": 6
              }
            },
            "fallback": "0x00",
            "docs": [
              " The map of all accounts wishing to be unstaked.",
              "",
              " Keeps track of `AccountId` wishing to unstake and it's corresponding deposit."
            ]
          },
          {
            "name": "CounterForQueue",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "ErasToCheckPerBlock",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00000000",
            "docs": [
              " Number of eras to check per block.",
              "",
              " If set to 0, this pallet does absolutely nothing. Cannot be set to more than",
              " [`Config::MaxErasToCheckPerBlock`].",
              "",
              " Based on the amount of weight available at [`Pallet::on_idle`], up to this many eras are",
              " checked. The checking is represented by updating [`UnstakeRequest::checked`], which is",
              " stored in [`Head`]."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "4000",
            "name": "register_fast_unstake",
            "docs": [
              "See [`Pallet::register_fast_unstake`]."
            ],
            "args": null
          },
          {
            "lookup": "4001",
            "name": "deregister",
            "docs": [
              "See [`Pallet::deregister`]."
            ],
            "args": null
          },
          {
            "lookup": "4002",
            "name": "control",
            "docs": [
              "See [`Pallet::control`]."
            ],
            "args": [
              {
                "name": "eras_to_check",
                "type": "U32",
                "type_name": "EraIndex"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 402
        },
        "events": [
          {
            "lookup": "4000",
            "name": "Unstaked",
            "docs": [
              "A staker was unstaked."
            ],
            "args": [
              "[U8; 32]",
              "Result\u003cNULL,sp_runtime:DispatchError\u003e"
            ],
            "args_name": [
              "stash",
              "result"
            ],
            "args_type_name": [
              "AccountId",
              "DispatchResult"
            ]
          },
          {
            "lookup": "4001",
            "name": "Slashed",
            "docs": [
              "A staker was slashed for requesting fast-unstake whilst being exposed."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "stash",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "4002",
            "name": "BatchChecked",
            "docs": [
              "A batch was partially checked for the given eras, but the process did not finish."
            ],
            "args": [
              "Vec\u003cU32\u003e"
            ],
            "args_name": [
              "eras"
            ],
            "args_type_name": [
              "Vec\u003cEraIndex\u003e"
            ]
          },
          {
            "lookup": "4003",
            "name": "BatchFinished",
            "docs": [
              "A batch of a given size was terminated.",
              "",
              "This is always follows by a number of `Unstaked` or `Slashed` events, marking the end",
              "of the batch. A new batch will be created upon next block."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "size"
            ],
            "args_type_name": [
              "u32"
            ]
          },
          {
            "lookup": "4004",
            "name": "InternalError",
            "docs": [
              "An internal error happened. Operations will be paused now."
            ],
            "args": null
          }
        ],
        "events_value": {
          "type": 435
        },
        "constants": [
          {
            "name": "Deposit",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " Deposit to take for unstaking, to make sure we're able to slash the it in order to cover",
              " the costs of resources on unsuccessful unstake."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotController",
            "doc": [
              "The provided Controller account was not found.",
              "",
              "This means that the given account is not bonded."
            ]
          },
          {
            "name": "AlreadyQueued",
            "doc": [
              "The bonded account has already been queued."
            ]
          },
          {
            "name": "NotFullyBonded",
            "doc": [
              "The bonded account has active unlocking chunks."
            ]
          },
          {
            "name": "NotQueued",
            "doc": [
              "The provided un-staker is not in the `Queue`."
            ]
          },
          {
            "name": "AlreadyHead",
            "doc": [
              "The provided un-staker is already in Head, and cannot deregister."
            ]
          },
          {
            "name": "CallNotAllowed",
            "doc": [
              "The call is not allowed at this point because the pallet is not active."
            ]
          }
        ],
        "errors_value": {
          "type": 828
        },
        "index": 64
      },
      {
        "name": "MessageQueue",
        "prefix": "MessageQueue",
        "storage": [
          {
            "name": "BookStateFor",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_message_queue:BookState",
                "keys_id": 4,
                "value_id": 829
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " The index of the first and last (non-empty) pages."
            ]
          },
          {
            "name": "ServiceHead",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " The origin at which we should begin servicing."
            ]
          },
          {
            "name": "Pages",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "pallet_message_queue:Page",
                "keys_id": 94,
                "value_id": 832
              }
            },
            "fallback": "0x00",
            "docs": [
              " The map of page indices to pages."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "4100",
            "name": "reap_page",
            "docs": [
              "See [`Pallet::reap_page`]."
            ],
            "args": [
              {
                "name": "message_origin",
                "type": "U32",
                "type_name": "MessageOriginOf"
              },
              {
                "name": "page_index",
                "type": "U32",
                "type_name": "PageIndex"
              }
            ]
          },
          {
            "lookup": "4101",
            "name": "execute_overweight",
            "docs": [
              "See [`Pallet::execute_overweight`]."
            ],
            "args": [
              {
                "name": "message_origin",
                "type": "U32",
                "type_name": "MessageOriginOf"
              },
              {
                "name": "page",
                "type": "U32",
                "type_name": "PageIndex"
              },
              {
                "name": "index",
                "type": "U32",
                "type_name": "Size"
              },
              {
                "name": "weight_limit",
                "type": "sp_weights:weight_v2:Weight",
                "type_name": "Weight"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 403
        },
        "events": [
          {
            "lookup": "4100",
            "name": "ProcessingFailed",
            "docs": [
              "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "frame_support:traits:messages:ProcessMessageError"
            ],
            "args_name": [
              "id",
              "origin",
              "error"
            ],
            "args_type_name": [
              "[u8; 32]",
              "MessageOriginOf",
              "ProcessMessageError"
            ]
          },
          {
            "lookup": "4101",
            "name": "Processed",
            "docs": [
              "Message is processed."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "sp_weights:weight_v2:Weight",
              "Bool"
            ],
            "args_name": [
              "id",
              "origin",
              "weight_used",
              "success"
            ],
            "args_type_name": [
              "[u8; 32]",
              "MessageOriginOf",
              "Weight",
              "bool"
            ]
          },
          {
            "lookup": "4102",
            "name": "OverweightEnqueued",
            "docs": [
              "Message placed in overweight queue."
            ],
            "args": [
              "[U8; 32]",
              "U32",
              "U32",
              "U32"
            ],
            "args_name": [
              "id",
              "origin",
              "page_index",
              "message_index"
            ],
            "args_type_name": [
              "[u8; 32]",
              "MessageOriginOf",
              "PageIndex",
              "Size"
            ]
          },
          {
            "lookup": "4103",
            "name": "PageReaped",
            "docs": [
              "This page was reaped."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "origin",
              "index"
            ],
            "args_type_name": [
              "MessageOriginOf",
              "PageIndex"
            ]
          }
        ],
        "events_value": {
          "type": 436
        },
        "constants": [
          {
            "name": "HeapSize",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00000100",
            "docs": [
              " The size of the page; this implies the maximum message size which can be sent.",
              "",
              " A good value depends on the expected message sizes, their weights, the weight that is",
              " available for processing them and the maximal needed message size. The maximal message",
              " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
            ]
          },
          {
            "name": "MaxStale",
            "type": "U32",
            "type_value": 4,
            "constants_value": "80000000",
            "docs": [
              " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
              " can happen. Once there are more stale pages than this, then historical pages may be",
              " dropped, even if they contain unprocessed overweight messages."
            ]
          },
          {
            "name": "ServiceWeight",
            "type": "option\u003csp_weights:weight_v2:Weight\u003e",
            "type_value": 423,
            "constants_value": "010700a0db215d133333333333333333",
            "docs": [
              " The amount of weight (if any) which should be provided to the message queue for",
              " servicing enqueued items.",
              "",
              " This may be legitimately `None` in the case that you will call",
              " `ServiceQueues::service_queues` manually."
            ]
          }
        ],
        "errors": [
          {
            "name": "NotReapable",
            "doc": [
              "Page is not reapable because it has items remaining to be processed and is not old",
              "enough."
            ]
          },
          {
            "name": "NoPage",
            "doc": [
              "Page to be reaped does not exist."
            ]
          },
          {
            "name": "NoMessage",
            "doc": [
              "The referenced message could not be found."
            ]
          },
          {
            "name": "AlreadyProcessed",
            "doc": [
              "The message was already processed and cannot be processed again."
            ]
          },
          {
            "name": "Queued",
            "doc": [
              "The message is queued for future execution."
            ]
          },
          {
            "name": "InsufficientWeight",
            "doc": [
              "There is temporarily not enough weight to continue servicing messages."
            ]
          },
          {
            "name": "TemporarilyUnprocessable",
            "doc": [
              "This message is temporarily unprocessable.",
              "",
              "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
              "retrying."
            ]
          },
          {
            "name": "QueuePaused",
            "doc": [
              "The queue is paused and no message can be executed from it.",
              "",
              "This can change at any time and may resolve in the future by re-trying."
            ]
          }
        ],
        "errors_value": {
          "type": 834
        },
        "index": 65
      },
      {
        "name": "Pov",
        "prefix": "Pov",
        "storage": [
          {
            "name": "Value",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "Value2",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "UnboundedValue",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU8\u003e",
              "PlainTypeValue": 13
            },
            "fallback": "0x00",
            "docs": [
              " A value without a MEL bound."
            ]
          },
          {
            "name": "BoundedValue",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU8\u003e",
              "PlainTypeValue": 115
            },
            "fallback": "0x00",
            "docs": [
              " A value with a MEL bound of 32 byte."
            ]
          },
          {
            "name": "LargeValue",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU8\u003e",
              "PlainTypeValue": 662
            },
            "fallback": "0x00",
            "docs": [
              " 4MiB value."
            ]
          },
          {
            "name": "LargeValue2",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cU8\u003e",
              "PlainTypeValue": 662
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "Map1M",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_256"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " A map with a maximum of 1M entries."
            ]
          },
          {
            "name": "Map16M",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_256"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "U32",
                "keys_id": 4,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": [
              " A map with a maximum of 16M entries."
            ]
          },
          {
            "name": "DoubleMap1M",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_256",
                  "Blake2_256"
                ],
                "key_vec": [
                  "U32",
                  "U32"
                ],
                "value": "U32",
                "keys_id": 94,
                "value_id": 4
              }
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "UnboundedMap",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_256"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU32\u003e",
                "keys_id": 4,
                "value_id": 114
              }
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "UnboundedMap2",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_256"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU32\u003e",
                "keys_id": 4,
                "value_id": 114
              }
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "UnboundedMapTwox",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "Vec\u003cU32\u003e",
                "keys_id": 4,
                "value_id": 114
              }
            },
            "fallback": "0x00",
            "docs": null
          }
        ],
        "calls": [
          {
            "lookup": "4200",
            "name": "emit_event",
            "docs": [
              "See [`Pallet::emit_event`]."
            ],
            "args": null
          },
          {
            "lookup": "4201",
            "name": "noop",
            "docs": [
              "See [`Pallet::noop`]."
            ],
            "args": null
          }
        ],
        "calls_value": {
          "type": 404
        },
        "events": [
          {
            "lookup": "4200",
            "name": "TestEvent",
            "docs": null,
            "args": null
          }
        ],
        "events_value": {
          "type": 438
        },
        "errors": null,
        "errors_value": null,
        "index": 66
      },
      {
        "name": "TxPause",
        "prefix": "TxPause",
        "storage": [
          {
            "name": "PausedCalls",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "Vec\u003cU8\u003e",
                  "Vec\u003cU8\u003e"
                ],
                "value": "NULL",
                "keys_id": 406,
                "value_id": 32
              }
            },
            "fallback": "0x00",
            "docs": [
              " The set of calls that are explicitly paused."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "4300",
            "name": "pause",
            "docs": [
              "See [`Pallet::pause`]."
            ],
            "args": [
              {
                "name": "full_name",
                "type": "Tuple:Vec\u003cU8\u003eVec\u003cU8\u003e",
                "type_name": "RuntimeCallNameOf"
              }
            ]
          },
          {
            "lookup": "4301",
            "name": "unpause",
            "docs": [
              "See [`Pallet::unpause`]."
            ],
            "args": [
              {
                "name": "ident",
                "type": "Tuple:Vec\u003cU8\u003eVec\u003cU8\u003e",
                "type_name": "RuntimeCallNameOf"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 405
        },
        "events": [
          {
            "lookup": "4300",
            "name": "CallPaused",
            "docs": [
              "This pallet, or a specific call is now paused."
            ],
            "args": [
              "Tuple:Vec\u003cU8\u003eVec\u003cU8\u003e"
            ],
            "args_name": [
              "full_name"
            ],
            "args_type_name": [
              "RuntimeCallNameOf"
            ]
          },
          {
            "lookup": "4301",
            "name": "CallUnpaused",
            "docs": [
              "This pallet, or a specific call is now unpaused."
            ],
            "args": [
              "Tuple:Vec\u003cU8\u003eVec\u003cU8\u003e"
            ],
            "args_name": [
              "full_name"
            ],
            "args_type_name": [
              "RuntimeCallNameOf"
            ]
          }
        ],
        "events_value": {
          "type": 439
        },
        "constants": [
          {
            "name": "MaxNameLen",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00010000",
            "docs": [
              " Maximum length for pallet name and call name SCALE encoded string names.",
              "",
              " TOO LONG NAMES WILL BE TREATED AS PAUSED."
            ]
          }
        ],
        "errors": [
          {
            "name": "IsPaused",
            "doc": [
              "The call is paused."
            ]
          },
          {
            "name": "IsUnpaused",
            "doc": [
              "The call is unpaused."
            ]
          },
          {
            "name": "Unpausable",
            "doc": [
              "The call is whitelisted and cannot be paused."
            ]
          },
          {
            "name": "NotFound",
            "doc": null
          }
        ],
        "errors_value": {
          "type": 835
        },
        "index": 67
      },
      {
        "name": "SafeMode",
        "prefix": "SafeMode",
        "storage": [
          {
            "name": "EnteredUntil",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "U32",
              "PlainTypeValue": 4
            },
            "fallback": "0x00",
            "docs": [
              " Contains the last block number that the safe-mode will remain entered in.",
              "",
              "  Set to `None` when safe-mode is exited.",
              "",
              " Safe-mode is automatically exited when the current block number exceeds this value."
            ]
          },
          {
            "name": "Deposits",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat",
                  "Twox64Concat"
                ],
                "key_vec": [
                  "[U8; 32]",
                  "U32"
                ],
                "value": "U128",
                "keys_id": 532,
                "value_id": 6
              }
            },
            "fallback": "0x00",
            "docs": [
              " Holds the reserve that was taken from an account at a specific block number.",
              "",
              " This helps governance to have an overview of outstanding deposits that should be returned or",
              " slashed."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "4400",
            "name": "enter",
            "docs": [
              "See [`Pallet::enter`]."
            ],
            "args": null
          },
          {
            "lookup": "4401",
            "name": "force_enter",
            "docs": [
              "See [`Pallet::force_enter`]."
            ],
            "args": null
          },
          {
            "lookup": "4402",
            "name": "extend",
            "docs": [
              "See [`Pallet::extend`]."
            ],
            "args": null
          },
          {
            "lookup": "4403",
            "name": "force_extend",
            "docs": [
              "See [`Pallet::force_extend`]."
            ],
            "args": null
          },
          {
            "lookup": "4404",
            "name": "force_exit",
            "docs": [
              "See [`Pallet::force_exit`]."
            ],
            "args": null
          },
          {
            "lookup": "4405",
            "name": "force_slash_deposit",
            "docs": [
              "See [`Pallet::force_slash_deposit`]."
            ],
            "args": [
              {
                "name": "account",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "block",
                "type": "U32",
                "type_name": "BlockNumberFor"
              }
            ]
          },
          {
            "lookup": "4406",
            "name": "release_deposit",
            "docs": [
              "See [`Pallet::release_deposit`]."
            ],
            "args": [
              {
                "name": "account",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "block",
                "type": "U32",
                "type_name": "BlockNumberFor"
              }
            ]
          },
          {
            "lookup": "4407",
            "name": "force_release_deposit",
            "docs": [
              "See [`Pallet::force_release_deposit`]."
            ],
            "args": [
              {
                "name": "account",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "block",
                "type": "U32",
                "type_name": "BlockNumberFor"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 407
        },
        "events": [
          {
            "lookup": "4400",
            "name": "Entered",
            "docs": [
              "The safe-mode was entered until inclusively this block."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "until"
            ],
            "args_type_name": [
              "BlockNumberFor"
            ]
          },
          {
            "lookup": "4401",
            "name": "Extended",
            "docs": [
              "The safe-mode was extended until inclusively this block."
            ],
            "args": [
              "U32"
            ],
            "args_name": [
              "until"
            ],
            "args_type_name": [
              "BlockNumberFor"
            ]
          },
          {
            "lookup": "4402",
            "name": "Exited",
            "docs": [
              "Exited the safe-mode for a specific reason."
            ],
            "args": [
              "pallet_safe_mode:pallet:ExitReason"
            ],
            "args_name": [
              "reason"
            ],
            "args_type_name": [
              "ExitReason"
            ]
          },
          {
            "lookup": "4403",
            "name": "DepositPlaced",
            "docs": [
              "An account reserved funds for either entering or extending the safe-mode."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "account",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "4404",
            "name": "DepositReleased",
            "docs": [
              "An account had a reserve released that was reserved."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "account",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "4405",
            "name": "DepositSlashed",
            "docs": [
              "An account had reserve slashed that was reserved."
            ],
            "args": [
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "account",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf"
            ]
          },
          {
            "lookup": "4406",
            "name": "CannotDeposit",
            "docs": [
              "Could not hold funds for entering or extending the safe-mode.",
              "",
              "This error comes from the underlying `Currency`."
            ],
            "args": null
          },
          {
            "lookup": "4407",
            "name": "CannotRelease",
            "docs": [
              "Could not release funds for entering or extending the safe-mode.",
              "",
              "This error comes from the underlying `Currency`."
            ],
            "args": null
          }
        ],
        "events_value": {
          "type": 440
        },
        "constants": [
          {
            "name": "EnterDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "c0120000",
            "docs": [
              " For how many blocks the safe-mode will be entered by [`Pallet::enter`]."
            ]
          },
          {
            "name": "ExtendDuration",
            "type": "U32",
            "type_value": 4,
            "constants_value": "60090000",
            "docs": [
              " For how many blocks the safe-mode can be extended by each [`Pallet::extend`] call.",
              "",
              " This does not impose a hard limit as the safe-mode can be extended multiple times."
            ]
          },
          {
            "name": "EnterDepositAmount",
            "type": "option\u003cU128\u003e",
            "type_value": 331,
            "constants_value": "01000020c65abc8ed70a00000000000000",
            "docs": [
              " The amount that will be reserved upon calling [`Pallet::enter`].",
              "",
              " `None` disallows permissionlessly enabling the safe-mode and is a sane default."
            ]
          },
          {
            "name": "ExtendDepositAmount",
            "type": "option\u003cU128\u003e",
            "type_value": 331,
            "constants_value": "01000010632d5ec76b0500000000000000",
            "docs": [
              " The amount that will be reserved upon calling [`Pallet::extend`].",
              "",
              " `None` disallows permissionlessly extending the safe-mode and is a sane default."
            ]
          },
          {
            "name": "ReleaseDelay",
            "type": "option\u003cU32\u003e",
            "type_value": 38,
            "constants_value": "0100e10000",
            "docs": [
              " The minimal duration a deposit will remain reserved after safe-mode is entered or",
              " extended, unless [`Pallet::force_release_deposit`] is successfully called sooner.",
              "",
              " Every deposit is tied to a specific activation or extension, thus each deposit can be",
              " released independently after the delay for it has passed.",
              "",
              " `None` disallows permissionlessly releasing the safe-mode deposits and is a sane",
              " default."
            ]
          }
        ],
        "errors": [
          {
            "name": "Entered",
            "doc": [
              "The safe-mode is (already or still) entered."
            ]
          },
          {
            "name": "Exited",
            "doc": [
              "The safe-mode is (already or still) exited."
            ]
          },
          {
            "name": "NotConfigured",
            "doc": [
              "This functionality of the pallet is disabled by the configuration."
            ]
          },
          {
            "name": "NoDeposit",
            "doc": [
              "There is no balance reserved."
            ]
          },
          {
            "name": "AlreadyDeposited",
            "doc": [
              "The account already has a deposit reserved and can therefore not enter or extend again."
            ]
          },
          {
            "name": "CannotReleaseYet",
            "doc": [
              "This deposit cannot be released yet."
            ]
          },
          {
            "name": "CurrencyError",
            "doc": [
              "An error from the underlying `Currency`."
            ]
          }
        ],
        "errors_value": {
          "type": 836
        },
        "index": 68
      },
      {
        "name": "Statement",
        "prefix": "",
        "storage": null,
        "events": [
          {
            "lookup": "4500",
            "name": "NewStatement",
            "docs": [
              "A new statement is submitted"
            ],
            "args": [
              "[U8; 32]",
              "sp_statement_store:Statement"
            ],
            "args_name": [
              "account",
              "statement"
            ],
            "args_type_name": [
              "AccountId",
              "Statement"
            ]
          }
        ],
        "events_value": {
          "type": 442
        },
        "constants": [
          {
            "name": "StatementCost",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00407a10f35a00000000000000000000",
            "docs": [
              " Min balance for priority statements."
            ]
          },
          {
            "name": "ByteCost",
            "type": "U128",
            "type_value": 6,
            "constants_value": "00e87648170000000000000000000000",
            "docs": [
              " Cost of data byte used for priority calculation."
            ]
          },
          {
            "name": "MinAllowedStatements",
            "type": "U32",
            "type_value": 4,
            "constants_value": "04000000",
            "docs": [
              " Minimum number of statements allowed per account."
            ]
          },
          {
            "name": "MaxAllowedStatements",
            "type": "U32",
            "type_value": 4,
            "constants_value": "0a000000",
            "docs": [
              " Maximum number of statements allowed per account."
            ]
          },
          {
            "name": "MinAllowedBytes",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00040000",
            "docs": [
              " Minimum data bytes allowed per account."
            ]
          },
          {
            "name": "MaxAllowedBytes",
            "type": "U32",
            "type_value": 4,
            "constants_value": "00100000",
            "docs": [
              " Maximum data bytes allowed per account."
            ]
          }
        ],
        "errors": null,
        "errors_value": null,
        "index": 69
      },
      {
        "name": "Broker",
        "prefix": "Broker",
        "storage": [
          {
            "name": "Configuration",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_broker:types:ConfigRecord",
              "PlainTypeValue": 409
            },
            "fallback": "0x00",
            "docs": [
              " The current configuration of this pallet."
            ]
          },
          {
            "name": "Reservations",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cVec\u003cpallet_broker:types:ScheduleItem\u003e\u003e",
              "PlainTypeValue": 837
            },
            "fallback": "0x00",
            "docs": [
              " The Polkadot Core reservations (generally tasked with the maintenance of System Chains)."
            ]
          },
          {
            "name": "Leases",
            "modifier": "Default",
            "type": {
              "origin": "PlainType",
              "plain_type": "Vec\u003cpallet_broker:types:LeaseRecordItem\u003e",
              "PlainTypeValue": 839
            },
            "fallback": "0x00",
            "docs": [
              " The Polkadot Core legacy leases."
            ]
          },
          {
            "name": "Status",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_broker:types:StatusRecord",
              "PlainTypeValue": 842
            },
            "fallback": "0x00",
            "docs": [
              " The current status of miscellaneous subsystems of this pallet."
            ]
          },
          {
            "name": "SaleInfo",
            "modifier": "Optional",
            "type": {
              "origin": "PlainType",
              "plain_type": "pallet_broker:types:SaleInfoRecord",
              "PlainTypeValue": 843
            },
            "fallback": "0x00",
            "docs": [
              " The details of the current sale, including its properties and status."
            ]
          },
          {
            "name": "AllowedRenewals",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "pallet_broker:types:AllowedRenewalId"
                ],
                "value": "pallet_broker:types:AllowedRenewalRecord",
                "keys_id": 844,
                "value_id": 845
              }
            },
            "fallback": "0x00",
            "docs": [
              " Records of allowed renewals."
            ]
          },
          {
            "name": "Regions",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "pallet_broker:types:RegionId"
                ],
                "value": "pallet_broker:types:RegionRecord",
                "keys_id": 415,
                "value_id": 847
              }
            },
            "fallback": "0x00",
            "docs": [
              " The current (unassigned) Regions."
            ]
          },
          {
            "name": "Workplan",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U32",
                  "U16"
                ],
                "value": "Vec\u003cpallet_broker:types:ScheduleItem\u003e",
                "keys_id": 848,
                "value_id": 410
              }
            },
            "fallback": "0x00",
            "docs": [
              " The work we plan on having each core do at a particular time in the future."
            ]
          },
          {
            "name": "Workload",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Twox64Concat"
                ],
                "key_vec": [
                  "U16"
                ],
                "value": "Vec\u003cpallet_broker:types:ScheduleItem\u003e",
                "keys_id": 101,
                "value_id": 410
              }
            },
            "fallback": "0x00",
            "docs": [
              " The current workload of each core. This gets updated with workplan as timeslices pass."
            ]
          },
          {
            "name": "InstaPoolContribution",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "pallet_broker:types:RegionId"
                ],
                "value": "pallet_broker:types:ContributionRecord",
                "keys_id": 415,
                "value_id": 849
              }
            },
            "fallback": "0x00",
            "docs": [
              " Record of a single contribution to the Instantaneous Coretime Pool."
            ]
          },
          {
            "name": "InstaPoolIo",
            "modifier": "Default",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_broker:types:PoolIoRecord",
                "keys_id": 4,
                "value_id": 850
              }
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Record of Coretime entering or leaving the Instantaneous Coretime Pool."
            ]
          },
          {
            "name": "InstaPoolHistory",
            "modifier": "Optional",
            "type": {
              "origin": "Map",
              "n_map_type": {
                "hashers": [
                  "Blake2_128Concat"
                ],
                "key_vec": [
                  "U32"
                ],
                "value": "pallet_broker:types:InstaPoolHistoryRecord",
                "keys_id": 4,
                "value_id": 852
              }
            },
            "fallback": "0x00",
            "docs": [
              " Total InstaPool rewards for each Timeslice and the number of core parts which contributed."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "4600",
            "name": "configure",
            "docs": [
              "See [`Pallet::configure`]."
            ],
            "args": [
              {
                "name": "config",
                "type": "pallet_broker:types:ConfigRecord",
                "type_name": "ConfigRecordOf"
              }
            ]
          },
          {
            "lookup": "4601",
            "name": "reserve",
            "docs": [
              "See [`Pallet::reserve`]."
            ],
            "args": [
              {
                "name": "workload",
                "type": "Vec\u003cpallet_broker:types:ScheduleItem\u003e",
                "type_name": "Schedule"
              }
            ]
          },
          {
            "lookup": "4602",
            "name": "unreserve",
            "docs": [
              "See [`Pallet::unreserve`]."
            ],
            "args": [
              {
                "name": "item_index",
                "type": "U32",
                "type_name": "u32"
              }
            ]
          },
          {
            "lookup": "4603",
            "name": "set_lease",
            "docs": [
              "See [`Pallet::set_lease`]."
            ],
            "args": [
              {
                "name": "task",
                "type": "U32",
                "type_name": "TaskId"
              },
              {
                "name": "until",
                "type": "U32",
                "type_name": "Timeslice"
              }
            ]
          },
          {
            "lookup": "4604",
            "name": "start_sales",
            "docs": [
              "See [`Pallet::start_sales`]."
            ],
            "args": [
              {
                "name": "initial_price",
                "type": "U128",
                "type_name": "BalanceOf"
              },
              {
                "name": "core_count",
                "type": "U16",
                "type_name": "CoreIndex"
              }
            ]
          },
          {
            "lookup": "4605",
            "name": "purchase",
            "docs": [
              "See [`Pallet::purchase`]."
            ],
            "args": [
              {
                "name": "price_limit",
                "type": "U128",
                "type_name": "BalanceOf"
              }
            ]
          },
          {
            "lookup": "4606",
            "name": "renew",
            "docs": [
              "See [`Pallet::renew`]."
            ],
            "args": [
              {
                "name": "core",
                "type": "U16",
                "type_name": "CoreIndex"
              }
            ]
          },
          {
            "lookup": "4607",
            "name": "transfer",
            "docs": [
              "See [`Pallet::transfer`]."
            ],
            "args": [
              {
                "name": "region_id",
                "type": "pallet_broker:types:RegionId",
                "type_name": "RegionId"
              },
              {
                "name": "new_owner",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              }
            ]
          },
          {
            "lookup": "4608",
            "name": "partition",
            "docs": [
              "See [`Pallet::partition`]."
            ],
            "args": [
              {
                "name": "region_id",
                "type": "pallet_broker:types:RegionId",
                "type_name": "RegionId"
              },
              {
                "name": "pivot",
                "type": "U32",
                "type_name": "Timeslice"
              }
            ]
          },
          {
            "lookup": "4609",
            "name": "interlace",
            "docs": [
              "See [`Pallet::interlace`]."
            ],
            "args": [
              {
                "name": "region_id",
                "type": "pallet_broker:types:RegionId",
                "type_name": "RegionId"
              },
              {
                "name": "pivot",
                "type": "[U8; 10]",
                "type_name": "CoreMask"
              }
            ]
          },
          {
            "lookup": "460a",
            "name": "assign",
            "docs": [
              "See [`Pallet::assign`]."
            ],
            "args": [
              {
                "name": "region_id",
                "type": "pallet_broker:types:RegionId",
                "type_name": "RegionId"
              },
              {
                "name": "task",
                "type": "U32",
                "type_name": "TaskId"
              },
              {
                "name": "finality",
                "type": "pallet_broker:types:Finality",
                "type_name": "Finality"
              }
            ]
          },
          {
            "lookup": "460b",
            "name": "pool",
            "docs": [
              "See [`Pallet::pool`]."
            ],
            "args": [
              {
                "name": "region_id",
                "type": "pallet_broker:types:RegionId",
                "type_name": "RegionId"
              },
              {
                "name": "payee",
                "type": "[U8; 32]",
                "type_name": "AccountId"
              },
              {
                "name": "finality",
                "type": "pallet_broker:types:Finality",
                "type_name": "Finality"
              }
            ]
          },
          {
            "lookup": "460c",
            "name": "claim_revenue",
            "docs": [
              "See [`Pallet::claim_revenue`]."
            ],
            "args": [
              {
                "name": "region_id",
                "type": "pallet_broker:types:RegionId",
                "type_name": "RegionId"
              },
              {
                "name": "max_timeslices",
                "type": "U32",
                "type_name": "Timeslice"
              }
            ]
          },
          {
            "lookup": "460d",
            "name": "purchase_credit",
            "docs": [
              "See [`Pallet::purchase_credit`]."
            ],
            "args": [
              {
                "name": "amount",
                "type": "U128",
                "type_name": "BalanceOf"
              },
              {
                "name": "beneficiary",
                "type": "[U8; 32]",
                "type_name": "RelayAccountIdOf"
              }
            ]
          },
          {
            "lookup": "460e",
            "name": "drop_region",
            "docs": [
              "See [`Pallet::drop_region`]."
            ],
            "args": [
              {
                "name": "region_id",
                "type": "pallet_broker:types:RegionId",
                "type_name": "RegionId"
              }
            ]
          },
          {
            "lookup": "460f",
            "name": "drop_contribution",
            "docs": [
              "See [`Pallet::drop_contribution`]."
            ],
            "args": [
              {
                "name": "region_id",
                "type": "pallet_broker:types:RegionId",
                "type_name": "RegionId"
              }
            ]
          },
          {
            "lookup": "4610",
            "name": "drop_history",
            "docs": [
              "See [`Pallet::drop_history`]."
            ],
            "args": [
              {
                "name": "when",
                "type": "U32",
                "type_name": "Timeslice"
              }
            ]
          },
          {
            "lookup": "4611",
            "name": "drop_renewal",
            "docs": [
              "See [`Pallet::drop_renewal`]."
            ],
            "args": [
              {
                "name": "core",
                "type": "U16",
                "type_name": "CoreIndex"
              },
              {
                "name": "when",
                "type": "U32",
                "type_name": "Timeslice"
              }
            ]
          },
          {
            "lookup": "4612",
            "name": "request_core_count",
            "docs": [
              "See [`Pallet::request_core_count`]."
            ],
            "args": [
              {
                "name": "core_count",
                "type": "U16",
                "type_name": "CoreIndex"
              }
            ]
          }
        ],
        "calls_value": {
          "type": 408
        },
        "events": [
          {
            "lookup": "4600",
            "name": "Purchased",
            "docs": [
              "A Region of Bulk Coretime has been purchased."
            ],
            "args": [
              "[U8; 32]",
              "pallet_broker:types:RegionId",
              "U128",
              "U32"
            ],
            "args_name": [
              "who",
              "region_id",
              "price",
              "duration"
            ],
            "args_type_name": [
              "AccountId",
              "RegionId",
              "BalanceOf",
              "Timeslice"
            ]
          },
          {
            "lookup": "4601",
            "name": "Renewable",
            "docs": [
              "The workload of a core has become renewable."
            ],
            "args": [
              "U16",
              "U128",
              "U32",
              "Vec\u003cpallet_broker:types:ScheduleItem\u003e"
            ],
            "args_name": [
              "core",
              "price",
              "begin",
              "workload"
            ],
            "args_type_name": [
              "CoreIndex",
              "BalanceOf",
              "Timeslice",
              "Schedule"
            ]
          },
          {
            "lookup": "4602",
            "name": "Renewed",
            "docs": [
              "A workload has been renewed."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "U16",
              "U16",
              "U32",
              "U32",
              "Vec\u003cpallet_broker:types:ScheduleItem\u003e"
            ],
            "args_name": [
              "who",
              "price",
              "old_core",
              "core",
              "begin",
              "duration",
              "workload"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "CoreIndex",
              "CoreIndex",
              "Timeslice",
              "Timeslice",
              "Schedule"
            ]
          },
          {
            "lookup": "4603",
            "name": "Transferred",
            "docs": [
              "Ownership of a Region has been transferred."
            ],
            "args": [
              "pallet_broker:types:RegionId",
              "U32",
              "[U8; 32]",
              "[U8; 32]"
            ],
            "args_name": [
              "region_id",
              "duration",
              "old_owner",
              "owner"
            ],
            "args_type_name": [
              "RegionId",
              "Timeslice",
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "4604",
            "name": "Partitioned",
            "docs": [
              "A Region has been split into two non-overlapping Regions."
            ],
            "args": [
              "pallet_broker:types:RegionId",
              "Tuple:pallet_broker:types:RegionIdpallet_broker:types:RegionId"
            ],
            "args_name": [
              "old_region_id",
              "new_region_ids"
            ],
            "args_type_name": [
              "RegionId",
              "(RegionId, RegionId)"
            ]
          },
          {
            "lookup": "4605",
            "name": "Interlaced",
            "docs": [
              "A Region has been converted into two overlapping Regions each of lesser regularity."
            ],
            "args": [
              "pallet_broker:types:RegionId",
              "Tuple:pallet_broker:types:RegionIdpallet_broker:types:RegionId"
            ],
            "args_name": [
              "old_region_id",
              "new_region_ids"
            ],
            "args_type_name": [
              "RegionId",
              "(RegionId, RegionId)"
            ]
          },
          {
            "lookup": "4606",
            "name": "Assigned",
            "docs": [
              "A Region has been assigned to a particular task."
            ],
            "args": [
              "pallet_broker:types:RegionId",
              "U32",
              "U32"
            ],
            "args_name": [
              "region_id",
              "duration",
              "task"
            ],
            "args_type_name": [
              "RegionId",
              "Timeslice",
              "TaskId"
            ]
          },
          {
            "lookup": "4607",
            "name": "Pooled",
            "docs": [
              "A Region has been added to the Instantaneous Coretime Pool."
            ],
            "args": [
              "pallet_broker:types:RegionId",
              "U32"
            ],
            "args_name": [
              "region_id",
              "duration"
            ],
            "args_type_name": [
              "RegionId",
              "Timeslice"
            ]
          },
          {
            "lookup": "4608",
            "name": "CoreCountRequested",
            "docs": [
              "A new number of cores has been requested."
            ],
            "args": [
              "U16"
            ],
            "args_name": [
              "core_count"
            ],
            "args_type_name": [
              "CoreIndex"
            ]
          },
          {
            "lookup": "4609",
            "name": "CoreCountChanged",
            "docs": [
              "The number of cores available for scheduling has changed."
            ],
            "args": [
              "U16"
            ],
            "args_name": [
              "core_count"
            ],
            "args_type_name": [
              "CoreIndex"
            ]
          },
          {
            "lookup": "460a",
            "name": "ReservationMade",
            "docs": [
              "There is a new reservation for a workload."
            ],
            "args": [
              "U32",
              "Vec\u003cpallet_broker:types:ScheduleItem\u003e"
            ],
            "args_name": [
              "index",
              "workload"
            ],
            "args_type_name": [
              "u32",
              "Schedule"
            ]
          },
          {
            "lookup": "460b",
            "name": "ReservationCancelled",
            "docs": [
              "A reservation for a workload has been cancelled."
            ],
            "args": [
              "U32",
              "Vec\u003cpallet_broker:types:ScheduleItem\u003e"
            ],
            "args_name": [
              "index",
              "workload"
            ],
            "args_type_name": [
              "u32",
              "Schedule"
            ]
          },
          {
            "lookup": "460c",
            "name": "SaleInitialized",
            "docs": [
              "A new sale has been initialized."
            ],
            "args": [
              "U32",
              "U32",
              "U128",
              "U128",
              "U32",
              "U32",
              "U16",
              "U16"
            ],
            "args_name": [
              "sale_start",
              "leadin_length",
              "start_price",
              "regular_price",
              "region_begin",
              "region_end",
              "ideal_cores_sold",
              "cores_offered"
            ],
            "args_type_name": [
              "BlockNumberFor",
              "BlockNumberFor",
              "BalanceOf",
              "BalanceOf",
              "Timeslice",
              "Timeslice",
              "CoreIndex",
              "CoreIndex"
            ]
          },
          {
            "lookup": "460d",
            "name": "Leased",
            "docs": [
              "A new lease has been created."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "task",
              "until"
            ],
            "args_type_name": [
              "TaskId",
              "Timeslice"
            ]
          },
          {
            "lookup": "460e",
            "name": "LeaseEnding",
            "docs": [
              "A lease is about to end."
            ],
            "args": [
              "U32",
              "U32"
            ],
            "args_name": [
              "task",
              "when"
            ],
            "args_type_name": [
              "TaskId",
              "Timeslice"
            ]
          },
          {
            "lookup": "460f",
            "name": "SalesStarted",
            "docs": [
              "The sale rotation has been started and a new sale is imminent."
            ],
            "args": [
              "U128",
              "U16"
            ],
            "args_name": [
              "price",
              "core_count"
            ],
            "args_type_name": [
              "BalanceOf",
              "CoreIndex"
            ]
          },
          {
            "lookup": "4610",
            "name": "RevenueClaimBegun",
            "docs": [
              "The act of claiming revenue has begun."
            ],
            "args": [
              "pallet_broker:types:RegionId",
              "U32"
            ],
            "args_name": [
              "region",
              "max_timeslices"
            ],
            "args_type_name": [
              "RegionId",
              "Timeslice"
            ]
          },
          {
            "lookup": "4611",
            "name": "RevenueClaimItem",
            "docs": [
              "A particular timeslice has a non-zero claim."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "when",
              "amount"
            ],
            "args_type_name": [
              "Timeslice",
              "BalanceOf"
            ]
          },
          {
            "lookup": "4612",
            "name": "RevenueClaimPaid",
            "docs": [
              "A revenue claim has (possibly only in part) been paid."
            ],
            "args": [
              "[U8; 32]",
              "U128",
              "option\u003cpallet_broker:types:RegionId\u003e"
            ],
            "args_name": [
              "who",
              "amount",
              "next"
            ],
            "args_type_name": [
              "AccountId",
              "BalanceOf",
              "Option\u003cRegionId\u003e"
            ]
          },
          {
            "lookup": "4613",
            "name": "CreditPurchased",
            "docs": [
              "Some Instantaneous Coretime Pool credit has been purchased."
            ],
            "args": [
              "[U8; 32]",
              "[U8; 32]",
              "U128"
            ],
            "args_name": [
              "who",
              "beneficiary",
              "amount"
            ],
            "args_type_name": [
              "AccountId",
              "RelayAccountIdOf",
              "BalanceOf"
            ]
          },
          {
            "lookup": "4614",
            "name": "RegionDropped",
            "docs": [
              "A Region has been dropped due to being out of date."
            ],
            "args": [
              "pallet_broker:types:RegionId",
              "U32"
            ],
            "args_name": [
              "region_id",
              "duration"
            ],
            "args_type_name": [
              "RegionId",
              "Timeslice"
            ]
          },
          {
            "lookup": "4615",
            "name": "ContributionDropped",
            "docs": [
              "Some historical Instantaneous Core Pool contribution record has been dropped."
            ],
            "args": [
              "pallet_broker:types:RegionId"
            ],
            "args_name": [
              "region_id"
            ],
            "args_type_name": [
              "RegionId"
            ]
          },
          {
            "lookup": "4616",
            "name": "HistoryInitialized",
            "docs": [
              "Some historical Instantaneous Core Pool payment record has been initialized."
            ],
            "args": [
              "U32",
              "U32",
              "U32"
            ],
            "args_name": [
              "when",
              "private_pool_size",
              "system_pool_size"
            ],
            "args_type_name": [
              "Timeslice",
              "CoreMaskBitCount",
              "CoreMaskBitCount"
            ]
          },
          {
            "lookup": "4617",
            "name": "HistoryDropped",
            "docs": [
              "Some historical Instantaneous Core Pool payment record has been dropped."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "when",
              "revenue"
            ],
            "args_type_name": [
              "Timeslice",
              "BalanceOf"
            ]
          },
          {
            "lookup": "4618",
            "name": "HistoryIgnored",
            "docs": [
              "Some historical Instantaneous Core Pool payment record has been ignored because the",
              "timeslice was already known. Governance may need to intervene."
            ],
            "args": [
              "U32",
              "U128"
            ],
            "args_name": [
              "when",
              "revenue"
            ],
            "args_type_name": [
              "Timeslice",
              "BalanceOf"
            ]
          },
          {
            "lookup": "4619",
            "name": "ClaimsReady",
            "docs": [
              "Some historical Instantaneous Core Pool Revenue is ready for payout claims."
            ],
            "args": [
              "U32",
              "U128",
              "U128"
            ],
            "args_name": [
              "when",
              "system_payout",
              "private_payout"
            ],
            "args_type_name": [
              "Timeslice",
              "BalanceOf",
              "BalanceOf"
            ]
          },
          {
            "lookup": "461a",
            "name": "CoreAssigned",
            "docs": [
              "A Core has been assigned to one or more tasks and/or the Pool on the Relay-chain."
            ],
            "args": [
              "U16",
              "U32",
              "Vec\u003cTuple:pallet_broker:coretime_interface:CoreAssignmentU16\u003e"
            ],
            "args_name": [
              "core",
              "when",
              "assignment"
            ],
            "args_type_name": [
              "CoreIndex",
              "RelayBlockNumberOf",
              "Vec\u003c(CoreAssignment, PartsOf57600)\u003e"
            ]
          },
          {
            "lookup": "461b",
            "name": "AllowedRenewalDropped",
            "docs": [
              "Some historical Instantaneous Core Pool payment record has been dropped."
            ],
            "args": [
              "U32",
              "U16"
            ],
            "args_name": [
              "when",
              "core"
            ],
            "args_type_name": [
              "Timeslice",
              "CoreIndex"
            ]
          }
        ],
        "events_value": {
          "type": 449
        },
        "constants": [
          {
            "name": "PalletId",
            "type": "[U8; 8]",
            "type_value": 580,
            "constants_value": "70792f62726f6b65",
            "docs": [
              " Identifier from which the internal Pot is generated."
            ]
          },
          {
            "name": "TimeslicePeriod",
            "type": "U32",
            "type_value": 4,
            "constants_value": "02000000",
            "docs": [
              " Number of Relay-chain blocks per timeslice."
            ]
          },
          {
            "name": "MaxLeasedCores",
            "type": "U32",
            "type_value": 4,
            "constants_value": "05000000",
            "docs": [
              " Maximum number of legacy leases."
            ]
          },
          {
            "name": "MaxReservedCores",
            "type": "U32",
            "type_value": 4,
            "constants_value": "05000000",
            "docs": [
              " Maximum number of system cores."
            ]
          }
        ],
        "errors": [
          {
            "name": "UnknownRegion",
            "doc": [
              "The given region identity is not known."
            ]
          },
          {
            "name": "NotOwner",
            "doc": [
              "The owner of the region is not the origin."
            ]
          },
          {
            "name": "PivotTooLate",
            "doc": [
              "The pivot point of the partition at or after the end of the region."
            ]
          },
          {
            "name": "PivotTooEarly",
            "doc": [
              "The pivot point of the partition at the beginning of the region."
            ]
          },
          {
            "name": "ExteriorPivot",
            "doc": [
              "The pivot mask for the interlacing is not contained within the region's interlace mask."
            ]
          },
          {
            "name": "VoidPivot",
            "doc": [
              "The pivot mask for the interlacing is void (and therefore unschedulable)."
            ]
          },
          {
            "name": "CompletePivot",
            "doc": [
              "The pivot mask for the interlacing is complete (and therefore not a strict subset)."
            ]
          },
          {
            "name": "CorruptWorkplan",
            "doc": [
              "The workplan of the pallet's state is invalid. This indicates a state corruption."
            ]
          },
          {
            "name": "NoSales",
            "doc": [
              "There is no sale happening currently."
            ]
          },
          {
            "name": "Overpriced",
            "doc": [
              "The price limit is exceeded."
            ]
          },
          {
            "name": "Unavailable",
            "doc": [
              "There are no cores available."
            ]
          },
          {
            "name": "SoldOut",
            "doc": [
              "The sale limit has been reached."
            ]
          },
          {
            "name": "WrongTime",
            "doc": [
              "The renewal operation is not valid at the current time (it may become valid in the next",
              "sale)."
            ]
          },
          {
            "name": "NotAllowed",
            "doc": [
              "Invalid attempt to renew."
            ]
          },
          {
            "name": "Uninitialized",
            "doc": [
              "This pallet has not yet been initialized."
            ]
          },
          {
            "name": "TooEarly",
            "doc": [
              "The purchase cannot happen yet as the sale period is yet to begin."
            ]
          },
          {
            "name": "NothingToDo",
            "doc": [
              "There is no work to be done."
            ]
          },
          {
            "name": "TooManyReservations",
            "doc": [
              "The maximum amount of reservations has already been reached."
            ]
          },
          {
            "name": "TooManyLeases",
            "doc": [
              "The maximum amount of leases has already been reached."
            ]
          },
          {
            "name": "UnknownRevenue",
            "doc": [
              "The revenue for the Instantaneous Core Sales of this period is not (yet) known and thus",
              "this operation cannot proceed."
            ]
          },
          {
            "name": "UnknownContribution",
            "doc": [
              "The identified contribution to the Instantaneous Core Pool is unknown."
            ]
          },
          {
            "name": "IncompleteAssignment",
            "doc": [
              "The workload assigned for renewal is incomplete. This is unexpected and indicates a",
              "logic error."
            ]
          },
          {
            "name": "StillValid",
            "doc": [
              "An item cannot be dropped because it is still valid."
            ]
          },
          {
            "name": "NoHistory",
            "doc": [
              "The history item does not exist."
            ]
          },
          {
            "name": "UnknownReservation",
            "doc": [
              "No reservation of the given index exists."
            ]
          },
          {
            "name": "UnknownRenewal",
            "doc": [
              "The renewal record cannot be found."
            ]
          },
          {
            "name": "AlreadyExpired",
            "doc": [
              "The lease expiry time has already passed."
            ]
          },
          {
            "name": "InvalidConfig",
            "doc": [
              "The configuration could not be applied because it is invalid."
            ]
          }
        ],
        "errors_value": {
          "type": 853
        },
        "index": 70
      }
    ]
  },
  "extrinsic": {
    "version": 4,
    "addressType": 166,
    "callType": 141,
    "signatureType": 349,
    "extraType": 854,
    "signedExtensions": [
      {
        "identifier": "CheckNonZeroSender",
        "type": 855,
        "additionalSigned": 32
      },
      {
        "identifier": "CheckSpecVersion",
        "type": 856,
        "additionalSigned": 4
      },
      {
        "identifier": "CheckTxVersion",
        "type": 857,
        "additionalSigned": 4
      },
      {
        "identifier": "CheckGenesis",
        "type": 858,
        "additionalSigned": 12
      },
      {
        "identifier": "CheckMortality",
        "type": 859,
        "additionalSigned": 12
      },
      {
        "identifier": "CheckNonce",
        "type": 861,
        "additionalSigned": 32
      },
      {
        "identifier": "CheckWeight",
        "type": 862,
        "additionalSigned": 32
      },
      {
        "identifier": "ChargeAssetTxPayment",
        "type": 863,
        "additionalSigned": 32
      }
    ],
    "signed_identifier": [
      "CheckNonZeroSender",
      "CheckSpecVersion",
      "CheckTxVersion",
      "CheckGenesis",
      "CheckMortality",
      "CheckNonce",
      "CheckWeight",
      "ChargeAssetTxPayment"
    ]
  },
  "type": 74,
  "apis": [
    {
      "name": "Core",
      "methods": [
        {
          "name": "version",
          "inputs": null,
          "outputsId": 465,
          "outputs": "sp_version:RuntimeVersion",
          "docs": [
            " Returns the version of the runtime."
          ]
        },
        {
          "name": "execute_block",
          "inputs": [
            {
              "name": "block",
              "typeId": 864,
              "type": "sp_runtime:generic:block:Block"
            }
          ],
          "outputsId": 32,
          "outputs": "NULL",
          "docs": [
            " Execute the given block."
          ]
        },
        {
          "name": "initialize_block",
          "inputs": [
            {
              "name": "header",
              "typeId": 156,
              "type": "sp_runtime:generic:header:Header"
            }
          ],
          "outputsId": 32,
          "outputs": "NULL",
          "docs": [
            " Initialize a block with the given header."
          ]
        }
      ],
      "docs": [
        " The `Core` runtime api that every Substrate runtime needs to implement."
      ]
    },
    {
      "name": "Metadata",
      "methods": [
        {
          "name": "metadata",
          "inputs": null,
          "outputsId": 867,
          "outputs": "Vec\u003cU8\u003e",
          "docs": [
            " Returns the metadata of a runtime."
          ]
        },
        {
          "name": "metadata_at_version",
          "inputs": [
            {
              "name": "version",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 868,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": [
            " Returns the metadata at a given version.",
            "",
            " If the given `version` isn't supported, this will return `None`.",
            " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."
          ]
        },
        {
          "name": "metadata_versions",
          "inputs": null,
          "outputsId": 114,
          "outputs": "Vec\u003cU32\u003e",
          "docs": [
            " Returns the supported metadata versions.",
            "",
            " This can be used to call `metadata_at_version`."
          ]
        }
      ],
      "docs": [
        " The `Metadata` api trait that returns metadata for the runtime."
      ]
    },
    {
      "name": "BlockBuilder",
      "methods": [
        {
          "name": "apply_extrinsic",
          "inputs": [
            {
              "name": "extrinsic",
              "typeId": 865,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 869,
          "outputs": "Result\u003cResult\u003cNULL,sp_runtime:DispatchError\u003e,sp_runtime:transaction_validity:TransactionValidityError\u003e",
          "docs": [
            " Apply the given extrinsic.",
            "",
            " Returns an inclusion outcome which specifies if this extrinsic is included in",
            " this block or not."
          ]
        },
        {
          "name": "finalize_block",
          "inputs": null,
          "outputsId": 156,
          "outputs": "sp_runtime:generic:header:Header",
          "docs": [
            " Finish the current block."
          ]
        },
        {
          "name": "inherent_extrinsics",
          "inputs": [
            {
              "name": "inherent",
              "typeId": 873,
              "type": "Vec\u003cTuple:[U8; 8]Vec\u003cU8\u003e\u003e"
            }
          ],
          "outputsId": 866,
          "outputs": "Vec\u003csp_runtime:generic:unchecked_extrinsic:UncheckedExtrinsic\u003e",
          "docs": [
            " Generate inherent extrinsics. The inherent data will vary from chain to chain."
          ]
        },
        {
          "name": "check_inherents",
          "inputs": [
            {
              "name": "block",
              "typeId": 864,
              "type": "sp_runtime:generic:block:Block"
            },
            {
              "name": "data",
              "typeId": 873,
              "type": "Vec\u003cTuple:[U8; 8]Vec\u003cU8\u003e\u003e"
            }
          ],
          "outputsId": 877,
          "outputs": "sp_inherents:CheckInherentsResult",
          "docs": [
            " Check that the inherents are valid. The inherent data will vary from chain to chain."
          ]
        }
      ],
      "docs": [
        " The `BlockBuilder` api trait that provides the required functionality for building a block."
      ]
    },
    {
      "name": "TaggedTransactionQueue",
      "methods": [
        {
          "name": "validate_transaction",
          "inputs": [
            {
              "name": "source",
              "typeId": 878,
              "type": "sp_runtime:transaction_validity:TransactionSource"
            },
            {
              "name": "tx",
              "typeId": 865,
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "block_hash",
              "typeId": 12,
              "type": "H256"
            }
          ],
          "outputsId": 879,
          "outputs": "Result\u003csp_runtime:transaction_validity:ValidTransaction,sp_runtime:transaction_validity:TransactionValidityError\u003e",
          "docs": [
            " Validate the transaction.",
            "",
            " This method is invoked by the transaction pool to learn details about given transaction.",
            " The implementation should make sure to verify the correctness of the transaction",
            " against current state. The given `block_hash` corresponds to the hash of the block",
            " that is used as current state.",
            "",
            " Note that this call may be performed by the pool multiple times and transactions",
            " might be verified in any possible order."
          ]
        }
      ],
      "docs": [
        " The `TaggedTransactionQueue` api trait for interfering with the transaction queue."
      ]
    },
    {
      "name": "ValidateStatement",
      "methods": [
        {
          "name": "validate_statement",
          "inputs": [
            {
              "name": "source",
              "typeId": 881,
              "type": "sp_statement_store:runtime_api:StatementSource"
            },
            {
              "name": "statement",
              "typeId": 443,
              "type": "sp_statement_store:Statement"
            }
          ],
          "outputsId": 882,
          "outputs": "Result\u003csp_statement_store:runtime_api:ValidStatement,sp_statement_store:runtime_api:InvalidStatement\u003e",
          "docs": [
            " Validate the statement."
          ]
        }
      ],
      "docs": [
        " Runtime API trait for statement validation."
      ]
    },
    {
      "name": "OffchainWorkerApi",
      "methods": [
        {
          "name": "offchain_worker",
          "inputs": [
            {
              "name": "header",
              "typeId": 156,
              "type": "sp_runtime:generic:header:Header"
            }
          ],
          "outputsId": 32,
          "outputs": "NULL",
          "docs": [
            " Starts the off-chain task for given block header."
          ]
        }
      ],
      "docs": [
        " The offchain worker api."
      ]
    },
    {
      "name": "GrandpaApi",
      "methods": [
        {
          "name": "grandpa_authorities",
          "inputs": null,
          "outputsId": 65,
          "outputs": "Vec\u003cTuple:sp_consensus_grandpa:app:PublicU64\u003e",
          "docs": [
            " Get the current GRANDPA authorities and weights. This should not change except",
            " for when changes are scheduled and the corresponding delay has passed.",
            "",
            " When called at block B, it will return the set of authorities that should be",
            " used to finalize descendants of this block (B+1, B+2, ...). The block B itself",
            " is finalized by the authorities from block B-1."
          ]
        },
        {
          "name": "submit_report_equivocation_unsigned_extrinsic",
          "inputs": [
            {
              "name": "equivocation_proof",
              "typeId": 247,
              "type": "sp_consensus_grandpa:EquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "typeId": 885,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 886,
          "outputs": "option\u003cNULL\u003e",
          "docs": [
            " Submits an unsigned extrinsic to report an equivocation. The caller",
            " must provide the equivocation proof and a key ownership proof",
            " (should be obtained using `generate_key_ownership_proof`). The",
            " extrinsic will be unsigned and should only be accepted for local",
            " authorship (not to be broadcast to the network). This method returns",
            " `None` when creation of the extrinsic fails, e.g. if equivocation",
            " reporting is disabled for the given runtime (i.e. this method is",
            " hardcoded to return `None`). Only useful in an offchain context."
          ]
        },
        {
          "name": "generate_key_ownership_proof",
          "inputs": [
            {
              "name": "set_id",
              "typeId": 11,
              "type": "U64"
            },
            {
              "name": "authority_id",
              "typeId": 67,
              "type": "[U8; 32]"
            }
          ],
          "outputsId": 887,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": [
            " Generates a proof of key ownership for the given authority in the",
            " given set. An example usage of this module is coupled with the",
            " session historical module to prove that a given authority key is",
            " tied to a given staking identity during a specific session. Proofs",
            " of key ownership are necessary for submitting equivocation reports.",
            " NOTE: even though the API takes a `set_id` as parameter the current",
            " implementations ignore this parameter and instead rely on this",
            " method being called at the correct block height, i.e. any point at",
            " which the given set id is live on-chain. Future implementations will",
            " instead use indexed data through an offchain worker, not requiring",
            " older states to be available."
          ]
        },
        {
          "name": "current_set_id",
          "inputs": null,
          "outputsId": 11,
          "outputs": "U64",
          "docs": [
            " Get current GRANDPA authority set id."
          ]
        }
      ],
      "docs": [
        " APIs for integrating the GRANDPA finality gadget into runtimes.",
        " This should be implemented on the runtime side.",
        "",
        " This is primarily used for negotiating authority-set changes for the",
        " gadget. GRANDPA uses a signaling model of changing authority sets:",
        " changes should be signaled with a delay of N blocks, and then automatically",
        " applied in the runtime after those N blocks have passed.",
        "",
        " The consensus protocol will coordinate the handoff externally."
      ]
    },
    {
      "name": "NominationPoolsApi",
      "methods": [
        {
          "name": "pending_rewards",
          "inputs": [
            {
              "name": "who",
              "typeId": 0,
              "type": "[U8; 32]"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": [
            " Returns the pending rewards for the member that the AccountId was given for."
          ]
        },
        {
          "name": "points_to_balance",
          "inputs": [
            {
              "name": "pool_id",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "points",
              "typeId": 6,
              "type": "U128"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": [
            " Returns the equivalent balance of `points` for a given pool."
          ]
        },
        {
          "name": "balance_to_points",
          "inputs": [
            {
              "name": "pool_id",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "new_funds",
              "typeId": 6,
              "type": "U128"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": [
            " Returns the equivalent points of `new_funds` for a given pool."
          ]
        }
      ],
      "docs": [
        " Runtime api for accessing information about nomination pools."
      ]
    },
    {
      "name": "StakingApi",
      "methods": [
        {
          "name": "nominations_quota",
          "inputs": [
            {
              "name": "balance",
              "typeId": 6,
              "type": "U128"
            }
          ],
          "outputsId": 4,
          "outputs": "U32",
          "docs": [
            " Returns the nominations quota for a nominator with a given balance."
          ]
        }
      ],
      "docs": null
    },
    {
      "name": "BabeApi",
      "methods": [
        {
          "name": "configuration",
          "inputs": null,
          "outputsId": 888,
          "outputs": "sp_consensus_babe:BabeConfiguration",
          "docs": [
            " Return the configuration for BABE."
          ]
        },
        {
          "name": "current_epoch_start",
          "inputs": null,
          "outputsId": 159,
          "outputs": "U64",
          "docs": [
            " Returns the slot that started the current epoch."
          ]
        },
        {
          "name": "current_epoch",
          "inputs": null,
          "outputsId": 889,
          "outputs": "sp_consensus_babe:Epoch",
          "docs": [
            " Returns information regarding the current epoch."
          ]
        },
        {
          "name": "next_epoch",
          "inputs": null,
          "outputsId": 889,
          "outputs": "sp_consensus_babe:Epoch",
          "docs": [
            " Returns information regarding the next epoch (which was already",
            " previously announced)."
          ]
        },
        {
          "name": "generate_key_ownership_proof",
          "inputs": [
            {
              "name": "slot",
              "typeId": 159,
              "type": "U64"
            },
            {
              "name": "authority_id",
              "typeId": 158,
              "type": "[U8; 32]"
            }
          ],
          "outputsId": 890,
          "outputs": "option\u003csp_consensus_babe:OpaqueKeyOwnershipProof\u003e",
          "docs": [
            " Generates a proof of key ownership for the given authority in the",
            " current epoch. An example usage of this module is coupled with the",
            " session historical module to prove that a given authority key is",
            " tied to a given staking identity during a specific session. Proofs",
            " of key ownership are necessary for submitting equivocation reports.",
            " NOTE: even though the API takes a `slot` as parameter the current",
            " implementations ignores this parameter and instead relies on this",
            " method being called at the correct block height, i.e. any point at",
            " which the epoch for the given slot is live on-chain. Future",
            " implementations will instead use indexed data through an offchain",
            " worker, not requiring older states to be available."
          ]
        },
        {
          "name": "submit_report_equivocation_unsigned_extrinsic",
          "inputs": [
            {
              "name": "equivocation_proof",
              "typeId": 155,
              "type": "sp_consensus_slots:EquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "typeId": 891,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 886,
          "outputs": "option\u003cNULL\u003e",
          "docs": [
            " Submits an unsigned extrinsic to report an equivocation. The caller",
            " must provide the equivocation proof and a key ownership proof",
            " (should be obtained using `generate_key_ownership_proof`). The",
            " extrinsic will be unsigned and should only be accepted for local",
            " authorship (not to be broadcast to the network). This method returns",
            " `None` when creation of the extrinsic fails, e.g. if equivocation",
            " reporting is disabled for the given runtime (i.e. this method is",
            " hardcoded to return `None`). Only useful in an offchain context."
          ]
        }
      ],
      "docs": [
        " API necessary for block authorship with BABE."
      ]
    },
    {
      "name": "AuthorityDiscoveryApi",
      "methods": [
        {
          "name": "authorities",
          "inputs": null,
          "outputsId": 610,
          "outputs": "Vec\u003c[U8; 32]\u003e",
          "docs": [
            " Retrieve authority identifiers of the current and next authority set."
          ]
        }
      ],
      "docs": [
        " The authority discovery api.",
        "",
        " This api is used by the `client/authority-discovery` module to retrieve identifiers",
        " of the current and next authority set."
      ]
    },
    {
      "name": "AccountNonceApi",
      "methods": [
        {
          "name": "account_nonce",
          "inputs": [
            {
              "name": "account",
              "typeId": 0,
              "type": "[U8; 32]"
            }
          ],
          "outputsId": 4,
          "outputs": "U32",
          "docs": [
            " Get current account nonce of given `AccountId`."
          ]
        }
      ],
      "docs": [
        " The API to query account nonce."
      ]
    },
    {
      "name": "AssetsApi",
      "methods": [
        {
          "name": "account_balances",
          "inputs": [
            {
              "name": "account",
              "typeId": 0,
              "type": "[U8; 32]"
            }
          ],
          "outputsId": 631,
          "outputs": "Vec\u003cTuple:U32U128\u003e",
          "docs": [
            " Returns the list of `AssetId`s and corresponding balance that an `AccountId` has."
          ]
        }
      ],
      "docs": null
    },
    {
      "name": "ContractsApi",
      "methods": [
        {
          "name": "call",
          "inputs": [
            {
              "name": "origin",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "dest",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "value",
              "typeId": 6,
              "type": "U128"
            },
            {
              "name": "gas_limit",
              "typeId": 423,
              "type": "option\u003csp_weights:weight_v2:Weight\u003e"
            },
            {
              "name": "storage_deposit_limit",
              "typeId": 331,
              "type": "option\u003cU128\u003e"
            },
            {
              "name": "input_data",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 892,
          "outputs": "pallet_contracts_primitives:ContractResult@892",
          "docs": [
            " Perform a call from a specified account to a given contract.",
            "",
            " See [`crate::Pallet::bare_call`]."
          ]
        },
        {
          "name": "instantiate",
          "inputs": [
            {
              "name": "origin",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "value",
              "typeId": 6,
              "type": "U128"
            },
            {
              "name": "gas_limit",
              "typeId": 423,
              "type": "option\u003csp_weights:weight_v2:Weight\u003e"
            },
            {
              "name": "storage_deposit_limit",
              "typeId": 331,
              "type": "option\u003cU128\u003e"
            },
            {
              "name": "code",
              "typeId": 899,
              "type": "pallet_contracts_primitives:Code"
            },
            {
              "name": "data",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "salt",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 900,
          "outputs": "pallet_contracts_primitives:ContractResult@900",
          "docs": [
            " Instantiate a new contract.",
            "",
            " See `[crate::Pallet::bare_instantiate]`."
          ]
        },
        {
          "name": "upload_code",
          "inputs": [
            {
              "name": "origin",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "code",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "storage_deposit_limit",
              "typeId": 331,
              "type": "option\u003cU128\u003e"
            },
            {
              "name": "determinism",
              "typeId": 262,
              "type": "pallet_contracts:wasm:Determinism"
            }
          ],
          "outputsId": 903,
          "outputs": "Result\u003cpallet_contracts_primitives:CodeUploadReturnValue,sp_runtime:DispatchError\u003e",
          "docs": [
            " Upload new code without instantiating a contract from it.",
            "",
            " See [`crate::Pallet::bare_upload_code`]."
          ]
        },
        {
          "name": "get_storage",
          "inputs": [
            {
              "name": "address",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "key",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 905,
          "outputs": "Result\u003coption\u003cVec\u003cU8\u003e\u003e,pallet_contracts_primitives:ContractAccessError\u003e",
          "docs": [
            " Query a given storage key in a given contract.",
            "",
            " Returns `Ok(Some(Vec\u003cu8\u003e))` if the storage value exists under the given key in the",
            " specified account and `Ok(None)` if it doesn't. If the account specified by the address",
            " doesn't exist, or doesn't have a contract then `Err` is returned."
          ]
        }
      ],
      "docs": [
        " The API used to dry-run contract interactions."
      ]
    },
    {
      "name": "TransactionPaymentApi",
      "methods": [
        {
          "name": "query_info",
          "inputs": [
            {
              "name": "uxt",
              "typeId": 865,
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "len",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 907,
          "outputs": "pallet_transaction_payment:types:RuntimeDispatchInfo",
          "docs": null
        },
        {
          "name": "query_fee_details",
          "inputs": [
            {
              "name": "uxt",
              "typeId": 865,
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "len",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 908,
          "outputs": "pallet_transaction_payment:types:FeeDetails",
          "docs": null
        },
        {
          "name": "query_weight_to_fee",
          "inputs": [
            {
              "name": "weight",
              "typeId": 9,
              "type": "sp_weights:weight_v2:Weight"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": null
        },
        {
          "name": "query_length_to_fee",
          "inputs": [
            {
              "name": "length",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": null
        }
      ],
      "docs": null
    },
    {
      "name": "AssetConversionApi",
      "methods": [
        {
          "name": "quote_price_tokens_for_exact_tokens",
          "inputs": [
            {
              "name": "asset1",
              "typeId": 399,
              "type": "pallet_asset_conversion:types:NativeOrAssetId"
            },
            {
              "name": "asset2",
              "typeId": 399,
              "type": "pallet_asset_conversion:types:NativeOrAssetId"
            },
            {
              "name": "amount",
              "typeId": 6,
              "type": "U128"
            },
            {
              "name": "include_fee",
              "typeId": 43,
              "type": "Bool"
            }
          ],
          "outputsId": 331,
          "outputs": "option\u003cU128\u003e",
          "docs": [
            " Provides a quote for [`Pallet::swap_tokens_for_exact_tokens`].",
            "",
            " Note that the price may have changed by the time the transaction is executed.",
            " (Use `amount_in_max` to control slippage.)"
          ]
        },
        {
          "name": "quote_price_exact_tokens_for_tokens",
          "inputs": [
            {
              "name": "asset1",
              "typeId": 399,
              "type": "pallet_asset_conversion:types:NativeOrAssetId"
            },
            {
              "name": "asset2",
              "typeId": 399,
              "type": "pallet_asset_conversion:types:NativeOrAssetId"
            },
            {
              "name": "amount",
              "typeId": 6,
              "type": "U128"
            },
            {
              "name": "include_fee",
              "typeId": 43,
              "type": "Bool"
            }
          ],
          "outputsId": 331,
          "outputs": "option\u003cU128\u003e",
          "docs": [
            " Provides a quote for [`Pallet::swap_exact_tokens_for_tokens`].",
            "",
            " Note that the price may have changed by the time the transaction is executed.",
            " (Use `amount_out_min` to control slippage.)"
          ]
        },
        {
          "name": "get_reserves",
          "inputs": [
            {
              "name": "asset1",
              "typeId": 399,
              "type": "pallet_asset_conversion:types:NativeOrAssetId"
            },
            {
              "name": "asset2",
              "typeId": 399,
              "type": "pallet_asset_conversion:types:NativeOrAssetId"
            }
          ],
          "outputsId": 911,
          "outputs": "option\u003cTuple:U128U128\u003e",
          "docs": [
            " Returns the size of the liquidity pool for the given asset pair."
          ]
        }
      ],
      "docs": [
        " This runtime api allows people to query the size of the liquidity pools",
        " and quote prices for swaps."
      ]
    },
    {
      "name": "TransactionPaymentCallApi",
      "methods": [
        {
          "name": "query_call_info",
          "inputs": [
            {
              "name": "call",
              "typeId": 141,
              "type": "Call"
            },
            {
              "name": "len",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 907,
          "outputs": "pallet_transaction_payment:types:RuntimeDispatchInfo",
          "docs": [
            " Query information of a dispatch class, weight, and fee of a given encoded `Call`."
          ]
        },
        {
          "name": "query_call_fee_details",
          "inputs": [
            {
              "name": "call",
              "typeId": 141,
              "type": "Call"
            },
            {
              "name": "len",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 908,
          "outputs": "pallet_transaction_payment:types:FeeDetails",
          "docs": [
            " Query fee details of a given encoded `Call`."
          ]
        },
        {
          "name": "query_weight_to_fee",
          "inputs": [
            {
              "name": "weight",
              "typeId": 9,
              "type": "sp_weights:weight_v2:Weight"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": [
            " Query the output of the current `WeightToFee` given some input."
          ]
        },
        {
          "name": "query_length_to_fee",
          "inputs": [
            {
              "name": "length",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 6,
          "outputs": "U128",
          "docs": [
            " Query the output of the current `LengthToFee` given some input."
          ]
        }
      ],
      "docs": null
    },
    {
      "name": "NftsApi",
      "methods": [
        {
          "name": "owner",
          "inputs": [
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "item",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 42,
          "outputs": "option\u003c[U8; 32]\u003e",
          "docs": null
        },
        {
          "name": "collection_owner",
          "inputs": [
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            }
          ],
          "outputsId": 42,
          "outputs": "option\u003c[U8; 32]\u003e",
          "docs": null
        },
        {
          "name": "attribute",
          "inputs": [
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "item",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "key",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 448,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": null
        },
        {
          "name": "custom_attribute",
          "inputs": [
            {
              "name": "account",
              "typeId": 0,
              "type": "[U8; 32]"
            },
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "item",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "key",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 448,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": null
        },
        {
          "name": "system_attribute",
          "inputs": [
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "item",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "key",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 448,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": null
        },
        {
          "name": "collection_attribute",
          "inputs": [
            {
              "name": "collection",
              "typeId": 4,
              "type": "U32"
            },
            {
              "name": "key",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 448,
          "outputs": "option\u003cVec\u003cU8\u003e\u003e",
          "docs": null
        }
      ],
      "docs": null
    },
    {
      "name": "MmrApi",
      "methods": [
        {
          "name": "mmr_root",
          "inputs": null,
          "outputsId": 913,
          "outputs": "Result\u003cH256,sp_mmr_primitives:Error\u003e",
          "docs": [
            " Return the on-chain MMR root hash."
          ]
        },
        {
          "name": "mmr_leaf_count",
          "inputs": null,
          "outputsId": 915,
          "outputs": "Result\u003cU64,sp_mmr_primitives:Error\u003e",
          "docs": [
            " Return the number of MMR blocks in the chain."
          ]
        },
        {
          "name": "generate_proof",
          "inputs": [
            {
              "name": "block_numbers",
              "typeId": 114,
              "type": "Vec\u003cU32\u003e"
            },
            {
              "name": "best_known_block_number",
              "typeId": 38,
              "type": "option\u003cU32\u003e"
            }
          ],
          "outputsId": 916,
          "outputs": "Result\u003cTuple:Vec\u003csp_mmr_primitives:EncodableOpaqueLeaf\u003esp_mmr_primitives:Proof,sp_mmr_primitives:Error\u003e",
          "docs": [
            " Generate MMR proof for a series of block numbers. If `best_known_block_number = Some(n)`,",
            " use historical MMR state at given block height `n`. Else, use current MMR state."
          ]
        },
        {
          "name": "verify_proof",
          "inputs": [
            {
              "name": "leaves",
              "typeId": 918,
              "type": "Vec\u003csp_mmr_primitives:EncodableOpaqueLeaf\u003e"
            },
            {
              "name": "proof",
              "typeId": 920,
              "type": "sp_mmr_primitives:Proof"
            }
          ],
          "outputsId": 921,
          "outputs": "Result\u003cNULL,sp_mmr_primitives:Error\u003e",
          "docs": [
            " Verify MMR proof against on-chain MMR for a batch of leaves.",
            "",
            " Note this function will use on-chain MMR root hash and check if the proof matches the hash.",
            " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the",
            " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]"
          ]
        },
        {
          "name": "verify_proof_stateless",
          "inputs": [
            {
              "name": "root",
              "typeId": 12,
              "type": "H256"
            },
            {
              "name": "leaves",
              "typeId": 918,
              "type": "Vec\u003csp_mmr_primitives:EncodableOpaqueLeaf\u003e"
            },
            {
              "name": "proof",
              "typeId": 920,
              "type": "sp_mmr_primitives:Proof"
            }
          ],
          "outputsId": 921,
          "outputs": "Result\u003cNULL,sp_mmr_primitives:Error\u003e",
          "docs": [
            " Verify MMR proof against given root hash for a batch of leaves.",
            "",
            " Note this function does not require any on-chain storage - the",
            " proof is verified against given MMR root hash.",
            "",
            " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the",
            " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]"
          ]
        }
      ],
      "docs": [
        " API to interact with MMR pallet."
      ]
    },
    {
      "name": "SessionKeys",
      "methods": [
        {
          "name": "generate_session_keys",
          "inputs": [
            {
              "name": "seed",
              "typeId": 448,
              "type": "option\u003cVec\u003cU8\u003e\u003e"
            }
          ],
          "outputsId": 13,
          "outputs": "Vec\u003cU8\u003e",
          "docs": [
            " Generate a set of session keys with optionally using the given seed.",
            " The keys should be stored within the keystore exposed via runtime",
            " externalities.",
            "",
            " The seed needs to be a valid `utf8` string.",
            "",
            " Returns the concatenated SCALE encoded public keys."
          ]
        },
        {
          "name": "decode_session_keys",
          "inputs": [
            {
              "name": "encoded",
              "typeId": 13,
              "type": "Vec\u003cU8\u003e"
            }
          ],
          "outputsId": 922,
          "outputs": "option\u003cVec\u003cTuple:Vec\u003cU8\u003e[U8; 4]\u003e\u003e",
          "docs": [
            " Decode the given public session keys.",
            "",
            " Returns the list of public raw public keys + key type."
          ]
        }
      ],
      "docs": [
        " Session keys runtime api."
      ]
    }
  ],
  "outer_enums": {
    "callType": 141,
    "eventType": 20,
    "errorType": 925
  },
  "customer": {
    "map": null
  }
}